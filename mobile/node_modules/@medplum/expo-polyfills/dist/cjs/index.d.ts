import { ClientStorage } from '@medplum/core';
import expoWebCrypto from 'expo-standard-web-crypto';
import { IClientStorage } from '@medplum/core';
import { MedplumClient } from '@medplum/core';

export declare function cleanupMedplumWebAPIs(): void;

/**
 * Provides a wrapper around Expo's `SecureStore` package which provides a persistent and secure storage on mobile.
 *
 * This class is necessary for use with `MedplumClient` since `MedplumClient` expects `ClientStorage` to use a synchronous interface, and `SecureStore` uses an asynchronous one.
 *
 * On web, this class will instead wrap `localStorage` automatically, so there is no need to conditionally omit passing this to `MedplumClient` for React Native Web.
 */
export declare class ExpoClientStorage extends ClientStorage implements IExpoClientStorage {
    private secureStorage?;
    constructor();
    getInitPromise(): Promise<void>;
    get length(): number;
}

export declare type ExtendedExpoCrypto = typeof expoWebCrypto & {
    subtle: {
        digest: (algorithm: AlgorithmIdentifier, data: BufferSource) => Promise<ArrayBuffer>;
    };
};

export declare interface IExpoClientStorage extends IClientStorage {
    getInitPromise(): Promise<void>;
    length: number;
}

export declare function initWebSocketManager(medplum: MedplumClient): void;

export declare type PolyfillEnabledConfig = {
    crypto?: boolean;
    location?: boolean;
    sessionStorage?: boolean;
    textEncoder?: boolean;
    btoa?: boolean;
    event?: boolean;
};

export declare function polyfillMedplumWebAPIs(config?: PolyfillEnabledConfig): void;

export { }
