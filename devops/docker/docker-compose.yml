# OmniCare EMR Docker Compose Configuration
# Development and testing environment

version: '3.8'

services:
  # PostgreSQL Database
  database:
    build:
      context: ../../
      dockerfile: devops/docker/database/Dockerfile
    container_name: omnicare-database
    restart: unless-stopped
    environment:
      POSTGRES_DB: omnicare_emr
      POSTGRES_USER: omnicare_user
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
      PGDATA: /var/lib/postgresql/data/pgdata
    secrets:
      - db_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_logs:/var/log/postgresql
      - ./database/backups:/backups
    ports:
      - "5432:5432"
    networks:
      - omnicare-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U omnicare_user -d omnicare_emr"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: omnicare-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-omnicare-redis-pass}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - omnicare-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API Service
  backend:
    build:
      context: ../../
      dockerfile: devops/docker/backend/Dockerfile
      target: development
    container_name: omnicare-backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://omnicare_user:${DB_PASSWORD:-omnicare-db-pass}@database:5432/omnicare_emr
      REDIS_URL: redis://redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-omnicare-redis-pass}
      JWT_SECRET: ${JWT_SECRET:-development-jwt-secret-change-in-production}
      MEDPLUM_BASE_URL: ${MEDPLUM_BASE_URL:-https://api.medplum.com}
      MEDPLUM_CLIENT_ID: ${MEDPLUM_CLIENT_ID}
      MEDPLUM_CLIENT_SECRET: ${MEDPLUM_CLIENT_SECRET}
    volumes:
      - ../../backend:/app
      - backend_node_modules:/app/node_modules
      - backend_logs:/app/logs
    ports:
      - "3001:3001"
    networks:
      - omnicare-network
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend Web Application
  frontend:
    build:
      context: ../../
      dockerfile: devops/docker/frontend/Dockerfile
      target: development
    container_name: omnicare-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:3001
      NEXT_PUBLIC_MEDPLUM_BASE_URL: ${MEDPLUM_BASE_URL:-https://api.medplum.com}
      NEXT_TELEMETRY_DISABLED: 1
    volumes:
      - ../../frontend:/app
      - frontend_node_modules:/app/node_modules
      - frontend_next:/app/.next
    ports:
      - "3000:3000"
    networks:
      - omnicare-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Mobile Development Server
  mobile:
    build:
      context: ../../
      dockerfile: devops/docker/mobile/Dockerfile
      target: metro
    container_name: omnicare-mobile
    restart: unless-stopped
    environment:
      NODE_ENV: development
      REACT_NATIVE_PACKAGER_HOSTNAME: 0.0.0.0
    volumes:
      - ../../mobile:/app
      - mobile_node_modules:/app/node_modules
    ports:
      - "8081:8081"  # Metro bundler
      - "8082:8082"  # Dev server
    networks:
      - omnicare-network
    depends_on:
      - backend

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: omnicare-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl-certs:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - omnicare-network
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: omnicare-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - omnicare-network

  grafana:
    image: grafana/grafana:latest
    container_name: omnicare-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3001:3000"
    networks:
      - omnicare-network
    depends_on:
      - prometheus

# Docker secrets for sensitive data
secrets:
  db_password:
    file: ./secrets/db_password.txt

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  postgres_logs:
    driver: local
  redis_data:
    driver: local
  backend_node_modules:
    driver: local
  backend_logs:
    driver: local
  frontend_node_modules:
    driver: local
  frontend_next:
    driver: local
  mobile_node_modules:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Networks
networks:
  omnicare-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16