# Backend API Deployment for OmniCare EMR
apiVersion: v1
kind: ConfigMap
metadata:
  name: backend-config
  namespace: omnicare
  labels:
    app: backend
    component: api
data:
  NODE_ENV: "production"
  PORT: "3001"
  MEDPLUM_BASE_URL: "https://api.medplum.com"
  LOG_LEVEL: "info"
  CORS_ORIGIN: "https://omnicare.example.com"
  RATE_LIMIT_WINDOW_MS: "900000" # 15 minutes
  RATE_LIMIT_MAX_REQUESTS: "100"
---
apiVersion: v1
kind: Secret
metadata:
  name: backend-secret
  namespace: omnicare
  labels:
    app: backend
    component: api
type: Opaque
data:
  JWT_SECRET: am9udC1zZWNyZXQtY2hhbmdlLWluLXByb2R1Y3Rpb24= # base64 encoded JWT secret
  MEDPLUM_CLIENT_ID: bWVkcGx1bS1jbGllbnQtaWQ= # base64 encoded Medplum client ID
  MEDPLUM_CLIENT_SECRET: bWVkcGx1bS1jbGllbnQtc2VjcmV0 # base64 encoded Medplum client secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: omnicare
  labels:
    app: backend
    component: api
    version: "1.0.0"
spec:
  replicas: 3 # Start with 3 replicas for high availability
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: backend
      component: api
  template:
    metadata:
      labels:
        app: backend
        component: api
        version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3001"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsUser: 1001
        runAsGroup: 1001
        runAsNonRoot: true
        fsGroup: 1001
      containers:
      - name: backend
        image: omnicare/backend:latest # Use your built image
        imagePullPolicy: Always
        ports:
        - containerPort: 3001
          name: http
          protocol: TCP
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: NODE_ENV
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: PORT
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: DATABASE_URL
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: REDIS_URL
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: backend-secret
              key: JWT_SECRET
        - name: MEDPLUM_BASE_URL
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: MEDPLUM_BASE_URL
        - name: MEDPLUM_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: backend-secret
              key: MEDPLUM_CLIENT_ID
        - name: MEDPLUM_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: backend-secret
              key: MEDPLUM_CLIENT_SECRET
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: LOG_LEVEL
        - name: CORS_ORIGIN
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: CORS_ORIGIN
        - name: RATE_LIMIT_WINDOW_MS
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: RATE_LIMIT_WINDOW_MS
        - name: RATE_LIMIT_MAX_REQUESTS
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: RATE_LIMIT_MAX_REQUESTS
        volumeMounts:
        - name: logs
          mountPath: /app/logs
        - name: tmp
          mountPath: /tmp
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3001
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 3001
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /health
            port: 3001
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 30
          successThreshold: 1
      volumes:
      - name: logs
        emptyDir: {}
      - name: tmp
        emptyDir: {}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  name: backend
  namespace: omnicare
  labels:
    app: backend
    component: api
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3001"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - port: 3001
    targetPort: 3001
    protocol: TCP
    name: http
  selector:
    app: backend
    component: api
---
# Horizontal Pod Autoscaler for backend
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: backend-hpa
  namespace: omnicare
  labels:
    app: backend
    component: api
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: backend
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30
      - type: Pods
        value: 2
        periodSeconds: 30
      selectPolicy: Max
---
# Pod Disruption Budget for backend
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: backend-pdb
  namespace: omnicare
  labels:
    app: backend
    component: api
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: backend
      component: api
---
# Network Policy for backend security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: backend-network-policy
  namespace: omnicare
  labels:
    app: backend
    component: api
spec:
  podSelector:
    matchLabels:
      app: backend
      component: api
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: frontend
    - podSelector:
        matchLabels:
          app: nginx
    ports:
    - protocol: TCP
      port: 3001
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: [] # Allow all external traffic for FHIR server communication
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80