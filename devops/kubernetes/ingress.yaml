# Ingress Configuration for OmniCare EMR
# Requires NGINX Ingress Controller and cert-manager for SSL

apiVersion: v1
kind: Secret
metadata:
  name: omnicare-tls
  namespace: omnicare
  labels:
    app: omnicare
    component: ingress
type: kubernetes.io/tls
data:
  # Add your SSL certificate and key here (base64 encoded)
  # tls.crt: LS0tLS1CRUdJTi... (your certificate)
  # tls.key: LS0tLS1CRUdJTi... (your private key)
---
# Certificate for automatic SSL management with cert-manager
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: omnicare-cert
  namespace: omnicare
  labels:
    app: omnicare
    component: ssl
spec:
  secretName: omnicare-tls
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  dnsNames:
  - omnicare.example.com
  - api.omnicare.example.com
  - www.omnicare.example.com
---
# Main Ingress for the application
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: omnicare-ingress
  namespace: omnicare
  labels:
    app: omnicare
    component: ingress
  annotations:
    # NGINX Ingress Controller annotations
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/ssl-protocols: "TLSv1.2 TLSv1.3"
    nginx.ingress.kubernetes.io/ssl-ciphers: "ECDHE-ECDSA-AES128-GCM-SHA256,ECDHE-RSA-AES128-GCM-SHA256,ECDHE-ECDSA-AES256-GCM-SHA384,ECDHE-RSA-AES256-GCM-SHA384"
    
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Frame-Options "SAMEORIGIN" always;
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Referrer-Policy "strict-origin-when-cross-origin" always;
      add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' https:; connect-src 'self' https://api.medplum.com; frame-ancestors 'self';" always;
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/rate-limit-connections: "10"
    
    # Connection and timeout settings
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    
    # Enable session affinity for WebSocket connections
    nginx.ingress.kubernetes.io/affinity: "cookie"
    nginx.ingress.kubernetes.io/session-cookie-name: "omnicare-session"
    nginx.ingress.kubernetes.io/session-cookie-expires: "3600"
    nginx.ingress.kubernetes.io/session-cookie-max-age: "3600"
    nginx.ingress.kubernetes.io/session-cookie-path: "/"
    
    # Compression
    nginx.ingress.kubernetes.io/enable-compression: "true"
    nginx.ingress.kubernetes.io/compression-type: "text/html text/plain text/css application/javascript application/json application/xml text/javascript"
    
    # CORS settings
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    
    # Automatic certificate management
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    
    # Monitoring
    nginx.ingress.kubernetes.io/enable-access-log: "true"
    nginx.ingress.kubernetes.io/access-log-params: "buffer=16k flush=5s"
spec:
  tls:
  - hosts:
    - omnicare.example.com
    - api.omnicare.example.com
    - www.omnicare.example.com
    secretName: omnicare-tls
  rules:
  # Main application frontend
  - host: omnicare.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend
            port:
              number: 3000
  
  # API backend
  - host: api.omnicare.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: backend
            port:
              number: 3001
  
  # WWW redirect
  - host: www.omnicare.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend
            port:
              number: 3000
---
# Ingress for monitoring services (internal access)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: omnicare-monitoring-ingress
  namespace: omnicare
  labels:
    app: omnicare
    component: monitoring
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    
    # IP whitelist for monitoring access (adjust IPs as needed)
    nginx.ingress.kubernetes.io/whitelist-source-range: "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"
    
    # Basic auth for additional security
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: monitoring-auth
    nginx.ingress.kubernetes.io/auth-realm: "OmniCare Monitoring"
    
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - monitoring.omnicare.example.com
    secretName: omnicare-monitoring-tls
  rules:
  - host: monitoring.omnicare.example.com
    http:
      paths:
      # Grafana dashboards
      - path: /grafana
        pathType: Prefix
        backend:
          service:
            name: grafana
            port:
              number: 3000
      
      # Prometheus metrics
      - path: /prometheus
        pathType: Prefix
        backend:
          service:
            name: prometheus
            port:
              number: 9090
      
      # Kibana logs
      - path: /kibana
        pathType: Prefix
        backend:
          service:
            name: kibana
            port:
              number: 5601
---
# Basic auth secret for monitoring
apiVersion: v1
kind: Secret
metadata:
  name: monitoring-auth
  namespace: omnicare
  labels:
    app: omnicare
    component: monitoring
type: Opaque
data:
  # admin:$2y$10$... (bcrypt hash of password)
  # Generate with: htpasswd -nb admin yourpassword | base64
  auth: YWRtaW46JDJ5JDEwJE92RmJGc0c4Lkc4Lkc4Lkc4Lkc4Lkc4Lkc4Lkc4Lkc4Lkc4Lkc4Lkc4Lkc4Lg==
---
# Certificate for monitoring
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: omnicare-monitoring-cert
  namespace: omnicare
  labels:
    app: omnicare
    component: monitoring
spec:
  secretName: omnicare-monitoring-tls
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  dnsNames:
  - monitoring.omnicare.example.com
---
# Middleware for additional security (if using Traefik instead of NGINX)
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: security-headers
  namespace: omnicare
  labels:
    app: omnicare
    component: security
spec:
  headers:
    customRequestHeaders:
      X-Forwarded-Proto: "https"
    customResponseHeaders:
      X-Frame-Options: "SAMEORIGIN"
      X-Content-Type-Options: "nosniff"
      X-XSS-Protection: "1; mode=block"
      Referrer-Policy: "strict-origin-when-cross-origin"
      Strict-Transport-Security: "max-age=31536000; includeSubDomains; preload"
    contentSecurityPolicy: "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' https:; connect-src 'self' https://api.medplum.com; frame-ancestors 'self';"