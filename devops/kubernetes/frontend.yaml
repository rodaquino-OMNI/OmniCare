# Frontend Web Application Deployment for OmniCare EMR
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-config
  namespace: omnicare
  labels:
    app: frontend
    component: web
data:
  NODE_ENV: "production"
  PORT: "3000"
  HOSTNAME: "0.0.0.0"
  NEXT_TELEMETRY_DISABLED: "1"
  NEXT_PUBLIC_API_URL: "https://api.omnicare.example.com"
  NEXT_PUBLIC_MEDPLUM_BASE_URL: "https://api.medplum.com"
  NEXT_PUBLIC_APP_NAME: "OmniCare EMR"
  NEXT_PUBLIC_APP_VERSION: "1.0.0"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: omnicare
  labels:
    app: frontend
    component: web
    version: "1.0.0"
spec:
  replicas: 3 # Start with 3 replicas for high availability
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 1
  selector:
    matchLabels:
      app: frontend
      component: web
  template:
    metadata:
      labels:
        app: frontend
        component: web
        version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/api/metrics"
    spec:
      securityContext:
        runAsUser: 1001
        runAsGroup: 1001
        runAsNonRoot: true
        fsGroup: 1001
      containers:
      - name: frontend
        image: omnicare/frontend:latest # Use your built image
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: frontend-config
              key: NODE_ENV
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: frontend-config
              key: PORT
        - name: HOSTNAME
          valueFrom:
            configMapKeyRef:
              name: frontend-config
              key: HOSTNAME
        - name: NEXT_TELEMETRY_DISABLED
          valueFrom:
            configMapKeyRef:
              name: frontend-config
              key: NEXT_TELEMETRY_DISABLED
        - name: NEXT_PUBLIC_API_URL
          valueFrom:
            configMapKeyRef:
              name: frontend-config
              key: NEXT_PUBLIC_API_URL
        - name: NEXT_PUBLIC_MEDPLUM_BASE_URL
          valueFrom:
            configMapKeyRef:
              name: frontend-config
              key: NEXT_PUBLIC_MEDPLUM_BASE_URL
        - name: NEXT_PUBLIC_APP_NAME
          valueFrom:
            configMapKeyRef:
              name: frontend-config
              key: NEXT_PUBLIC_APP_NAME
        - name: NEXT_PUBLIC_APP_VERSION
          valueFrom:
            configMapKeyRef:
              name: frontend-config
              key: NEXT_PUBLIC_APP_VERSION
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: nextjs-cache
          mountPath: /app/.next/cache
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /api/health
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 30
          successThreshold: 1
      volumes:
      - name: tmp
        emptyDir: {}
      - name: nextjs-cache
        emptyDir: {}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: omnicare
  labels:
    app: frontend
    component: web
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3000"
    prometheus.io/path: "/api/metrics"
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: 3000
    protocol: TCP
    name: http
  selector:
    app: frontend
    component: web
---
# Horizontal Pod Autoscaler for frontend
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: frontend-hpa
  namespace: omnicare
  labels:
    app: frontend
    component: web
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: frontend
  minReplicas: 3
  maxReplicas: 15
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30
      - type: Pods
        value: 3
        periodSeconds: 30
      selectPolicy: Max
---
# Pod Disruption Budget for frontend
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: frontend-pdb
  namespace: omnicare
  labels:
    app: frontend
    component: web
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: frontend
      component: web
---
# Network Policy for frontend security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: frontend-network-policy
  namespace: omnicare
  labels:
    app: frontend
    component: web
spec:
  podSelector:
    matchLabels:
      app: frontend
      component: web
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: nginx
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 3000
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: backend
    ports:
    - protocol: TCP
      port: 3001
  - to: [] # Allow external traffic for CDN, analytics, etc.
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80