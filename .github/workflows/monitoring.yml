name: Monitoring and Observability Setup

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to setup monitoring'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  AWS_REGION: us-east-1

jobs:
  setup-monitoring:
    name: Setup Monitoring Stack
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name omnicare-${{ github.event.inputs.environment }} --region ${{ env.AWS_REGION }}

      - name: Create monitoring namespace
        run: |
          kubectl create namespace monitoring --dry-run=client -o yaml | kubectl apply -f -

      - name: Add Helm repositories
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo add elastic https://helm.elastic.co
          helm repo add fluent https://fluent.github.io/helm-charts
          helm repo update

      - name: Install Prometheus Stack
        run: |
          helm upgrade --install kube-prometheus-stack prometheus-community/kube-prometheus-stack \
            --namespace monitoring \
            --values ./devops/monitoring/prometheus-values.yaml \
            --set prometheus.prometheusSpec.retention=30d \
            --set prometheus.prometheusSpec.storageSpec.volumeClaimTemplate.spec.resources.requests.storage=100Gi \
            --set alertmanager.alertmanagerSpec.storage.volumeClaimTemplate.spec.resources.requests.storage=10Gi \
            --wait

      - name: Install Grafana
        run: |
          helm upgrade --install grafana grafana/grafana \
            --namespace monitoring \
            --values ./devops/monitoring/grafana-values.yaml \
            --set persistence.enabled=true \
            --set persistence.size=10Gi \
            --set adminPassword=${{ secrets.GRAFANA_ADMIN_PASSWORD }} \
            --wait

      - name: Install Elasticsearch
        run: |
          helm upgrade --install elasticsearch elastic/elasticsearch \
            --namespace monitoring \
            --values ./devops/monitoring/elasticsearch-values.yaml \
            --set replicas=3 \
            --set minimumMasterNodes=2 \
            --set volumeClaimTemplate.resources.requests.storage=100Gi \
            --wait

      - name: Install Kibana
        run: |
          helm upgrade --install kibana elastic/kibana \
            --namespace monitoring \
            --values ./devops/monitoring/kibana-values.yaml \
            --set elasticsearchHosts="http://elasticsearch-master:9200" \
            --wait

      - name: Install Fluent Bit for log collection
        run: |
          helm upgrade --install fluent-bit fluent/fluent-bit \
            --namespace monitoring \
            --values ./devops/monitoring/fluent-bit-values.yaml \
            --set config.outputs.es.host=elasticsearch-master \
            --set config.outputs.es.port=9200 \
            --wait

      - name: Configure HIPAA-compliant audit logging
        run: |
          kubectl apply -f - <<EOF
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: audit-policy
            namespace: kube-system
          data:
            audit-policy.yaml: |
              apiVersion: audit.k8s.io/v1
              kind: Policy
              rules:
                # Log all requests at the RequestResponse level
                - level: RequestResponse
                  omitStages:
                    - RequestReceived
                  resources:
                    - group: ""
                      resources: ["pods", "services", "secrets", "configmaps"]
                  namespaces: ["omnicare", "omnicare-staging"]
                # Log login attempts
                - level: Metadata
                  omitStages:
                    - RequestReceived
                  resources:
                    - group: "authentication.k8s.io"
                      resources: ["tokenreviews"]
                # Log all other requests at Metadata level
                - level: Metadata
                  omitStages:
                    - RequestReceived
          EOF

      - name: Deploy custom Prometheus rules for HIPAA compliance
        run: |
          kubectl apply -f ./devops/monitoring/hipaa-compliance-rules.yaml -n monitoring

      - name: Deploy Grafana dashboards
        run: |
          kubectl apply -f ./devops/monitoring/grafana-dashboards/ -n monitoring

      - name: Configure CloudWatch integration
        run: |
          helm upgrade --install cloudwatch-exporter prometheus-community/prometheus-cloudwatch-exporter \
            --namespace monitoring \
            --set aws.region=${{ env.AWS_REGION }} \
            --set serviceMonitor.enabled=true \
            --wait

      - name: Setup alert notifications
        run: |
          kubectl apply -f - <<EOF
          apiVersion: v1
          kind: Secret
          metadata:
            name: alertmanager-main
            namespace: monitoring
          stringData:
            alertmanager.yaml: |
              global:
                resolve_timeout: 5m
                slack_api_url: '${{ secrets.SLACK_WEBHOOK }}'
              route:
                group_by: ['alertname', 'cluster', 'service']
                group_wait: 10s
                group_interval: 10s
                repeat_interval: 12h
                receiver: 'default'
                routes:
                - match:
                    severity: critical
                  receiver: pagerduty
                - match:
                    severity: warning
                  receiver: slack
              receivers:
              - name: 'default'
                slack_configs:
                - channel: '#alerts'
                  title: 'OmniCare Alert'
                  text: '{{ range .Alerts }}{{ .Annotations.summary }}{{ end }}'
              - name: 'slack'
                slack_configs:
                - channel: '#alerts'
                  title: 'OmniCare Warning'
                  text: '{{ range .Alerts }}{{ .Annotations.summary }}{{ end }}'
              - name: 'pagerduty'
                pagerduty_configs:
                - service_key: '${{ secrets.PAGERDUTY_SERVICE_KEY }}'
          EOF

      - name: Deploy application metrics exporter
        run: |
          kubectl apply -f - <<EOF
          apiVersion: v1
          kind: ServiceMonitor
          metadata:
            name: omnicare-backend
            namespace: monitoring
          spec:
            selector:
              matchLabels:
                app: backend
            endpoints:
            - port: http
              path: /metrics
              interval: 30s
          ---
          apiVersion: v1
          kind: ServiceMonitor
          metadata:
            name: omnicare-frontend
            namespace: monitoring
          spec:
            selector:
              matchLabels:
                app: frontend
            endpoints:
            - port: http
              path: /api/metrics
              interval: 30s
          EOF

      - name: Verify monitoring stack
        run: |
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=prometheus -n monitoring --timeout=300s
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=grafana -n monitoring --timeout=300s
          kubectl wait --for=condition=ready pod -l app=elasticsearch-master -n monitoring --timeout=300s
          kubectl wait --for=condition=ready pod -l app=kibana -n monitoring --timeout=300s

      - name: Output access information
        run: |
          echo "Monitoring stack deployed successfully!"
          echo "Grafana URL: https://monitoring.omnicare.example.com/grafana"
          echo "Prometheus URL: https://monitoring.omnicare.example.com/prometheus"
          echo "Kibana URL: https://monitoring.omnicare.example.com/kibana"
          echo ""
          echo "To access locally, use port-forward:"
          echo "kubectl port-forward -n monitoring svc/grafana 3000:80"
          echo "kubectl port-forward -n monitoring svc/kube-prometheus-stack-prometheus 9090:9090"
          echo "kubectl port-forward -n monitoring svc/kibana-kibana 5601:5601"

      - name: Notify monitoring setup completion
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Monitoring setup for ${{ github.event.inputs.environment }} - ${{ job.status }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}