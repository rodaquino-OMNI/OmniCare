name: Optimized Build Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18.x'
  CACHE_VERSION: v4
  NODE_OPTIONS: '--max-old-space-size=4096 --experimental-loader @swc-node/register/esm'
  CI: true
  FORCE_COLOR: 1
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
  # Build performance optimizations
  NEXT_TELEMETRY_DISABLED: 1
  DISABLE_ESLINT_PLUGIN: true
  SKIP_VALIDATION: true
  
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Pre-build cache warming
  cache-warm:
    name: Cache Warming
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js with enhanced caching
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore build caches
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            backend/node_modules
            frontend/node_modules
            backend/dist
            frontend/.next
            ~/.npm
            .eslintcache
            tsconfig.tsbuildinfo
            backend/tsconfig.tsbuildinfo
            frontend/tsconfig.tsbuildinfo
          key: ${{ runner.os }}-build-cache-${{ env.CACHE_VERSION }}-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-build-cache-${{ env.CACHE_VERSION }}-${{ hashFiles('**/package-lock.json') }}-
            ${{ runner.os }}-build-cache-${{ env.CACHE_VERSION }}-

      - name: Install dependencies with parallel processing
        run: |
          # Install with optimized settings
          export NPM_CONFIG_PREFER_OFFLINE=true
          export NPM_CONFIG_NO_AUDIT=true
          export NPM_CONFIG_NO_FUND=true
          export NPM_CONFIG_MAXSOCKETS=20
          
          npm ci --prefer-offline --no-audit --no-fund --maxsockets=20 &
          cd backend && npm ci --prefer-offline --no-audit --no-fund --maxsockets=20 &
          cd frontend && npm ci --prefer-offline --no-audit --no-fund --maxsockets=20 &
          wait
          
          # Verify installations
          npm ls --depth=0 || true
          cd backend && npm ls --depth=0 || true
          cd frontend && npm ls --depth=0 || true

      - name: Save build cache
        uses: actions/cache/save@v4
        with:
          path: |
            node_modules
            backend/node_modules
            frontend/node_modules
            ~/.npm
            .eslintcache
            tsconfig.tsbuildinfo
            backend/tsconfig.tsbuildinfo
            frontend/tsconfig.tsbuildinfo
          key: ${{ runner.os }}-build-cache-${{ env.CACHE_VERSION }}-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.ts', '**/*.tsx') }}

  # Parallel quality checks
  quality-checks:
    name: Quality Checks (${{ matrix.workspace }})
    runs-on: ubuntu-latest
    needs: cache-warm
    strategy:
      matrix:
        workspace: [backend, frontend]
        check: [lint, typecheck]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.workspace }}/package-lock.json

      - name: Restore cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ${{ matrix.workspace }}/node_modules
            ${{ matrix.workspace }}/tsconfig.tsbuildinfo
            .eslintcache
          key: ${{ runner.os }}-build-cache-${{ env.CACHE_VERSION }}-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.ts', '**/*.tsx') }}

      - name: Run ${{ matrix.check }}
        working-directory: ./${{ matrix.workspace }}
        run: npm run ${{ matrix.check }}

  # Optimized parallel testing
  test-parallel:
    name: Tests (${{ matrix.workspace }}-${{ matrix.suite }})
    runs-on: ubuntu-latest
    needs: cache-warm
    strategy:
      matrix:
        workspace: [backend, frontend]
        suite: [unit, integration]
        exclude:
          - workspace: frontend
            suite: integration
      fail-fast: false
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: omnicare_test
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: omnicare_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.workspace }}/package-lock.json

      - name: Restore cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ${{ matrix.workspace }}/node_modules
            ${{ matrix.workspace }}/coverage
          key: ${{ runner.os }}-build-cache-${{ env.CACHE_VERSION }}-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.ts', '**/*.tsx') }}

      - name: Create test environment
        if: matrix.workspace == 'backend'
        working-directory: ./backend
        run: |
          echo "NODE_ENV=test" > .env.test
          echo "DATABASE_URL=postgresql://omnicare_test:test_password@localhost:5432/omnicare_test" >> .env.test
          echo "REDIS_URL=redis://localhost:6379" >> .env.test
          echo "JWT_SECRET=test-secret-key" >> .env.test

      - name: Run tests with performance monitoring
        working-directory: ./${{ matrix.workspace }}
        run: |
          start_time=$(date +%s)
          if [ "${{ matrix.suite }}" == "unit" ]; then
            npm run test:unit -- --ci --coverage --maxWorkers=4 --cache --watchman=false
          else
            npm run test:integration -- --ci --coverage --maxWorkers=2 --cache --watchman=false
          fi
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          echo "Test duration: ${duration}s" >> $GITHUB_STEP_SUMMARY
        env:
          NODE_ENV: test

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./${{ matrix.workspace }}/coverage/lcov.info
          flags: ${{ matrix.workspace }}-${{ matrix.suite }}
          name: ${{ matrix.workspace }}-${{ matrix.suite }}

  # Optimized parallel builds
  build-parallel:
    name: Build (${{ matrix.workspace }})
    runs-on: ubuntu-latest
    needs: [quality-checks, test-parallel]
    strategy:
      matrix:
        workspace: [backend, frontend]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.workspace }}/package-lock.json

      - name: Restore cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ${{ matrix.workspace }}/node_modules
            ${{ matrix.workspace }}/dist
            ${{ matrix.workspace }}/.next
            ${{ matrix.workspace }}/tsconfig.tsbuildinfo
          key: ${{ runner.os }}-build-cache-${{ env.CACHE_VERSION }}-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.ts', '**/*.tsx') }}

      - name: Build with performance tracking
        working-directory: ./${{ matrix.workspace }}
        run: |
          start_time=$(date +%s)
          
          # Use fast build for CI
          if [ "${{ matrix.workspace }}" == "frontend" ]; then
            npm run build:fast
          else
            npm run build:parallel
          fi
          
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          echo "Build duration: ${duration}s" >> $GITHUB_STEP_SUMMARY
          
          # Performance metrics
          if [ "${{ matrix.workspace }}" == "frontend" ]; then
            if [ -f ".next/build-performance.json" ]; then
              cat .next/build-performance.json >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          # Check bundle size
          if [ "${{ matrix.workspace }}" == "frontend" ]; then
            size=$(du -sh .next/static 2>/dev/null | cut -f1 || echo "N/A")
            echo "Bundle size: $size" >> $GITHUB_STEP_SUMMARY
          else
            size=$(du -sh dist 2>/dev/null | cut -f1 || echo "N/A")
            echo "Build size: $size" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.workspace }}-build
          path: |
            ${{ matrix.workspace }}/dist
            ${{ matrix.workspace }}/.next
          retention-days: 7

  # Docker build optimization
  docker-build:
    name: Docker Build (${{ matrix.service }})
    runs-on: ubuntu-latest
    needs: build-parallel
    strategy:
      matrix:
        service: [backend, frontend]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:v0.12.0
            network=host

      - name: Build Docker image with cache
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./devops/docker/${{ matrix.service }}/Dockerfile
          target: production
          push: false
          tags: omnicare-${{ matrix.service }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  # Performance analysis
  performance-analysis:
    name: Performance Analysis
    runs-on: ubuntu-latest
    needs: [build-parallel, docker-build]
    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Analyze build performance
        run: |
          echo "## Build Performance Report" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|--------|" >> $GITHUB_STEP_SUMMARY
          
          # Analyze frontend bundle
          if [ -d "artifacts/frontend-build/.next" ]; then
            frontend_size=$(du -sh artifacts/frontend-build/.next 2>/dev/null | cut -f1 || echo "N/A")
            echo "| Frontend Bundle Size | $frontend_size | ✅ |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Analyze backend build
          if [ -d "artifacts/backend-build/dist" ]; then
            backend_size=$(du -sh artifacts/backend-build/dist 2>/dev/null | cut -f1 || echo "N/A")
            echo "| Backend Build Size | $backend_size | ✅ |" >> $GITHUB_STEP_SUMMARY
          fi

  # Final status check
  build-success:
    name: Build Success
    runs-on: ubuntu-latest
    needs: [quality-checks, test-parallel, build-parallel, docker-build, performance-analysis]
    if: always()
    steps:
      - name: Check build status
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "❌ Build pipeline failed"
            exit 1
          fi
          echo "✅ All build pipeline checks passed!"
          echo "## 🚀 Build Pipeline Success" >> $GITHUB_STEP_SUMMARY
          echo "All quality checks, tests, and builds completed successfully!" >> $GITHUB_STEP_SUMMARY