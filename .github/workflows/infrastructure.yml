name: Infrastructure Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      action:
        description: 'Terraform action'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  AWS_REGION: us-east-1
  TF_VERSION: 1.5.0

jobs:
  terraform:
    name: Terraform ${{ github.event.inputs.action }} - ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        working-directory: ./devops/terraform/aws
        run: |
          terraform init \
            -backend-config="bucket=omnicare-terraform-state" \
            -backend-config="key=${{ github.event.inputs.environment }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=omnicare-terraform-lock"

      - name: Terraform Workspace
        working-directory: ./devops/terraform/aws
        run: |
          terraform workspace select ${{ github.event.inputs.environment }} || terraform workspace new ${{ github.event.inputs.environment }}

      - name: Terraform Plan
        if: github.event.inputs.action == 'plan'
        working-directory: ./devops/terraform/aws
        run: |
          terraform plan \
            -var="environment=${{ github.event.inputs.environment }}" \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -out=tfplan

      - name: Upload Terraform Plan
        if: github.event.inputs.action == 'plan'
        uses: actions/upload-artifact@v3
        with:
          name: tfplan-${{ github.event.inputs.environment }}
          path: ./devops/terraform/aws/tfplan

      - name: Terraform Apply
        if: github.event.inputs.action == 'apply'
        working-directory: ./devops/terraform/aws
        run: |
          terraform apply \
            -var="environment=${{ github.event.inputs.environment }}" \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -auto-approve

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy' && github.event.inputs.environment != 'production'
        working-directory: ./devops/terraform/aws
        run: |
          terraform destroy \
            -var="environment=${{ github.event.inputs.environment }}" \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -auto-approve

      - name: Save Terraform Outputs
        if: github.event.inputs.action == 'apply'
        working-directory: ./devops/terraform/aws
        run: |
          terraform output -json > terraform-outputs.json
          
      - name: Upload Terraform Outputs
        if: github.event.inputs.action == 'apply'
        uses: actions/upload-artifact@v3
        with:
          name: terraform-outputs-${{ github.event.inputs.environment }}
          path: ./devops/terraform/aws/terraform-outputs.json

      - name: Configure kubectl
        if: github.event.inputs.action == 'apply'
        run: |
          aws eks update-kubeconfig --name omnicare-${{ github.event.inputs.environment }} --region ${{ env.AWS_REGION }}

      - name: Install AWS Load Balancer Controller
        if: github.event.inputs.action == 'apply'
        run: |
          helm repo add eks https://aws.github.io/eks-charts
          helm repo update
          helm upgrade --install aws-load-balancer-controller eks/aws-load-balancer-controller \
            -n kube-system \
            --set clusterName=omnicare-${{ github.event.inputs.environment }} \
            --set serviceAccount.create=false \
            --set serviceAccount.name=aws-load-balancer-controller

      - name: Install EBS CSI Driver
        if: github.event.inputs.action == 'apply'
        run: |
          kubectl apply -k "github.com/kubernetes-sigs/aws-ebs-csi-driver/deploy/kubernetes/overlays/stable/?ref=release-1.20"

      - name: Install Cluster Autoscaler
        if: github.event.inputs.action == 'apply'
        run: |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/autoscaler/master/cluster-autoscaler/cloudprovider/aws/examples/cluster-autoscaler-autodiscover.yaml
          kubectl -n kube-system annotate deployment.apps/cluster-autoscaler cluster-autoscaler.kubernetes.io/safe-to-evict="false"
          kubectl -n kube-system set image deployment.apps/cluster-autoscaler cluster-autoscaler=registry.k8s.io/autoscaling/cluster-autoscaler:v1.28.0
          kubectl -n kube-system edit deployment.apps/cluster-autoscaler

      - name: Install NGINX Ingress Controller
        if: github.event.inputs.action == 'apply'
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update
          helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
            --namespace ingress-nginx \
            --create-namespace \
            --set controller.service.type=LoadBalancer \
            --set controller.metrics.enabled=true \
            --set controller.metrics.serviceMonitor.enabled=true

      - name: Install cert-manager
        if: github.event.inputs.action == 'apply'
        run: |
          kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.12.0/cert-manager.yaml
          kubectl wait --for=condition=available --timeout=300s deployment/cert-manager -n cert-manager
          kubectl wait --for=condition=available --timeout=300s deployment/cert-manager-webhook -n cert-manager
          kubectl wait --for=condition=available --timeout=300s deployment/cert-manager-cainjector -n cert-manager

      - name: Create ClusterIssuer for Let's Encrypt
        if: github.event.inputs.action == 'apply'
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: cert-manager.io/v1
          kind: ClusterIssuer
          metadata:
            name: letsencrypt-prod
          spec:
            acme:
              server: https://acme-v02.api.letsencrypt.org/directory
              email: devops@omnicare.example.com
              privateKeySecretRef:
                name: letsencrypt-prod
              solvers:
              - http01:
                  ingress:
                    class: nginx
          EOF

      - name: Notify Infrastructure Deployment
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Infrastructure ${{ github.event.inputs.action }} for ${{ github.event.inputs.environment }} - ${{ job.status }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}