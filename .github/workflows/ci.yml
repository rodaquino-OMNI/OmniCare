name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18.x'
  POSTGRES_VERSION: '15'
  REDIS_VERSION: '7'
  # Cache control
  CACHE_VERSION: v2
  NPM_CONFIG_CACHE: ${{ github.workspace }}/.npm
  # Security scanning
  ENABLE_SECURITY_SCAN: true
  # Performance
  CI: true
  NODE_ENV: test
  # Build optimization
  NODE_OPTIONS: '--max-old-space-size=4096'
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

jobs:
  # Quick checks that run first to fail fast
  quick-checks:
    name: Quick Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Check commit message format
        if: github.event_name == 'pull_request'
        run: |
          # Check commit messages follow conventional commits
          npm install -g @commitlint/cli @commitlint/config-conventional
          echo "module.exports = {extends: ['@commitlint/config-conventional']}" > commitlint.config.js
          git log --format=%B ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | commitlint || true

      - name: Check for sensitive data
        run: |
          # Check for accidentally committed secrets
          if ! command -v gitleaks &> /dev/null; then
            echo "Installing gitleaks..."
            curl -sSfL https://github.com/gitleaks/gitleaks/releases/download/v8.18.0/gitleaks_8.18.0_linux_x64.tar.gz | tar -xz
            sudo mv gitleaks /usr/local/bin/
          fi
          gitleaks detect --verbose --redact || true

  # Security scanning
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: quick-checks
    permissions:
      security-events: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache dependencies and build artifacts
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            backend/node_modules
            frontend/node_modules
            backend/dist
            frontend/.next
            ~/.npm
            .eslintcache
            tsconfig.tsbuildinfo
            backend/tsconfig.tsbuildinfo
            frontend/tsconfig.tsbuildinfo
          key: ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.ts', '**/*.tsx', '**/*.js', '**/*.jsx') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-${{ hashFiles('**/package-lock.json') }}-
            ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-

      - name: Install dependencies with parallel processing
        run: |
          npm ci --include=dev --prefer-offline --no-audit
          cd backend && npm ci --include=dev --prefer-offline --no-audit &
          cd frontend && npm ci --include=dev --prefer-offline --no-audit &
          wait

      - name: Run npm audit
        run: |
          echo "=== Root package audit ==="
          npm audit --audit-level=moderate || true
          echo "=== Backend package audit ==="
          cd backend && npm audit --audit-level=moderate || true
          echo "=== Frontend package audit ==="
          cd ../frontend && npm audit --audit-level=moderate || true

      - name: Run Snyk Security Scan
        if: env.SNYK_TOKEN != ''
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --all-projects --severity-threshold=medium

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, typescript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Parallel linting and type checking
  code-quality:
    name: Code Quality (${{ matrix.workspace }})
    runs-on: ubuntu-latest
    needs: quick-checks
    strategy:
      matrix:
        workspace: [backend, frontend]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.workspace }}/package-lock.json

      - name: Cache dependencies and artifacts
        uses: actions/cache@v4
        with:
          path: |
            ${{ matrix.workspace }}/node_modules
            ${{ matrix.workspace }}/dist
            ${{ matrix.workspace }}/.next
            ~/.npm
            .eslintcache
            ${{ matrix.workspace }}/tsconfig.tsbuildinfo
          key: ${{ runner.os }}-${{ matrix.workspace }}-deps-${{ env.CACHE_VERSION }}-${{ hashFiles(format('{0}/package-lock.json', matrix.workspace)) }}-${{ hashFiles(format('{0}/**/*.ts', matrix.workspace), format('{0}/**/*.tsx', matrix.workspace)) }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.workspace }}-deps-${{ env.CACHE_VERSION }}-${{ hashFiles(format('{0}/package-lock.json', matrix.workspace)) }}-
            ${{ runner.os }}-${{ matrix.workspace }}-deps-${{ env.CACHE_VERSION }}-

      - name: Install dependencies with optimizations
        working-directory: ./${{ matrix.workspace }}
        run: npm ci --include=dev --prefer-offline --no-audit --no-fund

      - name: Run linting
        working-directory: ./${{ matrix.workspace }}
        run: npm run lint

      - name: Run type checking
        working-directory: ./${{ matrix.workspace }}
        run: npm run typecheck

      - name: Check for circular dependencies
        working-directory: ./${{ matrix.workspace }}
        run: npx madge --circular --extensions ts,tsx src/ || true

  # Backend Tests with parallel execution
  backend-test:
    name: Backend Tests (${{ matrix.test-suite }})
    runs-on: ubuntu-latest
    needs: [code-quality, security]
    strategy:
      matrix:
        test-suite: [unit, integration]
      fail-fast: false
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: omnicare_test
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: omnicare_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:${{ env.REDIS_VERSION }}
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          backend/node_modules
          ~/.npm
        key: ${{ runner.os }}-backend-deps-${{ env.CACHE_VERSION }}-${{ hashFiles('backend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-backend-deps-${{ env.CACHE_VERSION }}-
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci --include=dev
    
    - name: Create .env.test file
      working-directory: ./backend
      run: |
        echo "NODE_ENV=test" > .env.test
        echo "DATABASE_URL=postgresql://omnicare_test:test_password@localhost:5432/omnicare_test" >> .env.test
        echo "REDIS_URL=redis://localhost:6379" >> .env.test
        echo "JWT_SECRET=test-secret-key-for-ci" >> .env.test
        echo "SESSION_SECRET=test-session-secret" >> .env.test
        echo "MEDPLUM_URL=https://api.medplum.com" >> .env.test
        echo "MEDPLUM_CLIENT_ID=test-client-id" >> .env.test
        echo "MEDPLUM_CLIENT_SECRET=test-client-secret" >> .env.test
        echo "SMART_LAUNCH_URL=http://localhost:8080/launch" >> .env.test
        echo "PORT=3001" >> .env.test
    
    - name: Run ${{ matrix.test-suite }} tests
      working-directory: ./backend
      run: |
        if [ "${{ matrix.test-suite }}" == "unit" ]; then
          npm run test:unit -- --ci --coverage --coverageReporters=json,lcov,text --maxWorkers=4 --cache --watchman=false
        else
          npm run test:integration -- --ci --coverage --coverageReporters=json,lcov,text --maxWorkers=2 --cache --watchman=false
        fi
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://omnicare_test:test_password@localhost:5432/omnicare_test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-secret-key-for-ci
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        files: ./backend/coverage/lcov.info
        flags: backend-${{ matrix.test-suite }}
        name: backend-${{ matrix.test-suite }}
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: true
    
    - name: Check coverage threshold
      if: matrix.test-suite == 'unit'
      run: |
        COVERAGE=$(cat ./backend/coverage/coverage-summary.json | jq '.total.lines.pct')
        echo "Coverage: $COVERAGE%"
        if (( $(echo "$COVERAGE < 80" | bc -l) )); then
          echo "::error::Coverage is below 80% threshold"
          exit 1
        fi
    
  # Frontend Tests with parallel execution
  frontend-test:
    name: Frontend Tests (${{ matrix.test-suite }})
    runs-on: ubuntu-latest
    needs: [code-quality, security]
    strategy:
      matrix:
        test-suite: [unit, e2e]
      fail-fast: false
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          frontend/node_modules
          ~/.npm
          ~/.cache
        key: ${{ runner.os }}-frontend-deps-${{ env.CACHE_VERSION }}-${{ hashFiles('frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-frontend-deps-${{ env.CACHE_VERSION }}-
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci --include=dev

    - name: Install Playwright browsers
      if: matrix.test-suite == 'e2e'
      working-directory: ./frontend
      run: npx playwright install --with-deps chromium
    
    - name: Run ${{ matrix.test-suite }} tests
      working-directory: ./frontend
      run: |
        if [ "${{ matrix.test-suite }}" == "unit" ]; then
          npm run test:unit -- --ci --coverage --coverageReporters=json,lcov,text --maxWorkers=4 --cache --watchman=false
        else
          npm run test:e2e || true
        fi
      env:
        NODE_ENV: test
        NEXT_PUBLIC_MEDPLUM_BASE_URL: http://localhost:8103

    - name: Upload test results
      if: always() && matrix.test-suite == 'e2e'
      uses: actions/upload-artifact@v4
      with:
        name: playwright-report
        path: frontend/playwright-report
    
    - name: Upload coverage reports
      if: matrix.test-suite == 'unit'
      uses: codecov/codecov-action@v4
      with:
        files: ./frontend/coverage/lcov.info
        flags: frontend-${{ matrix.test-suite }}
        name: frontend-${{ matrix.test-suite }}
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: true
    
    - name: Check coverage threshold
      if: matrix.test-suite == 'unit'
      run: |
        COVERAGE=$(cat ./frontend/coverage/coverage-summary.json | jq '.total.lines.pct')
        echo "Coverage: $COVERAGE%"
        if (( $(echo "$COVERAGE < 80" | bc -l) )); then
          echo "::error::Coverage is below 80% threshold"
          exit 1
        fi
    
  # Optimized build with caching
  build:
    name: Build (${{ matrix.workspace }})
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    strategy:
      matrix:
        workspace: [backend, frontend]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ${{ matrix.workspace }}/package-lock.json

    - name: Cache build artifacts
      uses: actions/cache@v4
      with:
        path: |
          ${{ matrix.workspace }}/dist
          ${{ matrix.workspace }}/.next
          ${{ matrix.workspace }}/.cache
        key: ${{ runner.os }}-${{ matrix.workspace }}-build-${{ env.CACHE_VERSION }}-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.workspace }}-build-${{ env.CACHE_VERSION }}-
    
    - name: Install dependencies
      working-directory: ./${{ matrix.workspace }}
      run: npm ci --include=dev
    
    - name: Build ${{ matrix.workspace }} with optimizations
      working-directory: ./${{ matrix.workspace }}
      run: |
        if [ "${{ matrix.workspace }}" == "frontend" ]; then
          npm run build:production
        else
          npm run build:production
        fi
      env:
        NEXT_PUBLIC_MEDPLUM_URL: https://api.medplum.com
        NEXT_PUBLIC_API_URL: http://localhost:3001
        NODE_OPTIONS: '--max-old-space-size=4096'
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.workspace }}-build
        path: |
          ${{ matrix.workspace }}/dist
          ${{ matrix.workspace }}/.next

  # SAST scanning
  sast:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    needs: build
    permissions:
      security-events: write
    steps:
      - uses: actions/checkout@v4

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/javascript
            p/typescript
            p/react
            p/nodejs

  # Deployment preview for PRs
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [build, sast]
    permissions:
      pull-requests: write
      deployments: write
    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Deploy to Preview Environment
        id: deploy
        run: |
          echo "Deploying preview for PR #${{ github.event.pull_request.number }}"
          # TODO: Add actual deployment logic here (e.g., Vercel, Netlify, etc.)
          echo "preview_url=https://pr-${{ github.event.pull_request.number }}.omnicare-preview.com" >> $GITHUB_OUTPUT

      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            const preview_url = '${{ steps.deploy.outputs.preview_url }}';
            const body = `### 🚀 Deployment Preview Ready!\n\nPreview URL: ${preview_url}\n\n#### Build Summary:\n- ✅ Backend build successful\n- ✅ Frontend build successful\n- ✅ All tests passed\n- ✅ Security scans completed`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  # Quality gates check
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, build, sast]
    steps:
      - uses: actions/checkout@v4
      
      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          path: coverage-reports
      
      - name: Check quality gates
        run: |
          echo "=== Quality Gates Check ==="
          
          # Check test results
          if [[ "${{ needs.backend-test.result }}" != "success" || "${{ needs.frontend-test.result }}" != "success" ]]; then
            echo "::error::Tests failed"
            exit 1
          fi
          
          # Check security scans
          if [[ "${{ needs.sast.result }}" != "success" ]]; then
            echo "::error::Security scans failed"
            exit 1
          fi
          
          echo "✅ All quality gates passed!"
  
  # Final status check
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, build, sast, quality-gates]
    if: always()
    steps:
      - name: Check all job statuses
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "One or more jobs failed"
            exit 1
          fi
          echo "All CI checks passed successfully!"
      
      - name: Create deployment gate approval
        if: github.ref == 'refs/heads/main'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: deployment } = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              auto_merge: false,
              required_contexts: ['ci-success', 'quality-gates'],
              description: 'Deployment ready for production'
            });
            
            console.log(`Deployment created: ${deployment.id}`);