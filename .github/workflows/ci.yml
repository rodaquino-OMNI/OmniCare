# Continuous Integration Workflow for OmniCare EMR
name: CI

on:
  push:
    branches: [ main, develop, 'feature/*', 'hotfix/*' ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Static Analysis and Linting
  lint:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [backend, frontend, mobile]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: '${{ matrix.service }}/package-lock.json'
        
    - name: Install dependencies
      working-directory: ${{ matrix.service }}
      run: npm ci
      
    - name: Run ESLint
      working-directory: ${{ matrix.service }}
      run: npm run lint
      
    - name: Run TypeScript type check
      working-directory: ${{ matrix.service }}
      run: npm run typecheck
      
    - name: Check code formatting (Prettier)
      working-directory: ${{ matrix.service }}
      run: |
        if [ -f "package.json" ] && npm list prettier --depth=0 &>/dev/null; then
          npx prettier --check "src/**/*.{ts,tsx,js,jsx}"
        fi

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --all-projects --severity-threshold=medium
        
    - name: OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'OmniCare EMR'
        path: '.'
        format: 'HTML'
        
    - name: Upload OWASP results
      uses: actions/upload-artifact@v4
      with:
        name: dependency-check-report
        path: reports/

  # Unit Tests
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'backend/package-lock.json'
        
    - name: Install dependencies
      working-directory: backend
      run: npm ci
      
    - name: Run database migrations
      working-directory: backend
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        NODE_ENV: test
      run: |
        # Add migration command here when available
        echo "Database migrations would run here"
        
    - name: Run unit tests
      working-directory: backend
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
        NODE_ENV: test
        JWT_SECRET: test_jwt_secret
      run: npm run test:coverage
      
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: backend/coverage/lcov.info
        flags: backend
        name: backend-coverage
        token: ${{ secrets.CODECOV_TOKEN }}

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'
        
    - name: Install dependencies
      working-directory: frontend
      run: npm ci
      
    - name: Run unit tests
      working-directory: frontend
      env:
        NODE_ENV: test
        NEXT_PUBLIC_API_URL: http://localhost:3001
      run: npm run test:coverage
      
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        token: ${{ secrets.CODECOV_TOKEN }}

  # End-to-End Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install backend dependencies
      working-directory: backend
      run: npm ci
      
    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci
      
    - name: Start backend server
      working-directory: backend
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
        NODE_ENV: test
        JWT_SECRET: test_jwt_secret
        PORT: 3001
      run: |
        npm run build
        npm start &
        sleep 30
        
    - name: Start frontend server
      working-directory: frontend
      env:
        NODE_ENV: test
        NEXT_PUBLIC_API_URL: http://localhost:3001
        PORT: 3000
      run: |
        npm run build
        npm start &
        sleep 30
        
    - name: Install Playwright
      working-directory: frontend
      run: npx playwright install --with-deps
      
    - name: Run E2E tests
      working-directory: frontend
      run: npm run test:e2e
      
    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: frontend/playwright-report/
        retention-days: 30

  # Build Docker Images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [lint, security, test-backend, test-frontend]
    if: github.event_name == 'push'
    
    strategy:
      matrix:
        service: [backend, frontend, database]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: devops/docker/${{ matrix.service }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, e2e-tests]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}
        
    - name: Deploy to staging
      run: |
        # Update image tags in Kubernetes manifests
        sed -i "s|image: omnicare/backend:latest|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}|g" devops/kubernetes/backend.yaml
        sed -i "s|image: omnicare/frontend:latest|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}|g" devops/kubernetes/frontend.yaml
        sed -i "s|image: omnicare/database:latest|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-database:${{ github.sha }}|g" devops/kubernetes/database.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f devops/kubernetes/namespace.yaml
        kubectl apply -f devops/kubernetes/database.yaml
        kubectl apply -f devops/kubernetes/redis.yaml
        kubectl apply -f devops/kubernetes/backend.yaml
        kubectl apply -f devops/kubernetes/frontend.yaml
        kubectl apply -f devops/kubernetes/ingress.yaml
        
        # Wait for deployments to be ready
        kubectl rollout status deployment/backend -n omnicare --timeout=300s
        kubectl rollout status deployment/frontend -n omnicare --timeout=300s
        
    - name: Run health checks
      run: |
        # Wait for services to be available
        sleep 60
        
        # Check backend health
        kubectl exec -n omnicare deployment/backend -- curl -f http://localhost:3001/health
        
        # Check frontend health
        kubectl exec -n omnicare deployment/frontend -- curl -f http://localhost:3000/api/health
        
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow

  # Create GitHub Release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Generate changelog
      id: changelog
      uses: mikepenz/release-changelog-builder-action@v4
      with:
        configuration: ".github/changelog-config.json"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}
        name: Release v${{ github.run_number }}
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}