name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true

permissions:
  contents: write
  packages: write

jobs:
  # Create release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      release-id: ${{ steps.create-release.outputs.id }}
      version: ${{ steps.get-version.outputs.version }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get version
      id: get-version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${{ github.ref_name }}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        echo "# Release Notes for ${{ steps.get-version.outputs.version }}" > RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "## What's Changed" >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        
        if [ -n "$PREV_TAG" ]; then
          # Generate commit list since last tag
          git log $PREV_TAG..HEAD --pretty=format:"- %s (%h)" >> RELEASE_NOTES.md
        else
          # First release
          echo "Initial release of OmniCare EMR" >> RELEASE_NOTES.md
        fi
        
        echo "" >> RELEASE_NOTES.md
        echo "## Features" >> RELEASE_NOTES.md
        echo "- Patient management with FHIR compliance" >> RELEASE_NOTES.md
        echo "- Clinical documentation with offline support" >> RELEASE_NOTES.md
        echo "- HIPAA-compliant security features" >> RELEASE_NOTES.md
        echo "- Integration with Medplum FHIR server" >> RELEASE_NOTES.md
    
    - name: Create release
      id: create-release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get-version.outputs.version }}
        release_name: OmniCare EMR ${{ steps.get-version.outputs.version }}
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: ${{ contains(steps.get-version.outputs.version, 'beta') || contains(steps.get-version.outputs.version, 'rc') }}
    
  # Build release artifacts
  build-artifacts:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        include:
          - service: backend
            node-version: 18.x
          - service: frontend
            node-version: 18.x
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: ${{ matrix.service }}/package-lock.json
    
    - name: Install dependencies
      working-directory: ./${{ matrix.service }}
      run: npm ci
    
    - name: Build ${{ matrix.service }}
      working-directory: ./${{ matrix.service }}
      run: npm run build
      env:
        NODE_ENV: production
        NEXT_PUBLIC_MEDPLUM_URL: ${{ matrix.service == 'frontend' && 'https://api.medplum.com' || '' }}
        NEXT_PUBLIC_API_URL: ${{ matrix.service == 'frontend' && 'https://api.omnicare-emr.com' || '' }}
    
    - name: Create artifact archive
      run: |
        cd ${{ matrix.service }}
        if [ "${{ matrix.service }}" == "backend" ]; then
          tar -czf ../omnicare-${{ matrix.service }}-${{ needs.create-release.outputs.version }}.tar.gz \
            dist/ \
            package*.json \
            README.md
        else
          tar -czf ../omnicare-${{ matrix.service }}-${{ needs.create-release.outputs.version }}.tar.gz \
            .next/ \
            public/ \
            package*.json \
            README.md \
            next.config.ts
        fi
    
    - name: Upload release artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.release-url }}
        asset_path: ./omnicare-${{ matrix.service }}-${{ needs.create-release.outputs.version }}.tar.gz
        asset_name: omnicare-${{ matrix.service }}-${{ needs.create-release.outputs.version }}.tar.gz
        asset_content_type: application/gzip
    
  # Build and push production Docker images
  docker-release:
    name: Docker Release
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        service: [backend, frontend]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      if: ${{ secrets.DOCKER_USERNAME != '' }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ghcr.io/${{ github.repository }}-${{ matrix.service }}
          ${{ secrets.DOCKER_USERNAME && format('docker.io/{0}/omnicare-{1}', secrets.DOCKER_USERNAME, matrix.service) || '' }}
        tags: |
          type=semver,pattern={{version}},value=${{ needs.create-release.outputs.version }}
          type=semver,pattern={{major}}.{{minor}},value=${{ needs.create-release.outputs.version }}
          type=semver,pattern={{major}},value=${{ needs.create-release.outputs.version }}
          type=raw,value=latest,enable=${{ !contains(needs.create-release.outputs.version, 'beta') && !contains(needs.create-release.outputs.version, 'rc') }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.service }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=registry,ref=ghcr.io/${{ github.repository }}-${{ matrix.service }}:buildcache
        cache-to: type=registry,ref=ghcr.io/${{ github.repository }}-${{ matrix.service }}:buildcache,mode=max
    
  # Create deployment package
  deployment-package:
    name: Create Deployment Package
    runs-on: ubuntu-latest
    needs: [create-release, docker-release]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create deployment package
      run: |
        mkdir -p deployment-package/k8s
        mkdir -p deployment-package/docker
        mkdir -p deployment-package/docs
        
        # Copy Kubernetes manifests
        if [ -d "devops/k8s" ]; then
          cp -r devops/k8s/* deployment-package/k8s/
        fi
        
        # Create docker-compose for local deployment
        cat > deployment-package/docker/docker-compose.yml << EOF
        version: '3.8'
        
        services:
          postgres:
            image: postgres:15
            environment:
              POSTGRES_DB: omnicare
              POSTGRES_USER: omnicare
              POSTGRES_PASSWORD: \${POSTGRES_PASSWORD}
            volumes:
              - postgres_data:/var/lib/postgresql/data
            healthcheck:
              test: ["CMD-SHELL", "pg_isready -U omnicare"]
              interval: 10s
              timeout: 5s
              retries: 5
          
          redis:
            image: redis:7-alpine
            healthcheck:
              test: ["CMD", "redis-cli", "ping"]
              interval: 10s
              timeout: 5s
              retries: 5
          
          backend:
            image: ghcr.io/${{ github.repository }}-backend:${{ needs.create-release.outputs.version }}
            depends_on:
              postgres:
                condition: service_healthy
              redis:
                condition: service_healthy
            environment:
              NODE_ENV: production
              DATABASE_URL: postgresql://omnicare:\${POSTGRES_PASSWORD}@postgres:5432/omnicare
              REDIS_URL: redis://redis:6379
              JWT_SECRET: \${JWT_SECRET}
              MEDPLUM_URL: \${MEDPLUM_URL}
              MEDPLUM_CLIENT_ID: \${MEDPLUM_CLIENT_ID}
              MEDPLUM_CLIENT_SECRET: \${MEDPLUM_CLIENT_SECRET}
            ports:
              - "3001:3001"
          
          frontend:
            image: ghcr.io/${{ github.repository }}-frontend:${{ needs.create-release.outputs.version }}
            depends_on:
              - backend
            environment:
              NEXT_PUBLIC_API_URL: http://backend:3001
              NEXT_PUBLIC_MEDPLUM_URL: \${MEDPLUM_URL}
            ports:
              - "3000:3000"
        
        volumes:
          postgres_data:
        EOF
        
        # Create deployment guide
        cat > deployment-package/docs/DEPLOYMENT_GUIDE.md << EOF
        # OmniCare EMR Deployment Guide
        
        Version: ${{ needs.create-release.outputs.version }}
        
        ## Docker Deployment
        
        1. Copy the \`.env.example\` file to \`.env\` and configure all required values
        2. Run: \`docker-compose up -d\`
        3. Access the application at http://localhost:3000
        
        ## Kubernetes Deployment
        
        1. Update the image tags in the Kubernetes manifests
        2. Apply the manifests: \`kubectl apply -k k8s/overlays/production\`
        
        ## Required Environment Variables
        
        - DATABASE_URL: PostgreSQL connection string
        - JWT_SECRET: Secret for JWT signing (min 32 characters)
        - MEDPLUM_URL: Medplum FHIR server URL
        - MEDPLUM_CLIENT_ID: Medplum OAuth client ID
        - MEDPLUM_CLIENT_SECRET: Medplum OAuth client secret
        
        ## Post-Deployment Steps
        
        1. Run database migrations
        2. Configure admin user
        3. Set up backup schedules
        4. Configure monitoring alerts
        EOF
        
        # Create archive
        tar -czf omnicare-deployment-${{ needs.create-release.outputs.version }}.tar.gz deployment-package/
    
    - name: Upload deployment package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.release-url }}
        asset_path: ./omnicare-deployment-${{ needs.create-release.outputs.version }}.tar.gz
        asset_name: omnicare-deployment-${{ needs.create-release.outputs.version }}.tar.gz
        asset_content_type: application/gzip
    
  # Update release notes
  finalize-release:
    name: Finalize Release
    runs-on: ubuntu-latest
    needs: [create-release, build-artifacts, docker-release, deployment-package]
    
    steps:
    - name: Update release description
      run: |
        echo "✅ Release ${{ needs.create-release.outputs.version }} completed successfully!"
        echo ""
        echo "## Available Assets:"
        echo "- Backend build artifact"
        echo "- Frontend build artifact"
        echo "- Deployment package with Docker Compose and Kubernetes manifests"
        echo ""
        echo "## Docker Images:"
        echo "- ghcr.io/${{ github.repository }}-backend:${{ needs.create-release.outputs.version }}"
        echo "- ghcr.io/${{ github.repository }}-frontend:${{ needs.create-release.outputs.version }}"