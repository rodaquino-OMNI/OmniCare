{
  "analysis_timestamp": "2025-06-21T18:27:00Z",
  "swarm_id": "swarm-auto-centralized-1750474023872",
  "analyzer": "test-analyzer",
  "project": "OmniCare EMR",
  "test_suite_analysis": {
    "available_test_commands": {
      "root_level": {
        "test": "jest",
        "test:watch": "jest --watch",
        "test:coverage": "jest --coverage"
      },
      "frontend": {
        "test": "jest",
        "test:watch": "jest --watch",
        "test:coverage": "jest --coverage",
        "test:e2e": "playwright test",
        "test:e2e:ui": "playwright test --ui"
      },
      "backend": {
        "test": "jest",
        "test:watch": "jest --watch",
        "test:coverage": "jest --coverage",
        "test:unit": "jest --testPathPattern=unit",
        "test:integration": "jest --testPathPattern=integration",
        "test:e2e": "jest --testPathPattern=e2e"
      }
    },
    "test_frameworks": {
      "unit_testing": {
        "framework": "Jest v29.7.0",
        "test_environment": {
          "frontend": "jsdom",
          "backend": "node"
        },
        "test_runner": "ts-jest",
        "testing_library": "@testing-library/react v14.1.2"
      },
      "e2e_testing": {
        "framework": "Playwright v1.40.1",
        "browsers": ["chromium", "firefox", "webkit", "mobile-chrome", "mobile-safari", "edge", "chrome"],
        "test_environment": "browser automation"
      },
      "accessibility_testing": {
        "framework": "jest-axe v8.0.0",
        "integration": "built into jest setup"
      }
    },
    "configuration_files": {
      "root_jest_config": "/Users/rodrigo/claude-projects/OmniCare/jest.config.js",
      "frontend_jest_config": "/Users/rodrigo/claude-projects/OmniCare/frontend/jest.config.js",
      "backend_jest_config": "/Users/rodrigo/claude-projects/OmniCare/backend/jest.config.js",
      "playwright_config": "/Users/rodrigo/claude-projects/OmniCare/frontend/playwright.config.ts",
      "jest_setup": "/Users/rodrigo/claude-projects/OmniCare/frontend/jest.setup.js"
    },
    "test_directory_structure": {
      "frontend": {
        "unit_tests": "frontend/src/**/__tests__/**/*.test.{ts,tsx}",
        "e2e_tests": "frontend/tests/e2e/*.spec.ts",
        "test_utilities": "frontend/test-utils/",
        "mocks": "frontend/__mocks__/"
      },
      "backend": {
        "unit_tests": "backend/tests/unit/**/*.test.ts",
        "integration_tests": "backend/tests/integration/**/*.test.ts",
        "security_tests": "backend/tests/security/**/*.test.ts",
        "test_setup": "backend/tests/setup.ts"
      }
    },
    "test_statistics": {
      "total_test_files": 15,
      "unit_test_files": 7,
      "integration_test_files": 1,
      "e2e_test_files": 2,
      "security_test_files": 1,
      "setup_files": 4
    },
    "test_coverage": {
      "frontend": {
        "threshold": {
          "branches": 75,
          "functions": 75,
          "lines": 75,
          "statements": 75
        },
        "collect_from": ["src/**/*.{js,jsx,ts,tsx}"],
        "exclude": ["**/*.d.ts", "**/*.stories.*", "**/index.*", "**/*.types.*"]
      },
      "backend": {
        "threshold": {
          "branches": 80,
          "functions": 80,
          "lines": 80,
          "statements": 80
        },
        "collect_from": ["src/**/*.{ts,tsx}"],
        "exclude": ["**/*.d.ts", "**/index.ts", "**/*.types.ts"]
      }
    },
    "testing_utilities": {
      "frontend": {
        "test_providers": "TestProviders component with MantineProvider",
        "mock_data": "FHIR mock data (Patient, Practitioner, Encounter)",
        "custom_render": "renderWithProviders function",
        "mocks": {
          "next_router": "mocked with jest",
          "next_navigation": "mocked with jest",
          "mantine_components": "custom mocks in __mocks__",
          "web_apis": "localStorage, sessionStorage, fetch, IntersectionObserver, ResizeObserver"
        }
      },
      "backend": {
        "mock_framework": "jest.mock()",
        "test_containers": "testcontainers v10.4.0",
        "supertest": "v6.3.3 for HTTP testing",
        "nock": "v13.4.0 for HTTP mocking"
      }
    },
    "test_patterns": {
      "unit_tests": {
        "pattern": "**/*.(test|spec).(ts|tsx|js)",
        "location": "co-located with source files in __tests__ folders",
        "structure": "describe/it blocks with comprehensive test scenarios"
      },
      "integration_tests": {
        "pattern": "**/*.integration.test.ts",
        "location": "separate integration directory"
      },
      "e2e_tests": {
        "pattern": "**/*.spec.ts",
        "location": "frontend/tests/e2e/",
        "structure": "Playwright test format"
      }
    },
    "mock_strategy": {
      "frontend": {
        "component_mocks": "Mantine components mocked in __mocks__",
        "api_mocks": "fetch and HTTP requests mocked",
        "router_mocks": "Next.js router and navigation mocked",
        "browser_apis": "comprehensive web API mocking"
      },
      "backend": {
        "external_services": "Medplum client mocked",
        "database": "likely using test containers",
        "http_clients": "nock for external HTTP calls"
      }
    },
    "special_features": {
      "accessibility_testing": "jest-axe integration for a11y testing",
      "visual_regression": "Playwright screenshots on failure",
      "parallel_execution": "Jest and Playwright support parallel execution",
      "cross_browser_testing": "Playwright tests across multiple browsers",
      "mobile_testing": "Playwright mobile viewport testing",
      "test_reporting": "HTML, JSON, and JUnit reports for Playwright"
    },
    "project_architecture": {
      "monorepo_structure": "Root Jest config orchestrates frontend and backend",
      "shared_utilities": "Common test utilities and mock data",
      "modular_testing": "Separate test configurations for different concerns",
      "fhir_testing": "Specialized FHIR resource testing patterns"
    }
  },
  "recommendations": {
    "strengths": [
      "Comprehensive test coverage requirements (75-80%)",
      "Multi-browser E2E testing with Playwright",
      "Accessibility testing integration",
      "Proper mocking strategies for complex dependencies",
      "Separated unit, integration, and E2E test concerns",
      "FHIR-specific testing utilities"
    ],
    "opportunities": [
      "Consider adding visual regression testing",
      "Implement API contract testing",
      "Add performance testing scenarios",
      "Consider snapshot testing for UI components",
      "Add mutation testing for test quality assessment"
    ]
  }
}
EOF < /dev/null