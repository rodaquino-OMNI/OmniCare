{"file":"/Users/rodrigo/claude-projects/OmniCare/backend/tests/unit/models/patient.model.test.ts","mappings":"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","names":[],"sources":["/Users/rodrigo/claude-projects/OmniCare/backend/tests/unit/models/patient.model.test.ts"],"sourcesContent":["import {\n  OmniCarePatient,\n  PatientEmergencyContact,\n  InsuranceInformation,\n  PatientAlert,\n  PatientDemographics,\n  PatientSocialHistory,\n  AccessibilityNeeds,\n  validateOmniCarePatient,\n  validateEmergencyContact,\n  validateInsurance,\n  validatePatientAlert,\n  formatPatientName,\n  calculateAge,\n  getActiveInsurance,\n  hasActiveAlerts\n} from '../../../src/models/patient.model';\n\ndescribe('Patient Model', () => {\n  describe('OmniCarePatient Validation', () => {\n    describe('validateOmniCarePatient', () => {\n      it('should validate complete patient record', () => {\n        const validPatient: OmniCarePatient = {\n          resourceType: 'Patient',\n          id: 'patient-123',\n          active: true,\n          identifier: [\n            {\n              use: 'usual',\n              type: {\n                coding: [{\n                  system: 'http://terminology.hl7.org/CodeSystem/v2-0203',\n                  code: 'MR',\n                  display: 'Medical Record Number'\n                }]\n              },\n              system: 'http://omnicare.com/patient-id',\n              value: 'MRN123456'\n            }\n          ],\n          name: [{ given: ['John'], family: 'Doe' }],\n          telecom: [\n            { system: 'phone', value: '555-0123', use: 'home' },\n            { system: 'email', value: 'john.doe@example.com', use: 'home' }\n          ],\n          gender: 'male',\n          birthDate: '1990-01-01',\n          address: [{\n            use: 'home',\n            line: ['123 Main St'],\n            city: 'Anytown',\n            state: 'ST',\n            postalCode: '12345'\n          }],\n          maritalStatus: {\n            coding: [{\n              system: 'http://terminology.hl7.org/CodeSystem/v3-MaritalStatus',\n              code: 'M',\n              display: 'Married'\n            }]\n          },\n          communication: [{\n            language: {\n              coding: [{\n                system: 'urn:ietf:bcp:47',\n                code: 'en',\n                display: 'English'\n              }]\n            },\n            preferred: true\n          }],\n          omnicarePatientId: 'P12345678',\n          registrationDate: '2023-01-01T00:00:00Z',\n          preferredLanguage: 'en',\n          emergencyContact: [{\n            id: 'contact-1',\n            relationship: 'spouse',\n            name: { given: ['Jane'], family: 'Doe' },\n            telecom: [{ system: 'phone', value: '555-0456', use: 'mobile' }],\n            priority: 1,\n            active: true\n          }],\n          insurance: [{\n            id: 'ins-1',\n            subscriberId: 'SUB123456',\n            payorName: 'Blue Cross Blue Shield',\n            planName: 'PPO Plan',\n            relationshipToSubscriber: 'self',\n            effectiveDate: '2023-01-01',\n            copayAmount: 25,\n            deductibleAmount: 1500,\n            active: true,\n            priority: 1\n          }],\n          demographics: {\n            race: [{\n              coding: [{\n                system: 'urn:oid:2.16.840.1.113883.6.238',\n                code: '2106-3',\n                display: 'White'\n              }]\n            }],\n            ethnicity: [{\n              coding: [{\n                system: 'urn:oid:2.16.840.1.113883.6.238',\n                code: '2186-5',\n                display: 'Not Hispanic or Latino'\n              }]\n            }],\n            occupation: 'Software Engineer',\n            educationLevel: {\n              coding: [{\n                system: 'http://terminology.hl7.org/CodeSystem/v3-EducationLevel',\n                code: '1081',\n                display: 'College graduate'\n              }]\n            }\n          }\n        };\n\n        const result = validateOmniCarePatient(validPatient);\n        expect(result.valid).toBe(true);\n        expect(result.errors).toHaveLength(0);\n      });\n\n      it('should validate minimal patient record', () => {\n        const minimalPatient: OmniCarePatient = {\n          resourceType: 'Patient',\n          name: [{ family: 'Doe' }],\n          omnicarePatientId: 'P12345678'\n        };\n\n        const result = validateOmniCarePatient(minimalPatient);\n        expect(result.valid).toBe(true);\n      });\n\n      it('should reject patient without resource type', () => {\n        const invalidPatient = {\n          name: [{ family: 'Doe' }],\n          omnicarePatientId: 'P12345678'\n        } as any;\n\n        const result = validateOmniCarePatient(invalidPatient);\n        expect(result.valid).toBe(false);\n        expect(result.errors).toContain('resourceType must be \"Patient\"');\n      });\n\n      it('should reject patient without OmniCare patient ID', () => {\n        const invalidPatient: Partial<OmniCarePatient> = {\n          resourceType: 'Patient',\n          name: [{ family: 'Doe' }]\n          // Missing omnicarePatientId\n        };\n\n        const result = validateOmniCarePatient(invalidPatient as OmniCarePatient);\n        expect(result.valid).toBe(false);\n        expect(result.errors).toContain('omnicarePatientId is required');\n      });\n\n      it('should reject patient with invalid birth date', () => {\n        const invalidPatient: OmniCarePatient = {\n          resourceType: 'Patient',\n          name: [{ family: 'Doe' }],\n          birthDate: '2030-01-01', // Future date\n          omnicarePatientId: 'P12345678'\n        };\n\n        const result = validateOmniCarePatient(invalidPatient);\n        expect(result.valid).toBe(false);\n        expect(result.errors).toContain('Birth date cannot be in the future');\n      });\n\n      it('should reject patient with invalid OmniCare ID format', () => {\n        const invalidPatient: OmniCarePatient = {\n          resourceType: 'Patient',\n          name: [{ family: 'Doe' }],\n          omnicarePatientId: 'INVALID_FORMAT'\n        };\n\n        const result = validateOmniCarePatient(invalidPatient);\n        expect(result.valid).toBe(false);\n        expect(result.errors).toContain('omnicarePatientId must follow format P followed by 8 digits');\n      });\n\n      it('should validate patient age constraints', () => {\n        const teenPatient: OmniCarePatient = {\n          resourceType: 'Patient',\n          name: [{ family: 'Teen' }],\n          birthDate: '2010-01-01',\n          omnicarePatientId: 'P12345679'\n        };\n\n        const result = validateOmniCarePatient(teenPatient);\n        expect(result.valid).toBe(true);\n      });\n    });\n\n    describe('Patient Business Rules', () => {\n      it('should enforce minimum age for certain operations', () => {\n        const childPatient: OmniCarePatient = {\n          resourceType: 'Patient',\n          name: [{ family: 'Child' }],\n          birthDate: '2020-01-01',\n          omnicarePatientId: 'P12345680'\n        };\n\n        const age = calculateAge(childPatient.birthDate!);\n        expect(age).toBeLessThan(18);\n\n        // Child patients require guardian consent for certain operations\n        const result = validateOmniCarePatient(childPatient);\n        expect(result.valid).toBe(true);\n        if (age < 18) {\n          expect(result.warnings).toContain('Minor patient may require guardian consent for certain operations');\n        }\n      });\n\n      it('should validate required fields for pediatric patients', () => {\n        const pediatricPatient: OmniCarePatient = {\n          resourceType: 'Patient',\n          name: [{ family: 'Child' }],\n          birthDate: '2020-01-01',\n          omnicarePatientId: 'P12345680'\n          // Missing emergency contact for minor\n        };\n\n        const result = validateOmniCarePatient(pediatricPatient);\n        expect(result.warnings).toContain('Emergency contact recommended for pediatric patients');\n      });\n\n      it('should validate insurance requirements for adults', () => {\n        const adultPatient: OmniCarePatient = {\n          resourceType: 'Patient',\n          name: [{ family: 'Adult' }],\n          birthDate: '1980-01-01',\n          omnicarePatientId: 'P12345681'\n          // Missing insurance information\n        };\n\n        const result = validateOmniCarePatient(adultPatient);\n        expect(result.warnings).toContain('Insurance information recommended for adult patients');\n      });\n    });\n  });\n\n  describe('Emergency Contact Validation', () => {\n    describe('validateEmergencyContact', () => {\n      it('should validate complete emergency contact', () => {\n        const validContact: PatientEmergencyContact = {\n          id: 'contact-1',\n          relationship: 'spouse',\n          name: { given: ['Jane'], family: 'Doe' },\n          telecom: [\n            { system: 'phone', value: '555-0456', use: 'mobile' },\n            { system: 'email', value: 'jane.doe@example.com', use: 'home' }\n          ],\n          address: [{\n            use: 'home',\n            line: ['123 Main St'],\n            city: 'Anytown',\n            state: 'ST',\n            postalCode: '12345'\n          }],\n          priority: 1,\n          active: true,\n          notes: 'Primary emergency contact'\n        };\n\n        const result = validateEmergencyContact(validContact);\n        expect(result.valid).toBe(true);\n      });\n\n      it('should validate minimal emergency contact', () => {\n        const minimalContact: PatientEmergencyContact = {\n          id: 'contact-1',\n          relationship: 'friend',\n          name: { family: 'Smith' },\n          telecom: [{ system: 'phone', value: '555-0789' }],\n          priority: 1,\n          active: true\n        };\n\n        const result = validateEmergencyContact(minimalContact);\n        expect(result.valid).toBe(true);\n      });\n\n      it('should reject contact without required fields', () => {\n        const invalidContact: Partial<PatientEmergencyContact> = {\n          id: 'contact-1',\n          relationship: 'spouse'\n          // Missing name and telecom\n        };\n\n        const result = validateEmergencyContact(invalidContact as PatientEmergencyContact);\n        expect(result.valid).toBe(false);\n        expect(result.errors).toContain('Emergency contact name is required');\n        expect(result.errors).toContain('Emergency contact must have at least one phone number');\n      });\n\n      it('should validate relationship types', () => {\n        const validRelationships = ['spouse', 'parent', 'child', 'sibling', 'friend', 'guardian', 'other'];\n        \n        validRelationships.forEach(relationship => {\n          const contact: PatientEmergencyContact = {\n            id: 'contact-1',\n            relationship,\n            name: { family: 'Test' },\n            telecom: [{ system: 'phone', value: '555-0123' }],\n            priority: 1,\n            active: true\n          };\n\n          const result = validateEmergencyContact(contact);\n          expect(result.valid).toBe(true);\n        });\n      });\n\n      it('should reject invalid relationship type', () => {\n        const invalidContact: PatientEmergencyContact = {\n          id: 'contact-1',\n          relationship: 'invalid-relationship' as any,\n          name: { family: 'Test' },\n          telecom: [{ system: 'phone', value: '555-0123' }],\n          priority: 1,\n          active: true\n        };\n\n        const result = validateEmergencyContact(invalidContact);\n        expect(result.valid).toBe(false);\n        expect(result.errors).toContain('Invalid relationship type');\n      });\n\n      it('should validate priority ordering', () => {\n        const highPriorityContact: PatientEmergencyContact = {\n          id: 'contact-1',\n          relationship: 'spouse',\n          name: { family: 'Primary' },\n          telecom: [{ system: 'phone', value: '555-0123' }],\n          priority: 1,\n          active: true\n        };\n\n        const lowPriorityContact: PatientEmergencyContact = {\n          id: 'contact-2',\n          relationship: 'friend',\n          name: { family: 'Secondary' },\n          telecom: [{ system: 'phone', value: '555-0456' }],\n          priority: 2,\n          active: true\n        };\n\n        expect(validateEmergencyContact(highPriorityContact).valid).toBe(true);\n        expect(validateEmergencyContact(lowPriorityContact).valid).toBe(true);\n        expect(highPriorityContact.priority).toBeLessThan(lowPriorityContact.priority);\n      });\n    });\n  });\n\n  describe('Insurance Validation', () => {\n    describe('validateInsurance', () => {\n      it('should validate complete insurance information', () => {\n        const validInsurance: InsuranceInformation = {\n          id: 'ins-1',\n          subscriberId: 'SUB123456789',\n          payorName: 'Blue Cross Blue Shield PPO',\n          planName: 'Comprehensive Health Plan',\n          relationshipToSubscriber: 'self',\n          effectiveDate: '2023-01-01',\n          expirationDate: '2024-12-31',\n          copayAmount: 25,\n          deductibleAmount: 1500,\n          active: true,\n          priority: 1,\n          groupNumber: 'GRP789012',\n          subscriberName: 'John Doe',\n          subscriberDOB: '1990-01-01'\n        };\n\n        const result = validateInsurance(validInsurance);\n        expect(result.valid).toBe(true);\n      });\n\n      it('should validate minimal insurance information', () => {\n        const minimalInsurance: InsuranceInformation = {\n          id: 'ins-1',\n          subscriberId: 'SUB123456',\n          payorName: 'Insurance Company',\n          planName: 'Basic Plan',\n          relationshipToSubscriber: 'self',\n          effectiveDate: '2023-01-01',\n          active: true,\n          priority: 1\n        };\n\n        const result = validateInsurance(minimalInsurance);\n        expect(result.valid).toBe(true);\n      });\n\n      it('should reject insurance without required fields', () => {\n        const invalidInsurance: Partial<InsuranceInformation> = {\n          id: 'ins-1',\n          payorName: 'Insurance Company'\n          // Missing subscriberId, planName, etc.\n        };\n\n        const result = validateInsurance(invalidInsurance as InsuranceInformation);\n        expect(result.valid).toBe(false);\n        expect(result.errors).toContain('Subscriber ID is required');\n        expect(result.errors).toContain('Plan name is required');\n      });\n\n      it('should validate relationship to subscriber', () => {\n        const validRelationships = ['self', 'spouse', 'child', 'parent', 'other'];\n        \n        validRelationships.forEach(relationship => {\n          const insurance: InsuranceInformation = {\n            id: 'ins-1',\n            subscriberId: 'SUB123456',\n            payorName: 'Insurance Company',\n            planName: 'Test Plan',\n            relationshipToSubscriber: relationship as any,\n            effectiveDate: '2023-01-01',\n            active: true,\n            priority: 1\n          };\n\n          const result = validateInsurance(insurance);\n          expect(result.valid).toBe(true);\n        });\n      });\n\n      it('should validate insurance date ranges', () => {\n        const expiredInsurance: InsuranceInformation = {\n          id: 'ins-1',\n          subscriberId: 'SUB123456',\n          payorName: 'Insurance Company',\n          planName: 'Expired Plan',\n          relationshipToSubscriber: 'self',\n          effectiveDate: '2020-01-01',\n          expirationDate: '2022-12-31', // Already expired\n          active: true,\n          priority: 1\n        };\n\n        const result = validateInsurance(expiredInsurance);\n        expect(result.warnings).toContain('Insurance plan appears to be expired');\n      });\n\n      it('should validate copay and deductible amounts', () => {\n        const insuranceWithNegativeAmounts: InsuranceInformation = {\n          id: 'ins-1',\n          subscriberId: 'SUB123456',\n          payorName: 'Insurance Company',\n          planName: 'Invalid Plan',\n          relationshipToSubscriber: 'self',\n          effectiveDate: '2023-01-01',\n          copayAmount: -25, // Negative copay\n          deductibleAmount: -1500, // Negative deductible\n          active: true,\n          priority: 1\n        };\n\n        const result = validateInsurance(insuranceWithNegativeAmounts);\n        expect(result.valid).toBe(false);\n        expect(result.errors).toContain('Copay amount cannot be negative');\n        expect(result.errors).toContain('Deductible amount cannot be negative');\n      });\n    });\n\n    describe('getActiveInsurance', () => {\n      it('should return active insurance sorted by priority', () => {\n        const insuranceList: InsuranceInformation[] = [\n          {\n            id: 'ins-2',\n            subscriberId: 'SUB456',\n            payorName: 'Secondary Insurance',\n            planName: 'Secondary Plan',\n            relationshipToSubscriber: 'self',\n            effectiveDate: '2023-01-01',\n            active: true,\n            priority: 2\n          },\n          {\n            id: 'ins-1',\n            subscriberId: 'SUB123',\n            payorName: 'Primary Insurance',\n            planName: 'Primary Plan',\n            relationshipToSubscriber: 'self',\n            effectiveDate: '2023-01-01',\n            active: true,\n            priority: 1\n          }\n        ];\n\n        const activeInsurance = getActiveInsurance(insuranceList);\n        expect(activeInsurance).toHaveLength(2);\n        expect(activeInsurance[0].priority).toBe(1);\n        expect(activeInsurance[1].priority).toBe(2);\n      });\n\n      it('should exclude inactive insurance', () => {\n        const insuranceList: InsuranceInformation[] = [\n          {\n            id: 'ins-1',\n            subscriberId: 'SUB123',\n            payorName: 'Active Insurance',\n            planName: 'Active Plan',\n            relationshipToSubscriber: 'self',\n            effectiveDate: '2023-01-01',\n            active: true,\n            priority: 1\n          },\n          {\n            id: 'ins-2',\n            subscriberId: 'SUB456',\n            payorName: 'Inactive Insurance',\n            planName: 'Inactive Plan',\n            relationshipToSubscriber: 'self',\n            effectiveDate: '2022-01-01',\n            active: false,\n            priority: 2\n          }\n        ];\n\n        const activeInsurance = getActiveInsurance(insuranceList);\n        expect(activeInsurance).toHaveLength(1);\n        expect(activeInsurance[0].id).toBe('ins-1');\n      });\n    });\n  });\n\n  describe('Patient Alert Validation', () => {\n    describe('validatePatientAlert', () => {\n      it('should validate complete patient alert', () => {\n        const validAlert: PatientAlert = {\n          id: 'alert-1',\n          type: 'allergy',\n          severity: 'high',\n          title: 'Penicillin Allergy',\n          description: 'Patient has severe allergy to penicillin with anaphylaxis reaction',\n          effectiveDate: '2020-01-01',\n          expirationDate: '2025-01-01',\n          active: true,\n          createdBy: { reference: 'Practitioner/dr-smith' },\n          lastUpdatedBy: { reference: 'Practitioner/dr-jones' },\n          category: 'clinical',\n          urgency: 'immediate'\n        };\n\n        const result = validatePatientAlert(validAlert);\n        expect(result.valid).toBe(true);\n      });\n\n      it('should validate different alert types', () => {\n        const alertTypes = ['allergy', 'medication', 'condition', 'procedure', 'diet', 'fall-risk', 'infection-control'];\n        \n        alertTypes.forEach(alertType => {\n          const alert: PatientAlert = {\n            id: 'alert-1',\n            type: alertType as any,\n            severity: 'medium',\n            title: `${alertType} Alert`,\n            description: `Test ${alertType} alert`,\n            effectiveDate: '2023-01-01',\n            active: true,\n            createdBy: { reference: 'Practitioner/test' },\n            lastUpdatedBy: { reference: 'Practitioner/test' }\n          };\n\n          const result = validatePatientAlert(alert);\n          expect(result.valid).toBe(true);\n        });\n      });\n\n      it('should validate alert severity levels', () => {\n        const severityLevels = ['low', 'medium', 'high', 'critical'];\n        \n        severityLevels.forEach(severity => {\n          const alert: PatientAlert = {\n            id: 'alert-1',\n            type: 'allergy',\n            severity: severity as any,\n            title: 'Test Alert',\n            description: 'Test alert description',\n            effectiveDate: '2023-01-01',\n            active: true,\n            createdBy: { reference: 'Practitioner/test' },\n            lastUpdatedBy: { reference: 'Practitioner/test' }\n          };\n\n          const result = validatePatientAlert(alert);\n          expect(result.valid).toBe(true);\n        });\n      });\n\n      it('should reject alert without required fields', () => {\n        const invalidAlert: Partial<PatientAlert> = {\n          id: 'alert-1',\n          type: 'allergy'\n          // Missing severity, title, description, etc.\n        };\n\n        const result = validatePatientAlert(invalidAlert as PatientAlert);\n        expect(result.valid).toBe(false);\n        expect(result.errors).toContain('Alert severity is required');\n        expect(result.errors).toContain('Alert title is required');\n        expect(result.errors).toContain('Alert description is required');\n      });\n    });\n\n    describe('hasActiveAlerts', () => {\n      it('should identify patients with active alerts', () => {\n        const alertList: PatientAlert[] = [\n          {\n            id: 'alert-1',\n            type: 'allergy',\n            severity: 'high',\n            title: 'Penicillin Allergy',\n            description: 'Severe allergy',\n            effectiveDate: '2020-01-01',\n            active: true,\n            createdBy: { reference: 'Practitioner/test' },\n            lastUpdatedBy: { reference: 'Practitioner/test' }\n          },\n          {\n            id: 'alert-2',\n            type: 'medication',\n            severity: 'medium',\n            title: 'Medication Interaction',\n            description: 'Drug interaction warning',\n            effectiveDate: '2023-01-01',\n            active: false,\n            createdBy: { reference: 'Practitioner/test' },\n            lastUpdatedBy: { reference: 'Practitioner/test' }\n          }\n        ];\n\n        const hasActive = hasActiveAlerts(alertList);\n        expect(hasActive).toBe(true);\n      });\n\n      it('should return false when no active alerts', () => {\n        const alertList: PatientAlert[] = [\n          {\n            id: 'alert-1',\n            type: 'allergy',\n            severity: 'high',\n            title: 'Resolved Allergy',\n            description: 'Previously resolved',\n            effectiveDate: '2020-01-01',\n            active: false,\n            createdBy: { reference: 'Practitioner/test' },\n            lastUpdatedBy: { reference: 'Practitioner/test' }\n          }\n        ];\n\n        const hasActive = hasActiveAlerts(alertList);\n        expect(hasActive).toBe(false);\n      });\n    });\n  });\n\n  describe('Utility Functions', () => {\n    describe('formatPatientName', () => {\n      it('should format patient name with all components', () => {\n        const patient: OmniCarePatient = {\n          resourceType: 'Patient',\n          name: [\n            {\n              use: 'official',\n              prefix: ['Dr.'],\n              given: ['John', 'Q.'],\n              family: 'Doe',\n              suffix: ['Jr.', 'MD']\n            }\n          ],\n          omnicarePatientId: 'P12345678'\n        };\n\n        const formattedName = formatPatientName(patient);\n        expect(formattedName).toBe('Dr. John Q. Doe Jr., MD');\n      });\n\n      it('should handle patient with multiple names', () => {\n        const patient: OmniCarePatient = {\n          resourceType: 'Patient',\n          name: [\n            { use: 'official', given: ['John'], family: 'Doe' },\n            { use: 'nickname', given: ['Johnny'] }\n          ],\n          omnicarePatientId: 'P12345678'\n        };\n\n        const formattedName = formatPatientName(patient);\n        expect(formattedName).toBe('John Doe'); // Should use official name\n      });\n\n      it('should handle patient without name', () => {\n        const patient: OmniCarePatient = {\n          resourceType: 'Patient',\n          omnicarePatientId: 'P12345678'\n        };\n\n        const formattedName = formatPatientName(patient);\n        expect(formattedName).toBe('[Name not available]');\n      });\n    });\n\n    describe('calculateAge', () => {\n      it('should calculate correct age from birth date', () => {\n        const birthDate = '1990-01-01';\n        const age = calculateAge(birthDate);\n        \n        const currentYear = new Date().getFullYear();\n        const expectedAge = currentYear - 1990;\n        \n        expect(age).toBeGreaterThanOrEqual(expectedAge - 1);\n        expect(age).toBeLessThanOrEqual(expectedAge);\n      });\n\n      it('should handle leap year birth dates', () => {\n        const leapYearBirthDate = '2000-02-29';\n        const age = calculateAge(leapYearBirthDate);\n        expect(age).toBeGreaterThanOrEqual(0);\n      });\n\n      it('should handle future birth dates', () => {\n        const futureBirthDate = '2030-01-01';\n        const age = calculateAge(futureBirthDate);\n        expect(age).toBeLessThan(0); // Negative age for future dates\n      });\n    });\n  });\n\n  describe('Patient Demographics', () => {\n    it('should validate demographics structure', () => {\n      const demographics: PatientDemographics = {\n        race: [{\n          coding: [{\n            system: 'urn:oid:2.16.840.1.113883.6.238',\n            code: '2106-3',\n            display: 'White'\n          }]\n        }],\n        ethnicity: [{\n          coding: [{\n            system: 'urn:oid:2.16.840.1.113883.6.238',\n            code: '2186-5',\n            display: 'Not Hispanic or Latino'\n          }]\n        }],\n        occupation: 'Software Engineer',\n        educationLevel: {\n          coding: [{\n            system: 'http://terminology.hl7.org/CodeSystem/v3-EducationLevel',\n            code: '1081',\n            display: 'College graduate'\n          }]\n        }\n      };\n\n      expect(demographics.race).toBeDefined();\n      expect(demographics.ethnicity).toBeDefined();\n      expect(demographics.occupation).toBe('Software Engineer');\n      expect(demographics.educationLevel?.coding?.[0]?.code).toBe('1081');\n    });\n  });\n\n  describe('Social History', () => {\n    it('should validate social history structure', () => {\n      const socialHistory: PatientSocialHistory = {\n        smokingStatus: {\n          coding: [{\n            system: 'http://snomed.info/sct',\n            code: '266919005',\n            display: 'Never smoked'\n          }]\n        },\n        alcoholUse: {\n          status: {\n            coding: [{\n              system: 'http://snomed.info/sct',\n              code: '219006',\n              display: 'Current drinker of alcohol'\n            }]\n          },\n          frequency: 'Weekly'\n        },\n        exerciseHabits: {\n          frequency: '3-4 times per week',\n          type: ['Running', 'Weight training'],\n          intensity: 'moderate'\n        }\n      };\n\n      expect(socialHistory.smokingStatus?.coding?.[0]?.code).toBe('266919005');\n      expect(socialHistory.alcoholUse?.frequency).toBe('Weekly');\n      expect(socialHistory.exerciseHabits?.type).toContain('Running');\n    });\n  });\n\n  describe('Accessibility Needs', () => {\n    it('should validate accessibility needs structure', () => {\n      const accessibilityNeeds: AccessibilityNeeds = {\n        physicalDisability: ['Mobility impairment', 'Visual impairment'],\n        assistiveDevices: ['Wheelchair', 'Hearing aid'],\n        accommodationRequests: ['Sign language interpreter', 'Large print materials'],\n        communicationNeeds: ['TTY phone access'],\n        transportationNeeds: ['Wheelchair accessible vehicle']\n      };\n\n      expect(accessibilityNeeds.physicalDisability).toContain('Mobility impairment');\n      expect(accessibilityNeeds.assistiveDevices).toContain('Wheelchair');\n      expect(accessibilityNeeds.accommodationRequests).toContain('Sign language interpreter');\n    });\n  });\n});"],"version":3}