{"file":"/Users/rodrigo/claude-projects/OmniCare/backend/src/config/index.ts","mappings":"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","names":[],"sources":["/Users/rodrigo/claude-projects/OmniCare/backend/src/config/index.ts"],"sourcesContent":["import path from 'path';\n\nimport dotenv from 'dotenv';\n\n// Load environment variables\ndotenv.config({ path: path.join(__dirname, '../../.env') });\n\ninterface Config {\n  // Server Configuration\n  server: {\n    port: number;\n    host: string;\n    env: string;\n  };\n\n  // Database Configuration\n  database: {\n    url: string;\n    connectionPoolSize: number;\n  };\n\n  redis: {\n    url: string;\n  };\n\n  // Medplum Configuration\n  medplum: {\n    baseUrl: string;\n    clientId: string;\n    clientSecret: string;\n    projectId: string;\n    selfHosted: boolean;\n    selfHostedUrl?: string;\n  };\n\n  // JWT Configuration\n  jwt: {\n    secret: string;\n    expiresIn: string;\n    refreshExpiresIn: string;\n  };\n\n  // FHIR Configuration\n  fhir: {\n    version: string;\n    baseUrl: string;\n  };\n\n  // SMART on FHIR Configuration\n  smart: {\n    authorizationUrl: string;\n    tokenUrl: string;\n    introspectionUrl: string;\n    scopes: string[];\n  };\n\n  // Clinical Decision Support Hooks\n  cdsHooks: {\n    discoveryUrl: string;\n    baseUrl: string;\n  };\n\n  // External EHR Integration\n  ehr: {\n    integrationEnabled: boolean;\n    systems: string[];\n    epic: {\n      clientId: string;\n      privateKeyPath: string;\n      fhirBaseUrl: string;\n    };\n    cerner: {\n      clientId: string;\n      clientSecret: string;\n      fhirBaseUrl: string;\n    };\n  };\n\n  // HL7 v2 Interface\n  hl7v2: {\n    enabled: boolean;\n    port: number;\n    host: string;\n  };\n\n  // Logging\n  logging: {\n    level: string;\n    file: string;\n  };\n\n  // Rate Limiting\n  rateLimit: {\n    windowMs: number;\n    maxRequests: number;\n  };\n\n  // Subscription Configuration\n  subscriptions: {\n    websocketPort: number;\n    maxConnections: number;\n  };\n\n  // Performance\n  performance: {\n    cacheTtl: number;\n    maxRequestSize: string;\n  };\n}\n\nconst config: Config = {\n  server: {\n    port: parseInt(process.env.PORT || '8080', 10),\n    host: process.env.HOST || 'localhost',\n    env: process.env.NODE_ENV || 'development',\n  },\n\n  database: {\n    url: process.env.DATABASE_URL || 'postgresql://localhost:5432/omnicare_fhir',\n    connectionPoolSize: parseInt(process.env.CONNECTION_POOL_SIZE || '10', 10),\n  },\n\n  redis: {\n    url: process.env.REDIS_URL || 'redis://localhost:6379',\n  },\n\n  medplum: {\n    baseUrl: process.env.MEDPLUM_BASE_URL || 'https://api.medplum.com/',\n    clientId: process.env.MEDPLUM_CLIENT_ID || '',\n    clientSecret: process.env.MEDPLUM_CLIENT_SECRET || '',\n    projectId: process.env.MEDPLUM_PROJECT_ID || '',\n    selfHosted: process.env.MEDPLUM_SELF_HOSTED === 'true',\n    selfHostedUrl: process.env.MEDPLUM_SELF_HOSTED_URL,\n  },\n\n  jwt: {\n    secret: process.env.JWT_SECRET || 'fallback-secret-change-in-production',\n    expiresIn: process.env.JWT_EXPIRES_IN || '24h',\n    refreshExpiresIn: process.env.JWT_REFRESH_EXPIRES_IN || '7d',\n  },\n\n  fhir: {\n    version: process.env.FHIR_VERSION || '4.0.1',\n    baseUrl: process.env.FHIR_BASE_URL || 'http://localhost:8080/fhir/R4',\n  },\n\n  smart: {\n    authorizationUrl: process.env.SMART_AUTHORIZATION_URL || 'http://localhost:8080/auth/authorize',\n    tokenUrl: process.env.SMART_TOKEN_URL || 'http://localhost:8080/auth/token',\n    introspectionUrl: process.env.SMART_INTROSPECTION_URL || 'http://localhost:8080/auth/introspect',\n    scopes: (process.env.SMART_SCOPES || 'openid profile fhirUser patient/*.read patient/*.write user/*.read user/*.write launch').split(' '),\n  },\n\n  cdsHooks: {\n    discoveryUrl: process.env.CDS_HOOKS_DISCOVERY_URL || 'http://localhost:8080/cds-services',\n    baseUrl: process.env.CDS_HOOKS_BASE_URL || 'http://localhost:8080/cds-services',\n  },\n\n  ehr: {\n    integrationEnabled: process.env.EHR_INTEGRATION_ENABLED === 'true',\n    systems: (process.env.EHR_SYSTEMS || 'epic,cerner,allscripts').split(','),\n    epic: {\n      clientId: process.env.EPIC_CLIENT_ID || '',\n      privateKeyPath: process.env.EPIC_PRIVATE_KEY_PATH || './certs/epic-private-key.pem',\n      fhirBaseUrl: process.env.EPIC_FHIR_BASE_URL || 'https://fhir.epic.com/interconnect-fhir-oauth/api/FHIR/R4',\n    },\n    cerner: {\n      clientId: process.env.CERNER_CLIENT_ID || '',\n      clientSecret: process.env.CERNER_CLIENT_SECRET || '',\n      fhirBaseUrl: process.env.CERNER_FHIR_BASE_URL || 'https://fhir-open.cerner.com/r4',\n    },\n  },\n\n  hl7v2: {\n    enabled: process.env.HL7_V2_ENABLED === 'true',\n    port: parseInt(process.env.HL7_V2_PORT || '2575', 10),\n    host: process.env.HL7_V2_HOST || '0.0.0.0',\n  },\n\n  logging: {\n    level: process.env.LOG_LEVEL || 'info',\n    file: process.env.LOG_FILE || 'logs/omnicare.log',\n  },\n\n  rateLimit: {\n    windowMs: parseInt(process.env.RATE_LIMIT_WINDOW_MS || '900000', 10),\n    maxRequests: parseInt(process.env.RATE_LIMIT_MAX_REQUESTS || '100', 10),\n  },\n\n  subscriptions: {\n    websocketPort: parseInt(process.env.WEBSOCKET_PORT || '8081', 10),\n    maxConnections: parseInt(process.env.SUBSCRIPTION_MAX_CONNECTIONS || '1000', 10),\n  },\n\n  performance: {\n    cacheTtl: parseInt(process.env.CACHE_TTL || '3600', 10),\n    maxRequestSize: process.env.MAX_REQUEST_SIZE || '10mb',\n  },\n};\n\n// Validation\nconst validateConfig = (): void => {\n  const requiredFields = [\n    'server.port',\n    'database.url',\n    'jwt.secret',\n  ];\n\n  const missingFields = requiredFields.filter(field => {\n    const keys = field.split('.');\n    let value: any = config;\n    for (const key of keys) {\n      value = value[key];\n      if (value === undefined || value === '') {\n        return true;\n      }\n    }\n    return false;\n  });\n\n  if (missingFields.length > 0) {\n    throw new Error(`Missing required configuration fields: ${missingFields.join(', ')}`);\n  }\n};\n\n// Validate configuration on startup\nif (process.env.NODE_ENV !== 'test') {\n  validateConfig();\n}\n\nexport default config;"],"version":3}