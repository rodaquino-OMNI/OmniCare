{"file":"/Users/rodrigo/claude-projects/OmniCare/backend/src/services/analytics/operational-metrics.service.ts","mappings":"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","names":[],"sources":["/Users/rodrigo/claude-projects/OmniCare/backend/src/services/analytics/operational-metrics.service.ts"],"sourcesContent":["/**\n * Operational Metrics Analytics Service\n * \n * Comprehensive operational analytics including patient flow,\n * staff utilization, appointment analytics, and operational KPIs\n */\n\nimport { EventEmitter } from 'events';\n\nexport interface PatientFlowMetrics {\n  totalPatients: number;\n  averageWaitTime: number;\n  averageVisitDuration: number;\n  patientThroughput: number;\n  bottlenecks: Array<{\n    location: string;\n    averageWaitTime: number;\n    impactedPatients: number;\n    severity: 'High' | 'Medium' | 'Low';\n  }>;\n  hourlyFlow: Array<{\n    hour: number;\n    checkedIn: number;\n    inProgress: number;\n    completed: number;\n    averageWaitTime: number;\n  }>;\n}\n\nexport interface StaffUtilizationMetrics {\n  departmentId?: string;\n  departmentName?: string;\n  totalStaff: number;\n  averageUtilization: number;\n  staffMetrics: Array<{\n    staffId: string;\n    staffName: string;\n    role: string;\n    scheduledHours: number;\n    actualHours: number;\n    utilizationRate: number;\n    patientsSeen: number;\n    avgTimePerPatient: number;\n    productivityScore: number;\n  }>;\n  overtimeMetrics: {\n    totalOvertimeHours: number;\n    overtimeCost: number;\n    staffWithOvertime: number;\n  };\n  recommendations: Array<{\n    type: 'Staffing' | 'Scheduling' | 'Workflow';\n    recommendation: string;\n    expectedImpact: string;\n    priority: 'High' | 'Medium' | 'Low';\n  }>;\n}\n\nexport interface AppointmentAnalytics {\n  totalAppointments: number;\n  scheduledAppointments: number;\n  completedAppointments: number;\n  cancelledAppointments: number;\n  noShowAppointments: number;\n  completionRate: number;\n  cancellationRate: number;\n  noShowRate: number;\n  averageLeadTime: number;\n  appointmentTypes: Array<{\n    type: string;\n    count: number;\n    percentage: number;\n    averageDuration: number;\n    noShowRate: number;\n  }>;\n  providerUtilization: Array<{\n    providerId: string;\n    providerName: string;\n    scheduledSlots: number;\n    filledSlots: number;\n    utilizationRate: number;\n    averageAppointmentDuration: number;\n  }>;\n}\n\nexport interface QualityMetrics {\n  patientSatisfaction: {\n    overallScore: number;\n    responseRate: number;\n    npsScore: number;\n    categories: Array<{\n      category: string;\n      score: number;\n      benchmark: number;\n      trend: 'Improving' | 'Stable' | 'Declining';\n    }>;\n  };\n  clinicalMetrics: {\n    readmissionRate: number;\n    complicationRate: number;\n    infectionRate: number;\n    mortalityRate: number;\n    lengthOfStay: number;\n  };\n  safetyMetrics: {\n    adverseEvents: number;\n    nearMisses: number;\n    safetyScore: number;\n    incidentsByType: Array<{\n      type: string;\n      count: number;\n      severity: 'Critical' | 'High' | 'Medium' | 'Low';\n    }>;\n  };\n}\n\nexport interface OperationalDashboard {\n  realTimeMetrics: {\n    currentlyInFacility: number;\n    waitingPatients: number;\n    inProgressEncounters: number;\n    completedToday: number;\n    averageWaitTime: number;\n    staffOnDuty: number;\n    availableRooms: number;\n  };\n  todaysPerformance: {\n    appointmentsScheduled: number;\n    appointmentsCompleted: number;\n    walkInsProcessed: number;\n    patientSatisfactionToday: number;\n    revenueToday: number;\n  };\n  alerts: Array<{\n    id: string;\n    type: 'Critical' | 'Warning' | 'Info';\n    title: string;\n    message: string;\n    timestamp: Date;\n    acknowledged: boolean;\n  }>;\n  trends: {\n    patientVolumeTrend: 'Up' | 'Down' | 'Stable';\n    waitTimeTrend: 'Up' | 'Down' | 'Stable';\n    satisfactionTrend: 'Up' | 'Down' | 'Stable';\n  };\n}\n\nexport class OperationalMetricsService extends EventEmitter {\n  private realTimeData: Map<string, any> = new Map();\n  private historicalMetrics: Map<string, any[]> = new Map();\n  private benchmarks: Map<string, number> = new Map();\n\n  constructor() {\n    super();\n    this.initializeBenchmarks();\n    this.startRealTimeMonitoring();\n  }\n\n  /**\n   * Get comprehensive patient flow analytics\n   */\n  async getPatientFlowAnalytics(\n    facilityId: string,\n    period?: { start: Date; end: Date }\n  ): Promise<PatientFlowMetrics> {\n    const currentFlow = await this.calculateCurrentPatientFlow(facilityId);\n    const bottlenecks = await this.identifyBottlenecks(facilityId);\n    const hourlyFlow = await this.getHourlyFlowData(facilityId, period);\n\n    return {\n      totalPatients: currentFlow.totalPatients,\n      averageWaitTime: currentFlow.averageWaitTime,\n      averageVisitDuration: currentFlow.averageVisitDuration,\n      patientThroughput: currentFlow.patientThroughput,\n      bottlenecks,\n      hourlyFlow\n    };\n  }\n\n  /**\n   * Analyze staff utilization and productivity\n   */\n  async getStaffUtilizationAnalytics(\n    facilityId: string,\n    period: { start: Date; end: Date },\n    departmentId?: string\n  ): Promise<StaffUtilizationMetrics> {\n    const staffMetrics = await this.calculateStaffUtilization(facilityId, period, departmentId);\n    const overtimeMetrics = await this.calculateOvertimeMetrics(facilityId, period, departmentId);\n    const recommendations = await this.generateStaffingRecommendations(staffMetrics, overtimeMetrics);\n\n    const totalStaff = staffMetrics.length;\n    const averageUtilization = staffMetrics.reduce((sum, s) => sum + s.utilizationRate, 0) / totalStaff;\n\n    return {\n      departmentId,\n      departmentName: departmentId ? await this.getDepartmentName(departmentId) : 'All Departments',\n      totalStaff,\n      averageUtilization,\n      staffMetrics,\n      overtimeMetrics,\n      recommendations\n    };\n  }\n\n  /**\n   * Get appointment analytics and scheduling insights\n   */\n  async getAppointmentAnalytics(\n    facilityId: string,\n    period: { start: Date; end: Date }\n  ): Promise<AppointmentAnalytics> {\n    const appointmentData = await this.calculateAppointmentMetrics(facilityId, period);\n    const appointmentTypes = await this.analyzeAppointmentTypes(facilityId, period);\n    const providerUtilization = await this.calculateProviderUtilization(facilityId, period);\n\n    return {\n      ...appointmentData,\n      appointmentTypes,\n      providerUtilization\n    };\n  }\n\n  /**\n   * Get quality and safety metrics\n   */\n  async getQualityMetrics(\n    facilityId: string,\n    period: { start: Date; end: Date }\n  ): Promise<QualityMetrics> {\n    const patientSatisfaction = await this.calculatePatientSatisfaction(facilityId, period);\n    const clinicalMetrics = await this.calculateClinicalMetrics(facilityId, period);\n    const safetyMetrics = await this.calculateSafetyMetrics(facilityId, period);\n\n    return {\n      patientSatisfaction,\n      clinicalMetrics,\n      safetyMetrics\n    };\n  }\n\n  /**\n   * Get real-time operational dashboard\n   */\n  async getOperationalDashboard(facilityId: string): Promise<OperationalDashboard> {\n    const realTimeMetrics = await this.getRealTimeMetrics(facilityId);\n    const todaysPerformance = await this.getTodaysPerformance(facilityId);\n    const alerts = await this.getActiveAlerts(facilityId);\n    const trends = await this.calculateTrends(facilityId);\n\n    // Emit real-time update\n    this.emit('dashboard-update', {\n      facilityId,\n      timestamp: new Date(),\n      data: { realTimeMetrics, todaysPerformance, alerts, trends }\n    });\n\n    return {\n      realTimeMetrics,\n      todaysPerformance,\n      alerts,\n      trends\n    };\n  }\n\n  /**\n   * Analyze resource utilization (rooms, equipment)\n   */\n  async getResourceUtilization(\n    facilityId: string,\n    period: { start: Date; end: Date }\n  ): Promise<{\n    roomUtilization: Array<{\n      roomId: string;\n      roomName: string;\n      roomType: string;\n      utilizationRate: number;\n      totalBookedHours: number;\n      availableHours: number;\n      turnaroundTime: number;\n    }>;\n    equipmentUtilization: Array<{\n      equipmentId: string;\n      equipmentName: string;\n      utilizationRate: number;\n      maintenanceHours: number;\n      downtime: number;\n      efficiency: number;\n    }>;\n    recommendations: Array<{\n      resourceType: 'Room' | 'Equipment';\n      resourceId: string;\n      recommendation: string;\n      expectedImpact: string;\n      priority: 'High' | 'Medium' | 'Low';\n    }>;\n  }> {\n    const roomUtilization = await this.calculateRoomUtilization(facilityId, period);\n    const equipmentUtilization = await this.calculateEquipmentUtilization(facilityId, period);\n    const recommendations = await this.generateResourceRecommendations(roomUtilization, equipmentUtilization);\n\n    return {\n      roomUtilization,\n      equipmentUtilization,\n      recommendations\n    };\n  }\n\n  /**\n   * Generate operational insights and predictions\n   */\n  async generateOperationalInsights(\n    facilityId: string\n  ): Promise<{\n    insights: Array<{\n      category: 'Patient Flow' | 'Staffing' | 'Quality' | 'Efficiency';\n      insight: string;\n      impact: 'High' | 'Medium' | 'Low';\n      confidence: number;\n      recommendations: string[];\n    }>;\n    predictions: Array<{\n      metric: string;\n      currentValue: number;\n      predictedValue: number;\n      timeframe: string;\n      confidence: number;\n      factors: string[];\n    }>;\n  }> {\n    const patientFlow = await this.getPatientFlowAnalytics(facilityId);\n    const quality = await this.getQualityMetrics(facilityId, {\n      start: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000),\n      end: new Date()\n    });\n\n    const insights = [\n      {\n        category: 'Patient Flow' as const,\n        insight: patientFlow.averageWaitTime > 30 ? \n          'Patient wait times exceed benchmark - workflow optimization needed' :\n          'Patient flow performing within acceptable ranges',\n        impact: patientFlow.averageWaitTime > 30 ? 'High' as const : 'Low' as const,\n        confidence: 0.85,\n        recommendations: patientFlow.averageWaitTime > 30 ? [\n          'Analyze bottlenecks in check-in process',\n          'Consider additional staffing during peak hours',\n          'Implement patient flow management system'\n        ] : ['Continue monitoring current performance']\n      },\n      {\n        category: 'Quality' as const,\n        insight: quality.patientSatisfaction.overallScore < 4.0 ?\n          'Patient satisfaction below target - service improvements needed' :\n          'Patient satisfaction meeting performance targets',\n        impact: quality.patientSatisfaction.overallScore < 4.0 ? 'Medium' as const : 'Low' as const,\n        confidence: 0.78,\n        recommendations: quality.patientSatisfaction.overallScore < 4.0 ? [\n          'Focus on communication and bedside manner training',\n          'Reduce wait times and improve scheduling',\n          'Implement patient feedback system'\n        ] : ['Maintain current quality initiatives']\n      }\n    ];\n\n    const predictions = [\n      {\n        metric: 'Average Wait Time',\n        currentValue: patientFlow.averageWaitTime,\n        predictedValue: patientFlow.averageWaitTime * 1.05, // 5% increase predicted\n        timeframe: 'Next 30 days',\n        confidence: 0.72,\n        factors: ['Seasonal volume increase', 'Staff vacation schedules']\n      },\n      {\n        metric: 'Patient Satisfaction',\n        currentValue: quality.patientSatisfaction.overallScore,\n        predictedValue: quality.patientSatisfaction.overallScore + 0.1,\n        timeframe: 'Next quarter',\n        confidence: 0.68,\n        factors: ['Recent process improvements', 'Staff training initiatives']\n      }\n    ];\n\n    return { insights, predictions };\n  }\n\n  private async calculateCurrentPatientFlow(facilityId: string): Promise<any> {\n    // Mock implementation - would integrate with real-time EHR data\n    return {\n      totalPatients: 127,\n      averageWaitTime: 18, // minutes\n      averageVisitDuration: 45, // minutes\n      patientThroughput: 85 // patients per day\n    };\n  }\n\n  private async identifyBottlenecks(facilityId: string): Promise<any[]> {\n    return [\n      {\n        location: 'Check-in Desk',\n        averageWaitTime: 12,\n        impactedPatients: 45,\n        severity: 'Medium' as const\n      },\n      {\n        location: 'Lab Draw Station',\n        averageWaitTime: 25,\n        impactedPatients: 28,\n        severity: 'High' as const\n      },\n      {\n        location: 'Exam Room 3',\n        averageWaitTime: 8,\n        impactedPatients: 15,\n        severity: 'Low' as const\n      }\n    ];\n  }\n\n  private async getHourlyFlowData(facilityId: string, period?: any): Promise<any[]> {\n    const hourlyData = [];\n    \n    for (let hour = 8; hour <= 18; hour++) {\n      hourlyData.push({\n        hour,\n        checkedIn: Math.floor(Math.random() * 15) + 5,\n        inProgress: Math.floor(Math.random() * 12) + 3,\n        completed: Math.floor(Math.random() * 18) + 8,\n        averageWaitTime: Math.floor(Math.random() * 20) + 10\n      });\n    }\n    \n    return hourlyData;\n  }\n\n  private async calculateStaffUtilization(\n    facilityId: string,\n    period: { start: Date; end: Date },\n    departmentId?: string\n  ): Promise<any[]> {\n    return [\n      {\n        staffId: 'STAFF001',\n        staffName: 'Sarah Johnson, RN',\n        role: 'Registered Nurse',\n        scheduledHours: 160,\n        actualHours: 164,\n        utilizationRate: 102.5,\n        patientsSeen: 180,\n        avgTimePerPatient: 35,\n        productivityScore: 92\n      },\n      {\n        staffId: 'STAFF002',\n        staffName: 'Mike Chen, MA',\n        role: 'Medical Assistant',\n        scheduledHours: 160,\n        actualHours: 155,\n        utilizationRate: 96.9,\n        patientsSeen: 220,\n        avgTimePerPatient: 28,\n        productivityScore: 88\n      },\n      {\n        staffId: 'STAFF003',\n        staffName: 'Lisa Rodriguez, RN',\n        role: 'Registered Nurse',\n        scheduledHours: 120,\n        actualHours: 118,\n        utilizationRate: 98.3,\n        patientsSeen: 145,\n        avgTimePerPatient: 32,\n        productivityScore: 85\n      }\n    ];\n  }\n\n  private async calculateOvertimeMetrics(\n    facilityId: string,\n    period: { start: Date; end: Date },\n    departmentId?: string\n  ): Promise<any> {\n    return {\n      totalOvertimeHours: 48,\n      overtimeCost: 2880, // $60/hour average\n      staffWithOvertime: 3\n    };\n  }\n\n  private async generateStaffingRecommendations(staffMetrics: any[], overtimeMetrics: any): Promise<any[]> {\n    const recommendations = [];\n\n    const avgUtilization = staffMetrics.reduce((sum, s) => sum + s.utilizationRate, 0) / staffMetrics.length;\n    \n    if (avgUtilization > 100) {\n      recommendations.push({\n        type: 'Staffing',\n        recommendation: 'Consider adding additional staff to reduce overtime and improve work-life balance',\n        expectedImpact: 'Reduce overtime costs by 30%, improve staff satisfaction',\n        priority: 'High'\n      });\n    }\n\n    if (overtimeMetrics.totalOvertimeHours > 40) {\n      recommendations.push({\n        type: 'Scheduling',\n        recommendation: 'Optimize scheduling to better distribute workload and minimize overtime',\n        expectedImpact: 'Reduce overtime hours by 25%',\n        priority: 'Medium'\n      });\n    }\n\n    return recommendations;\n  }\n\n  private async calculateAppointmentMetrics(facilityId: string, period: { start: Date; end: Date }): Promise<any> {\n    const totalAppointments = 1250;\n    const scheduledAppointments = 1200;\n    const completedAppointments = 1050;\n    const cancelledAppointments = 120;\n    const noShowAppointments = 80;\n\n    return {\n      totalAppointments,\n      scheduledAppointments,\n      completedAppointments,\n      cancelledAppointments,\n      noShowAppointments,\n      completionRate: (completedAppointments / scheduledAppointments) * 100,\n      cancellationRate: (cancelledAppointments / scheduledAppointments) * 100,\n      noShowRate: (noShowAppointments / scheduledAppointments) * 100,\n      averageLeadTime: 14 // days\n    };\n  }\n\n  private async analyzeAppointmentTypes(facilityId: string, period: { start: Date; end: Date }): Promise<any[]> {\n    return [\n      {\n        type: 'Follow-up',\n        count: 450,\n        percentage: 42.9,\n        averageDuration: 30,\n        noShowRate: 6.2\n      },\n      {\n        type: 'New Patient',\n        count: 280,\n        percentage: 26.7,\n        averageDuration: 60,\n        noShowRate: 8.5\n      },\n      {\n        type: 'Annual Physical',\n        count: 180,\n        percentage: 17.1,\n        averageDuration: 45,\n        noShowRate: 4.8\n      },\n      {\n        type: 'Urgent Care',\n        count: 90,\n        percentage: 8.6,\n        averageDuration: 25,\n        noShowRate: 12.1\n      },\n      {\n        type: 'Procedure',\n        count: 50,\n        percentage: 4.8,\n        averageDuration: 90,\n        noShowRate: 3.2\n      }\n    ];\n  }\n\n  private async calculateProviderUtilization(facilityId: string, period: { start: Date; end: Date }): Promise<any[]> {\n    return [\n      {\n        providerId: 'PROV001',\n        providerName: 'Dr. Smith',\n        scheduledSlots: 200,\n        filledSlots: 185,\n        utilizationRate: 92.5,\n        averageAppointmentDuration: 35\n      },\n      {\n        providerId: 'PROV002',\n        providerName: 'Dr. Johnson',\n        scheduledSlots: 180,\n        filledSlots: 165,\n        utilizationRate: 91.7,\n        averageAppointmentDuration: 42\n      },\n      {\n        providerId: 'PROV003',\n        providerName: 'Dr. Williams',\n        scheduledSlots: 160,\n        filledSlots: 142,\n        utilizationRate: 88.8,\n        averageAppointmentDuration: 38\n      }\n    ];\n  }\n\n  private async calculatePatientSatisfaction(facilityId: string, period: { start: Date; end: Date }): Promise<any> {\n    return {\n      overallScore: 4.2,\n      responseRate: 65,\n      npsScore: 32,\n      categories: [\n        {\n          category: 'Communication',\n          score: 4.3,\n          benchmark: 4.5,\n          trend: 'Improving' as const\n        },\n        {\n          category: 'Wait Time',\n          score: 3.8,\n          benchmark: 4.0,\n          trend: 'Stable' as const\n        },\n        {\n          category: 'Staff Courtesy',\n          score: 4.5,\n          benchmark: 4.3,\n          trend: 'Stable' as const\n        },\n        {\n          category: 'Facility Cleanliness',\n          score: 4.6,\n          benchmark: 4.4,\n          trend: 'Improving' as const\n        }\n      ]\n    };\n  }\n\n  private async calculateClinicalMetrics(facilityId: string, period: { start: Date; end: Date }): Promise<any> {\n    return {\n      readmissionRate: 8.5, // percentage\n      complicationRate: 2.1,\n      infectionRate: 0.8,\n      mortalityRate: 0.2,\n      lengthOfStay: 3.2 // days\n    };\n  }\n\n  private async calculateSafetyMetrics(facilityId: string, period: { start: Date; end: Date }): Promise<any> {\n    return {\n      adverseEvents: 12,\n      nearMisses: 45,\n      safetyScore: 92,\n      incidentsByType: [\n        {\n          type: 'Medication Error',\n          count: 8,\n          severity: 'Medium' as const\n        },\n        {\n          type: 'Fall',\n          count: 3,\n          severity: 'High' as const\n        },\n        {\n          type: 'Equipment Malfunction',\n          count: 2,\n          severity: 'Low' as const\n        }\n      ]\n    };\n  }\n\n  private async getRealTimeMetrics(facilityId: string): Promise<any> {\n    return {\n      currentlyInFacility: 43,\n      waitingPatients: 12,\n      inProgressEncounters: 18,\n      completedToday: 67,\n      averageWaitTime: 15,\n      staffOnDuty: 15,\n      availableRooms: 8\n    };\n  }\n\n  private async getTodaysPerformance(facilityId: string): Promise<any> {\n    return {\n      appointmentsScheduled: 85,\n      appointmentsCompleted: 67,\n      walkInsProcessed: 12,\n      patientSatisfactionToday: 4.3,\n      revenueToday: 18500\n    };\n  }\n\n  private async getActiveAlerts(facilityId: string): Promise<any[]> {\n    return [\n      {\n        id: 'ALERT001',\n        type: 'Warning' as const,\n        title: 'High Wait Times',\n        message: 'Average wait time in Lab Draw Station exceeds 20 minutes',\n        timestamp: new Date(),\n        acknowledged: false\n      },\n      {\n        id: 'ALERT002',\n        type: 'Info' as const,\n        title: 'Room Utilization',\n        message: 'Exam Room 5 has been available for over 2 hours',\n        timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000),\n        acknowledged: true\n      }\n    ];\n  }\n\n  private async calculateTrends(facilityId: string): Promise<any> {\n    return {\n      patientVolumeTrend: 'Up' as const,\n      waitTimeTrend: 'Stable' as const,\n      satisfactionTrend: 'Up' as const\n    };\n  }\n\n  private async calculateRoomUtilization(facilityId: string, period: { start: Date; end: Date }): Promise<any[]> {\n    return [\n      {\n        roomId: 'ROOM001',\n        roomName: 'Exam Room 1',\n        roomType: 'Exam',\n        utilizationRate: 85.2,\n        totalBookedHours: 136,\n        availableHours: 160,\n        turnaroundTime: 12 // minutes\n      },\n      {\n        roomId: 'ROOM002',\n        roomName: 'Procedure Room A',\n        roomType: 'Procedure',\n        utilizationRate: 92.5,\n        totalBookedHours: 148,\n        availableHours: 160,\n        turnaroundTime: 20\n      }\n    ];\n  }\n\n  private async calculateEquipmentUtilization(facilityId: string, period: { start: Date; end: Date }): Promise<any[]> {\n    return [\n      {\n        equipmentId: 'EQ001',\n        equipmentName: 'X-Ray Machine',\n        utilizationRate: 78.5,\n        maintenanceHours: 8,\n        downtime: 2.5,\n        efficiency: 92.3\n      },\n      {\n        equipmentId: 'EQ002',\n        equipmentName: 'EKG Machine',\n        utilizationRate: 65.2,\n        maintenanceHours: 4,\n        downtime: 1.0,\n        efficiency: 95.8\n      }\n    ];\n  }\n\n  private async generateResourceRecommendations(roomUtil: any[], equipUtil: any[]): Promise<any[]> {\n    const recommendations = [];\n\n    for (const room of roomUtil) {\n      if (room.utilizationRate > 90) {\n        recommendations.push({\n          resourceType: 'Room',\n          resourceId: room.roomId,\n          recommendation: 'Consider adding capacity or optimizing scheduling',\n          expectedImpact: 'Reduce wait times and improve patient flow',\n          priority: 'High'\n        });\n      }\n    }\n\n    for (const equipment of equipUtil) {\n      if (equipment.utilizationRate < 50) {\n        recommendations.push({\n          resourceType: 'Equipment',\n          resourceId: equipment.equipmentId,\n          recommendation: 'Evaluate need for this equipment or find additional uses',\n          expectedImpact: 'Optimize resource allocation and reduce costs',\n          priority: 'Medium'\n        });\n      }\n    }\n\n    return recommendations;\n  }\n\n  private async getDepartmentName(departmentId: string): Promise<string> {\n    const departments: Record<string, string> = {\n      'DEPT001': 'Emergency Department',\n      'DEPT002': 'Internal Medicine',\n      'DEPT003': 'Cardiology',\n      'DEPT004': 'Orthopedics'\n    };\n    \n    return departments[departmentId] || 'Unknown Department';\n  }\n\n  private startRealTimeMonitoring(): void {\n    // Simulate real-time data updates\n    setInterval(() => {\n      this.emit('real-time-update', {\n        timestamp: new Date(),\n        metrics: {\n          currentPatients: Math.floor(Math.random() * 50) + 20,\n          waitingPatients: Math.floor(Math.random() * 15) + 5,\n          averageWaitTime: Math.floor(Math.random() * 20) + 10\n        }\n      });\n    }, 30000); // Update every 30 seconds\n  }\n\n  private initializeBenchmarks(): void {\n    this.benchmarks.set('average-wait-time', 15);\n    this.benchmarks.set('patient-satisfaction', 4.5);\n    this.benchmarks.set('staff-utilization', 85);\n    this.benchmarks.set('room-utilization', 80);\n    this.benchmarks.set('no-show-rate', 10);\n    this.benchmarks.set('cancellation-rate', 8);\n  }\n}"],"version":3}