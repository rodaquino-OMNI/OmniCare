{"file":"/Users/rodrigo/claude-projects/OmniCare/backend/src/services/cds-hooks.service.ts","mappings":";;;;;;AAEA,qEAAgE;AAiBhE,4DAAoC;AACpC,qDAAsD;AAYtD;;;;GAIG;AACH,MAAa,eAAe;IACT,QAAQ,GAAiB;QACxC;YACE,IAAI,EAAE,cAAc;YACpB,IAAI,EAAE,yBAAyB;YAC/B,KAAK,EAAE,kCAAkC;YACzC,WAAW,EAAE,yEAAyE;YACtF,EAAE,EAAE,kCAAkC;YACtC,QAAQ,EAAE;gBACR,OAAO,EAAE,+BAA+B;gBACxC,UAAU,EAAE,yCAAyC;gBACrD,WAAW,EAAE,+DAA+D;gBAC5E,YAAY,EAAE,sFAAsF;gBACpG,SAAS,EAAE,kDAAkD;aAC9D;SACF;QACD;YACE,IAAI,EAAE,sBAAsB;YAC5B,IAAI,EAAE,yBAAyB;YAC/B,KAAK,EAAE,kCAAkC;YACzC,WAAW,EAAE,oEAAoE;YACjF,EAAE,EAAE,4BAA4B;YAChC,QAAQ,EAAE;gBACR,OAAO,EAAE,+BAA+B;gBACxC,WAAW,EAAE,+DAA+D;gBAC5E,SAAS,EAAE,kDAAkD;gBAC7D,UAAU,EAAE,yCAAyC;gBACrD,YAAY,EAAE,oFAAoF;aACnG;SACF;QACD;YACE,IAAI,EAAE,cAAc;YACpB,IAAI,EAAE,uBAAuB;YAC7B,KAAK,EAAE,sCAAsC;YAC7C,WAAW,EAAE,8DAA8D;YAC3E,EAAE,EAAE,uBAAuB;YAC3B,QAAQ,EAAE;gBACR,OAAO,EAAE,+BAA+B;gBACxC,UAAU,EAAE,yCAAyC;gBACrD,YAAY,EAAE,iEAAiE;gBAC/E,UAAU,EAAE,+DAA+D;aAC5E;SACF;QACD;YACE,IAAI,EAAE,iBAAiB;YACvB,IAAI,EAAE,uBAAuB;YAC7B,KAAK,EAAE,gCAAgC;YACvC,WAAW,EAAE,mEAAmE;YAChF,EAAE,EAAE,yBAAyB;YAC7B,QAAQ,EAAE;gBACR,OAAO,EAAE,+BAA+B;gBACxC,SAAS,EAAE,mCAAmC;gBAC9C,UAAU,EAAE,yCAAyC;gBACrD,WAAW,EAAE,+DAA+D;gBAC5E,SAAS,EAAE,sDAAsD;aAClE;SACF;QACD;YACE,IAAI,EAAE,qBAAqB;YAC3B,IAAI,EAAE,oBAAoB;YAC1B,KAAK,EAAE,6BAA6B;YACpC,WAAW,EAAE,gEAAgE;YAC7E,EAAE,EAAE,6BAA6B;YACjC,QAAQ,EAAE;gBACR,OAAO,EAAE,+BAA+B;gBACxC,SAAS,EAAE,mCAAmC;gBAC9C,UAAU,EAAE,yCAAyC;gBACrD,WAAW,EAAE,+DAA+D;gBAC5E,UAAU,EAAE,2EAA2E;aACxF;SACF;KACF,CAAC;IAEF,kCAAkC;IAClC,sBAAsB;IACtB,kCAAkC;IAElC;;OAEG;IACH,oBAAoB;QAClB,gBAAM,CAAC,IAAI,CAAC,wCAAwC,CAAC,CAAC;QAEtD,OAAO;YACL,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;gBACtC,GAAG,OAAO;gBACV,iBAAiB,EAAE,OAAO,CAAC,iBAAiB,IAAI,kEAAkE;aACnH,CAAC,CAAC;SACJ,CAAC;IACJ,CAAC;IAED,kCAAkC;IAClC,sBAAsB;IACtB,kCAAkC;IAElC;;OAEG;IACH,KAAK,CAAC,kBAAkB,CAAC,OAAuB;QAC9C,IAAI,CAAC;YACH,gBAAM,CAAC,IAAI,CAAC,iCAAiC,EAAE;gBAC7C,YAAY,EAAE,OAAO,CAAC,YAAY;gBAClC,SAAS,EAAE,OAAO,CAAC,OAAO,CAAC,SAAS;aACrC,CAAC,CAAC;YAEH,MAAM,KAAK,GAAc,EAAE,CAAC;YAC5B,MAAM,YAAY,GAAG,OAAO,CAAC,QAAQ,IAAI,EAAE,CAAC;YAE5C,mBAAmB;YACnB,MAAM,OAAO,GAAG,YAAY,CAAC,OAAO;gBAClC,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,6CAAoB,CAAC,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;YAExG,uBAAuB;YACvB,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;YACrE,IAAI,QAAQ;gBAAE,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAEnC,uBAAuB;YACvB,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;YAC7E,IAAI,cAAc;gBAAE,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;YAE/C,iBAAiB;YACjB,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;YACxE,IAAI,YAAY;gBAAE,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAE3C,gBAAM,CAAC,IAAI,CAAC,iCAAiC,EAAE;gBAC7C,YAAY,EAAE,OAAO,CAAC,YAAY;gBAClC,cAAc,EAAE,KAAK,CAAC,MAAM;aAC7B,CAAC,CAAC;YAEH,OAAO,EAAE,KAAK,EAAE,CAAC;QACnB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,sCAAsC,EAAE,KAAK,CAAC,CAAC;YAC5D,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,0BAA0B,CAAC,OAAuB;QACtD,IAAI,CAAC;YACH,gBAAM,CAAC,IAAI,CAAC,yCAAyC,EAAE;gBACrD,YAAY,EAAE,OAAO,CAAC,YAAY;gBAClC,SAAS,EAAE,OAAO,CAAC,OAAO,CAAC,SAAS;gBACpC,WAAW,EAAE,OAAO,CAAC,OAAO,CAAC,WAAW,EAAE,MAAM,IAAI,CAAC;aACtD,CAAC,CAAC;YAEH,MAAM,KAAK,GAAc,EAAE,CAAC;YAC5B,MAAM,YAAY,GAAG,OAAO,CAAC,QAAQ,IAAI,EAAE,CAAC;YAE5C,mBAAmB;YACnB,MAAM,OAAO,GAAG,YAAY,CAAC,OAAO;gBAClC,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,6CAAoB,CAAC,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;YAExG,oCAAoC;YACpC,KAAK,MAAM,UAAU,IAAI,OAAO,CAAC,OAAO,CAAC,WAAW,IAAI,EAAE,EAAE,CAAC;gBAC3D,IAAI,UAAU,CAAC,YAAY,KAAK,mBAAmB,EAAE,CAAC;oBACpD,yBAAyB;oBACzB,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;oBACnF,IAAI,eAAe;wBAAE,KAAK,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;oBAEjD,gBAAgB;oBAChB,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,UAAU,EAAE,OAAO,EAAE,YAAY,CAAC,CAAC;oBACrF,IAAI,WAAW;wBAAE,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;oBAEzC,wBAAwB;oBACxB,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,OAAO,EAAE,YAAY,CAAC,CAAC;oBAC7E,IAAI,UAAU;wBAAE,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;oBAEvC,yBAAyB;oBACzB,MAAM,oBAAoB,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;oBACzF,IAAI,oBAAoB;wBAAE,KAAK,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;gBAC7D,CAAC;YACH,CAAC;YAED,gBAAM,CAAC,IAAI,CAAC,yCAAyC,EAAE;gBACrD,YAAY,EAAE,OAAO,CAAC,YAAY;gBAClC,cAAc,EAAE,KAAK,CAAC,MAAM;aAC7B,CAAC,CAAC;YAEH,OAAO,EAAE,KAAK,EAAE,CAAC;QACnB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,8CAA8C,EAAE,KAAK,CAAC,CAAC;YACpE,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,kBAAkB,CAAC,OAAuB;QAC9C,IAAI,CAAC;YACH,gBAAM,CAAC,IAAI,CAAC,iCAAiC,EAAE;gBAC7C,YAAY,EAAE,OAAO,CAAC,YAAY;gBAClC,SAAS,EAAE,OAAO,CAAC,OAAO,CAAC,SAAS;gBACpC,WAAW,EAAE,OAAO,CAAC,OAAO,CAAC,WAAW,EAAE,MAAM,IAAI,CAAC;aACtD,CAAC,CAAC;YAEH,MAAM,KAAK,GAAc,EAAE,CAAC;YAC5B,MAAM,YAAY,GAAG,OAAO,CAAC,QAAQ,IAAI,EAAE,CAAC;YAE5C,mBAAmB;YACnB,MAAM,OAAO,GAAG,YAAY,CAAC,OAAO;gBAClC,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,6CAAoB,CAAC,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;YAExG,yBAAyB;YACzB,KAAK,MAAM,UAAU,IAAI,OAAO,CAAC,OAAO,CAAC,WAAW,IAAI,EAAE,EAAE,CAAC;gBAC3D,IAAI,UAAU,CAAC,YAAY,KAAK,gBAAgB,EAAE,CAAC;oBACjD,8BAA8B;oBAC9B,MAAM,mBAAmB,GAAG,MAAM,IAAI,CAAC,yBAAyB,CAAC,UAAU,EAAE,OAAO,EAAE,YAAY,CAAC,CAAC;oBACpG,IAAI,mBAAmB;wBAAE,KAAK,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;oBAEzD,wBAAwB;oBACxB,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;oBAChF,IAAI,aAAa;wBAAE,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;oBAE7C,2BAA2B;oBAC3B,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;oBACxE,IAAI,QAAQ;wBAAE,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACrC,CAAC;YACH,CAAC;YAED,gBAAM,CAAC,IAAI,CAAC,iCAAiC,EAAE;gBAC7C,YAAY,EAAE,OAAO,CAAC,YAAY;gBAClC,cAAc,EAAE,KAAK,CAAC,MAAM;aAC7B,CAAC,CAAC;YAEH,OAAO,EAAE,KAAK,EAAE,CAAC;QACnB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,sCAAsC,EAAE,KAAK,CAAC,CAAC;YAC5D,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED,kCAAkC;IAClC,0BAA0B;IAC1B,kCAAkC;IAElC;;OAEG;IACK,KAAK,CAAC,iBAAiB,CAAC,OAAgB,EAAE,YAAiB;QACjE,IAAI,CAAC;YACH,MAAM,UAAU,GAAG,YAAY,CAAC,UAAU,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;YACrF,MAAM,YAAY,GAAG,YAAY,CAAC,YAAY,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;YAEzF,MAAM,WAAW,GAAa,EAAE,CAAC;YAEjC,qBAAqB;YACrB,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC,CAAM,EAAE,EAAE,CAC7B,CAAC,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC,MAAW,EAAE,EAAE,CACnC,MAAM,CAAC,IAAI,KAAK,KAAK,IAAI,MAAM,CAAC,OAAO,EAAE,WAAW,EAAE,CAAC,QAAQ,CAAC,UAAU,CAAC,CAC5E,CACF,EAAE,CAAC;gBACF,WAAW,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;YACtC,CAAC;YAED,yBAAyB;YACzB,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC,CAAM,EAAE,EAAE,CAC7B,CAAC,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC,MAAW,EAAE,EAAE,CACnC,MAAM,CAAC,IAAI,KAAK,KAAK,IAAI,MAAM,CAAC,OAAO,EAAE,WAAW,EAAE,CAAC,QAAQ,CAAC,cAAc,CAAC,CAChF,CACF,EAAE,CAAC;gBACF,WAAW,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;YACnC,CAAC;YAED,qCAAqC;YACrC,MAAM,QAAQ,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC,CAAM,EAAE,EAAE,CAC5C,CAAC,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,SAAS,CAAC,CACvD,CAAC;YAEF,IAAI,QAAQ,EAAE,SAAS,EAAE,CAAC;gBACxB,MAAM,QAAQ,GAAG,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAM,EAAE,EAAE,CAClD,CAAC,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC,MAAW,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,KAAK,QAAQ,CAAC,CAChE,EAAE,aAAa,EAAE,KAAK,CAAC;gBAExB,MAAM,SAAS,GAAG,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAM,EAAE,EAAE,CACnD,CAAC,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC,MAAW,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,KAAK,QAAQ,CAAC,CAChE,EAAE,aAAa,EAAE,KAAK,CAAC;gBAExB,IAAI,QAAQ,IAAI,GAAG,IAAI,SAAS,IAAI,EAAE,EAAE,CAAC;oBACvC,WAAW,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;gBAC9C,CAAC;YACH,CAAC;YAED,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC;gBAAE,OAAO,IAAI,CAAC;YAE1C,OAAO;gBACL,OAAO,EAAE,eAAe,WAAW,CAAC,MAAM,4BAA4B;gBACtE,MAAM,EAAE,4BAA4B,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,4DAA4D;gBACtH,SAAS,EAAE,SAAS;gBACpB,MAAM,EAAE;oBACN,KAAK,EAAE,0BAA0B;oBACjC,GAAG,EAAE,0DAA0D;iBAChE;gBACD,WAAW,EAAE,CAAC;wBACZ,KAAK,EAAE,sCAAsC;wBAC7C,OAAO,EAAE,CAAC;gCACR,IAAI,EAAE,QAAQ;gCACd,WAAW,EAAE,6CAA6C;gCAC1D,QAAQ,EAAE;oCACR,YAAY,EAAE,UAAU;oCACxB,MAAM,EAAE,OAAO;oCACf,MAAM,EAAE,MAAM;oCACd,OAAO,EAAE,EAAE,SAAS,EAAE,WAAW,OAAO,CAAC,EAAE,EAAE,EAAE;oCAC/C,KAAK,EAAE,6BAA6B;oCACpC,WAAW,EAAE,gDAAgD,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;iCACtF;6BACF,CAAC;qBACH,CAAC;aACH,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,gCAAgC,EAAE,KAAK,CAAC,CAAC;YACtD,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,mBAAmB,CAAC,OAAgB,EAAE,YAAiB;QACnE,IAAI,CAAC;YACH,IAAI,CAAC,OAAO,CAAC,SAAS;gBAAE,OAAO,IAAI,CAAC;YAEpC,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,WAAW,EAAE,CAAC;YACjF,MAAM,eAAe,GAAa,EAAE,CAAC;YAErC,sCAAsC;YACtC,IAAI,GAAG,IAAI,EAAE,EAAE,CAAC;gBACd,eAAe,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAC;gBACpD,eAAe,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;YAChD,CAAC;YAED,IAAI,GAAG,IAAI,EAAE,IAAI,OAAO,CAAC,MAAM,KAAK,QAAQ,EAAE,CAAC;gBAC7C,eAAe,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;YAChD,CAAC;YAED,IAAI,GAAG,IAAI,EAAE,EAAE,CAAC;gBACd,eAAe,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;gBACjD,eAAe,CAAC,IAAI,CAAC,8BAA8B,CAAC,CAAC;YACvD,CAAC;YAED,IAAI,eAAe,CAAC,MAAM,KAAK,CAAC;gBAAE,OAAO,IAAI,CAAC;YAE9C,OAAO;gBACL,OAAO,EAAE,GAAG,eAAe,CAAC,MAAM,oCAAoC;gBACtE,MAAM,EAAE,gCAAgC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;gBACpE,SAAS,EAAE,MAAM;gBACjB,MAAM,EAAE;oBACN,KAAK,EAAE,qCAAqC;oBAC5C,GAAG,EAAE,0DAA0D;iBAChE;gBACD,KAAK,EAAE,CAAC;wBACN,KAAK,EAAE,sCAAsC;wBAC7C,GAAG,EAAE,0DAA0D;wBAC/D,IAAI,EAAE,UAAU;qBACjB,CAAC;aACH,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,kCAAkC,EAAE,KAAK,CAAC,CAAC;YACxD,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,gBAAgB,CAAC,OAAgB,EAAE,YAAiB;QAChE,IAAI,CAAC;YACH,MAAM,UAAU,GAAG,YAAY,CAAC,UAAU,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;YACrF,MAAM,WAAW,GAAG,YAAY,CAAC,WAAW,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;YACvF,MAAM,YAAY,GAAG,YAAY,CAAC,YAAY,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;YAEzF,MAAM,QAAQ,GAAa,EAAE,CAAC;YAE9B,qCAAqC;YACrC,MAAM,WAAW,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC,CAAM,EAAE,EAAE,CAC7C,CAAC,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC,MAAW,EAAE,EAAE,CACnC,MAAM,CAAC,OAAO,EAAE,WAAW,EAAE,CAAC,QAAQ,CAAC,UAAU,CAAC,CACnD,CACF,CAAC;YAEF,IAAI,WAAW,EAAE,CAAC;gBAChB,MAAM,MAAM,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC,CAAM,EAAE,EAAE,CAC1C,CAAC,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,QAAQ,IAAI,CAAC,CAAC,OAAO,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC,CACpF,CAAC;gBAEF,IAAI,CAAC,MAAM,EAAE,CAAC;oBACZ,QAAQ,CAAC,IAAI,CAAC,uCAAuC,CAAC,CAAC;gBACzD,CAAC;YACH,CAAC;YAED,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC;gBAAE,OAAO,IAAI,CAAC;YAEvC,OAAO;gBACL,OAAO,EAAE,GAAG,QAAQ,CAAC,MAAM,yBAAyB;gBACpD,MAAM,EAAE,cAAc,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;gBAC3C,SAAS,EAAE,SAAS;gBACpB,MAAM,EAAE;oBACN,KAAK,EAAE,4BAA4B;oBACnC,GAAG,EAAE,oDAAoD;iBAC1D;aACF,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,+BAA+B,EAAE,KAAK,CAAC,CAAC;YACrD,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,qBAAqB,CACjC,iBAAoC,EACpC,YAAiB;QAEjB,IAAI,CAAC;YACH,MAAM,kBAAkB,GAAG,YAAY,CAAC,WAAW,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;YAE9F,oFAAoF;YACpF,MAAM,aAAa,GAAG,iBAAiB,CAAC,yBAAyB,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC;YAExF,IAAI,CAAC,aAAa;gBAAE,OAAO,IAAI,CAAC;YAEhC,yCAAyC;YACzC,MAAM,YAAY,GAAG,IAAI,CAAC,yBAAyB,CAAC,aAAa,EAAE,kBAAkB,CAAC,CAAC;YAEvF,IAAI,YAAY,CAAC,MAAM,KAAK,CAAC;gBAAE,OAAO,IAAI,CAAC;YAE3C,OAAO;gBACL,OAAO,EAAE,GAAG,YAAY,CAAC,MAAM,yCAAyC;gBACxE,MAAM,EAAE,2BAA2B,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;gBAC5D,SAAS,EAAE,UAAU;gBACrB,MAAM,EAAE;oBACN,KAAK,EAAE,iCAAiC;oBACxC,GAAG,EAAE,4DAA4D;iBAClE;gBACD,WAAW,EAAE,CAAC;wBACZ,KAAK,EAAE,8CAA8C;wBACrD,OAAO,EAAE,CAAC;gCACR,IAAI,EAAE,QAAQ;gCACd,WAAW,EAAE,qCAAqC;gCAClD,UAAU,EAAE,iBAAiB,CAAC,EAAE;6BACjC,CAAC;qBACH,CAAC;aACH,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,oCAAoC,EAAE,KAAK,CAAC,CAAC;YAC1D,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,kBAAkB,CAC9B,iBAAoC,EACpC,OAAgB,EAChB,YAAiB;QAEjB,IAAI,CAAC;YACH,MAAM,SAAS,GAAG,YAAY,CAAC,SAAS,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;YACnF,MAAM,aAAa,GAAG,iBAAiB,CAAC,yBAAyB,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC;YAExF,IAAI,CAAC,aAAa,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC;gBAAE,OAAO,IAAI,CAAC;YAE1D,0CAA0C;YAC1C,MAAM,iBAAiB,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC,OAAY,EAAE,EAAE,CAC1D,OAAO,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC,MAAW,EAAE,EAAE,CACzC,MAAM,CAAC,OAAO,EAAE,WAAW,EAAE,CAAC,QAAQ,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC;gBACnE,aAAa,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,EAAE,WAAW,EAAE,CAAC,CACpE,CACF,CAAC;YAEF,IAAI,iBAAiB,CAAC,MAAM,KAAK,CAAC;gBAAE,OAAO,IAAI,CAAC;YAEhD,OAAO;gBACL,OAAO,EAAE,+CAA+C;gBACxD,MAAM,EAAE,qCAAqC,aAAa,eAAe,iBAAiB,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,EAAE,aAAa,EAAE,CAAC,CAAC,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC,EAAE,OAAO,IAAI,SAAS,EAAE;gBACpK,SAAS,EAAE,UAAU;gBACrB,MAAM,EAAE;oBACN,KAAK,EAAE,wBAAwB;iBAChC;gBACD,WAAW,EAAE,CAAC;wBACZ,KAAK,EAAE,6BAA6B;wBACpC,OAAO,EAAE,CAAC;gCACR,IAAI,EAAE,QAAQ;gCACd,WAAW,EAAE,qCAAqC;gCAClD,UAAU,EAAE,iBAAiB,CAAC,EAAE;6BACjC,CAAC;qBACH,CAAC;aACH,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,iCAAiC,EAAE,KAAK,CAAC,CAAC;YACvD,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IAED,kCAAkC;IAClC,kBAAkB;IAClB,kCAAkC;IAElC;;OAEG;IACK,yBAAyB,CAAC,aAAqB,EAAE,kBAAyB;QAChF,MAAM,YAAY,GAAa,EAAE,CAAC;QAElC,qFAAqF;QACrF,MAAM,iBAAiB,GAAgC;YACrD,UAAU,EAAE,CAAC,SAAS,EAAE,WAAW,EAAE,UAAU,CAAC;YAChD,SAAS,EAAE,CAAC,YAAY,EAAE,gBAAgB,CAAC;YAC3C,WAAW,EAAE,EAAE,EAAE,6BAA6B;SAC/C,CAAC;QAEF,MAAM,WAAW,GAAG,aAAa,CAAC,WAAW,EAAE,CAAC;QAEhD,kBAAkB,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;YAC/B,MAAM,cAAc,GAAG,GAAG,CAAC,yBAAyB,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC,EAAE,OAAO,EAAE,WAAW,EAAE,CAAC;YAE1F,IAAI,cAAc,EAAE,CAAC;gBACnB,4DAA4D;gBAC5D,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE,aAAa,CAAC,EAAE,EAAE;oBAClE,IAAI,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,CACjE,cAAc,CAAC,QAAQ,CAAC,WAAW,CAAC,CACrC,EAAE,CAAC;wBACF,YAAY,CAAC,IAAI,CAAC,GAAG,aAAa,MAAM,cAAc,EAAE,CAAC,CAAC;oBAC5D,CAAC;gBACH,CAAC,CAAC,CAAC;YACL,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,OAAO,YAAY,CAAC;IACtB,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,WAAW,CACvB,iBAAoC,EACpC,OAAgB,EAChB,YAAiB;QAEjB,0EAA0E;QAC1E,mDAAmD;QACnD,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,sBAAsB,CAClC,iBAAoC,EACpC,YAAiB;QAEjB,qEAAqE;QACrE,oDAAoD;QACpD,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,yBAAyB,CACrC,cAA8B,EAC9B,OAAgB,EAChB,YAAiB;QAEjB,qEAAqE;QACrE,8CAA8C;QAC9C,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,oBAAoB,CAChC,cAA8B,EAC9B,YAAiB;QAEjB,6CAA6C;QAC7C,6CAA6C;QAC7C,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,sBAAsB,CAClC,cAA8B,EAC9B,OAAgB;QAEhB,mDAAmD;QACnD,iDAAiD;QACjD,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,eAAe;QACnB,IAAI,CAAC;YACH,OAAO;gBACL,MAAM,EAAE,IAAI;gBACZ,OAAO,EAAE;oBACP,iBAAiB,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM;oBACvC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;iBAC7E;aACF,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO;gBACL,MAAM,EAAE,MAAM;gBACd,OAAO,EAAE,EAAE,KAAK,EAAE,IAAA,6BAAe,EAAC,KAAK,CAAC,EAAE;aAC3C,CAAC;QACJ,CAAC;IACH,CAAC;CACF;AAxmBD,0CAwmBC;AAED,4BAA4B;AACf,QAAA,eAAe,GAAG,IAAI,eAAe,EAAE,CAAC","names":[],"sources":["/Users/rodrigo/claude-projects/OmniCare/backend/src/services/cds-hooks.service.ts"],"sourcesContent":["import axios from 'axios';\n\nimport { fhirResourcesService } from './fhir-resources.service';\nimport { medplumService } from './medplum.service';\n\nimport config from '@/config';\nimport {\n  CDSHookRequest,\n  CDSHookResponse,\n  CDSCard,\n  CDSSuggestion,\n  CDSAction,\n  CDSHookContext,\n  Patient,\n  Encounter,\n  MedicationRequest,\n  ServiceRequest,\n  Observation,\n} from '@/types/fhir';\nimport logger from '@/utils/logger';\nimport { getErrorMessage } from '@/utils/error.utils';\n\ninterface CDSService {\n  hook: string;\n  name: string;\n  title: string;\n  description: string;\n  id: string;\n  prefetch?: { [key: string]: string };\n  usageRequirements?: string;\n}\n\n/**\n * Clinical Decision Support Hooks Service\n * Implements CDS Hooks specification for clinical decision support\n * integration with EHR workflows\n */\nexport class CDSHooksService {\n  private readonly services: CDSService[] = [\n    {\n      hook: 'patient-view',\n      name: 'Patient Risk Assessment',\n      title: 'OmniCare Patient Risk Assessment',\n      description: 'Assess patient risk factors and provide preventive care recommendations',\n      id: 'omnicare-patient-risk-assessment',\n      prefetch: {\n        patient: 'Patient/{{context.patientId}}',\n        conditions: 'Condition?patient={{context.patientId}}',\n        medications: 'MedicationRequest?patient={{context.patientId}}&status=active',\n        observations: 'Observation?patient={{context.patientId}}&category=vital-signs&_sort=-date&_count=10',\n        allergies: 'AllergyIntolerance?patient={{context.patientId}}',\n      },\n    },\n    {\n      hook: 'medication-prescribe',\n      name: 'Medication Safety Check',\n      title: 'OmniCare Medication Safety Check',\n      description: 'Check for drug interactions, allergies, and dosing recommendations',\n      id: 'omnicare-medication-safety',\n      prefetch: {\n        patient: 'Patient/{{context.patientId}}',\n        medications: 'MedicationRequest?patient={{context.patientId}}&status=active',\n        allergies: 'AllergyIntolerance?patient={{context.patientId}}',\n        conditions: 'Condition?patient={{context.patientId}}',\n        observations: 'Observation?patient={{context.patientId}}&category=laboratory&_sort=-date&_count=5',\n      },\n    },\n    {\n      hook: 'order-review',\n      name: 'Order Appropriateness',\n      title: 'OmniCare Order Appropriateness Check',\n      description: 'Review diagnostic and therapeutic orders for appropriateness',\n      id: 'omnicare-order-review',\n      prefetch: {\n        patient: 'Patient/{{context.patientId}}',\n        conditions: 'Condition?patient={{context.patientId}}',\n        observations: 'Observation?patient={{context.patientId}}&_sort=-date&_count=20',\n        procedures: 'Procedure?patient={{context.patientId}}&_sort=-date&_count=10',\n      },\n    },\n    {\n      hook: 'encounter-start',\n      name: 'Encounter Preparation',\n      title: 'OmniCare Encounter Preparation',\n      description: 'Prepare encounter with relevant patient information and care gaps',\n      id: 'omnicare-encounter-prep',\n      prefetch: {\n        patient: 'Patient/{{context.patientId}}',\n        encounter: 'Encounter/{{context.encounterId}}',\n        conditions: 'Condition?patient={{context.patientId}}',\n        medications: 'MedicationRequest?patient={{context.patientId}}&status=active',\n        carePlans: 'CarePlan?patient={{context.patientId}}&status=active',\n      },\n    },\n    {\n      hook: 'encounter-discharge',\n      name: 'Discharge Planning',\n      title: 'OmniCare Discharge Planning',\n      description: 'Assist with discharge planning and follow-up care coordination',\n      id: 'omnicare-discharge-planning',\n      prefetch: {\n        patient: 'Patient/{{context.patientId}}',\n        encounter: 'Encounter/{{context.encounterId}}',\n        conditions: 'Condition?patient={{context.patientId}}',\n        medications: 'MedicationRequest?patient={{context.patientId}}&status=active',\n        procedures: 'Procedure?patient={{context.patientId}}&encounter={{context.encounterId}}',\n      },\n    },\n  ];\n\n  // ===============================\n  // CDS HOOKS DISCOVERY\n  // ===============================\n\n  /**\n   * Get CDS services discovery document\n   */\n  getDiscoveryDocument(): { services: CDSService[] } {\n    logger.info('CDS Hooks discovery document requested');\n    \n    return {\n      services: this.services.map(service => ({\n        ...service,\n        usageRequirements: service.usageRequirements || 'User must be authenticated with appropriate clinical permissions',\n      })),\n    };\n  }\n\n  // ===============================\n  // CDS HOOKS EXECUTION\n  // ===============================\n\n  /**\n   * Execute patient-view hook\n   */\n  async executePatientView(request: CDSHookRequest): Promise<CDSHookResponse> {\n    try {\n      logger.info('Executing patient-view CDS hook', {\n        hookInstance: request.hookInstance,\n        patientId: request.context.patientId,\n      });\n\n      const cards: CDSCard[] = [];\n      const prefetchData = request.prefetch || {};\n\n      // Get patient data\n      const patient = prefetchData.patient || \n        (request.context.patientId ? await fhirResourcesService.getPatient(request.context.patientId) : null);\n\n      // Risk assessment card\n      const riskCard = await this.assessPatientRisk(patient, prefetchData);\n      if (riskCard) cards.push(riskCard);\n\n      // Preventive care card\n      const preventiveCard = await this.checkPreventiveCare(patient, prefetchData);\n      if (preventiveCard) cards.push(preventiveCard);\n\n      // Care gaps card\n      const careGapsCard = await this.identifyCareGaps(patient, prefetchData);\n      if (careGapsCard) cards.push(careGapsCard);\n\n      logger.info('Patient-view CDS hook completed', {\n        hookInstance: request.hookInstance,\n        cardsGenerated: cards.length,\n      });\n\n      return { cards };\n    } catch (error) {\n      logger.error('Failed to execute patient-view hook:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Execute medication-prescribe hook\n   */\n  async executeMedicationPrescribe(request: CDSHookRequest): Promise<CDSHookResponse> {\n    try {\n      logger.info('Executing medication-prescribe CDS hook', {\n        hookInstance: request.hookInstance,\n        patientId: request.context.patientId,\n        draftOrders: request.context.draftOrders?.length || 0,\n      });\n\n      const cards: CDSCard[] = [];\n      const prefetchData = request.prefetch || {};\n\n      // Get patient data\n      const patient = prefetchData.patient || \n        (request.context.patientId ? await fhirResourcesService.getPatient(request.context.patientId) : null);\n\n      // Check each draft medication order\n      for (const draftOrder of request.context.draftOrders || []) {\n        if (draftOrder.resourceType === 'MedicationRequest') {\n          // Drug interaction check\n          const interactionCard = await this.checkDrugInteractions(draftOrder, prefetchData);\n          if (interactionCard) cards.push(interactionCard);\n\n          // Allergy check\n          const allergyCard = await this.checkDrugAllergies(draftOrder, patient, prefetchData);\n          if (allergyCard) cards.push(allergyCard);\n\n          // Dosing recommendation\n          const dosingCard = await this.checkDosing(draftOrder, patient, prefetchData);\n          if (dosingCard) cards.push(dosingCard);\n\n          // Contraindication check\n          const contraindicationCard = await this.checkContraindications(draftOrder, prefetchData);\n          if (contraindicationCard) cards.push(contraindicationCard);\n        }\n      }\n\n      logger.info('Medication-prescribe CDS hook completed', {\n        hookInstance: request.hookInstance,\n        cardsGenerated: cards.length,\n      });\n\n      return { cards };\n    } catch (error) {\n      logger.error('Failed to execute medication-prescribe hook:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Execute order-review hook\n   */\n  async executeOrderReview(request: CDSHookRequest): Promise<CDSHookResponse> {\n    try {\n      logger.info('Executing order-review CDS hook', {\n        hookInstance: request.hookInstance,\n        patientId: request.context.patientId,\n        draftOrders: request.context.draftOrders?.length || 0,\n      });\n\n      const cards: CDSCard[] = [];\n      const prefetchData = request.prefetch || {};\n\n      // Get patient data\n      const patient = prefetchData.patient || \n        (request.context.patientId ? await fhirResourcesService.getPatient(request.context.patientId) : null);\n\n      // Check each draft order\n      for (const draftOrder of request.context.draftOrders || []) {\n        if (draftOrder.resourceType === 'ServiceRequest') {\n          // Order appropriateness check\n          const appropriatenessCard = await this.checkOrderAppropriateness(draftOrder, patient, prefetchData);\n          if (appropriatenessCard) cards.push(appropriatenessCard);\n\n          // Duplicate order check\n          const duplicateCard = await this.checkDuplicateOrders(draftOrder, prefetchData);\n          if (duplicateCard) cards.push(duplicateCard);\n\n          // Cost-effectiveness check\n          const costCard = await this.checkCostEffectiveness(draftOrder, patient);\n          if (costCard) cards.push(costCard);\n        }\n      }\n\n      logger.info('Order-review CDS hook completed', {\n        hookInstance: request.hookInstance,\n        cardsGenerated: cards.length,\n      });\n\n      return { cards };\n    } catch (error) {\n      logger.error('Failed to execute order-review hook:', error);\n      throw error;\n    }\n  }\n\n  // ===============================\n  // CLINICAL DECISION LOGIC\n  // ===============================\n\n  /**\n   * Assess patient risk factors\n   */\n  private async assessPatientRisk(patient: Patient, prefetchData: any): Promise<CDSCard | null> {\n    try {\n      const conditions = prefetchData.conditions?.entry?.map((e: any) => e.resource) || [];\n      const observations = prefetchData.observations?.entry?.map((e: any) => e.resource) || [];\n\n      const riskFactors: string[] = [];\n      \n      // Check for diabetes\n      if (conditions.some((c: any) => \n        c.code?.coding?.some((coding: any) => \n          coding.code === 'E11' || coding.display?.toLowerCase().includes('diabetes')\n        )\n      )) {\n        riskFactors.push('Type 2 Diabetes');\n      }\n\n      // Check for hypertension\n      if (conditions.some((c: any) => \n        c.code?.coding?.some((coding: any) => \n          coding.code === 'I10' || coding.display?.toLowerCase().includes('hypertension')\n        )\n      )) {\n        riskFactors.push('Hypertension');\n      }\n\n      // Check vital signs for risk factors\n      const latestBP = observations.find((o: any) => \n        o.code?.coding?.some((c: any) => c.code === '85354-9')\n      );\n      \n      if (latestBP?.component) {\n        const systolic = latestBP.component.find((c: any) => \n          c.code?.coding?.some((coding: any) => coding.code === '8480-6')\n        )?.valueQuantity?.value;\n        \n        const diastolic = latestBP.component.find((c: any) => \n          c.code?.coding?.some((coding: any) => coding.code === '8462-4')\n        )?.valueQuantity?.value;\n\n        if (systolic >= 140 || diastolic >= 90) {\n          riskFactors.push('Elevated Blood Pressure');\n        }\n      }\n\n      if (riskFactors.length === 0) return null;\n\n      return {\n        summary: `Patient has ${riskFactors.length} identified risk factor(s)`,\n        detail: `Risk factors identified: ${riskFactors.join(', ')}. Consider preventive interventions and closer monitoring.`,\n        indicator: 'warning',\n        source: {\n          label: 'OmniCare Risk Assessment',\n          url: 'https://omnicare.com/clinical-guidelines/risk-assessment',\n        },\n        suggestions: [{\n          label: 'Review care plan for risk management',\n          actions: [{\n            type: 'create',\n            description: 'Create care plan for risk factor management',\n            resource: {\n              resourceType: 'CarePlan',\n              status: 'draft',\n              intent: 'plan',\n              subject: { reference: `Patient/${patient.id}` },\n              title: 'Risk Factor Management Plan',\n              description: `Management plan for identified risk factors: ${riskFactors.join(', ')}`,\n            },\n          }],\n        }],\n      };\n    } catch (error) {\n      logger.error('Failed to assess patient risk:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Check preventive care recommendations\n   */\n  private async checkPreventiveCare(patient: Patient, prefetchData: any): Promise<CDSCard | null> {\n    try {\n      if (!patient.birthDate) return null;\n\n      const age = new Date().getFullYear() - new Date(patient.birthDate).getFullYear();\n      const recommendations: string[] = [];\n\n      // Age-based screening recommendations\n      if (age >= 50) {\n        recommendations.push('Colorectal cancer screening');\n        recommendations.push('Annual wellness visit');\n      }\n\n      if (age >= 40 && patient.gender === 'female') {\n        recommendations.push('Mammography screening');\n      }\n\n      if (age >= 65) {\n        recommendations.push('Pneumococcal vaccination');\n        recommendations.push('Annual influenza vaccination');\n      }\n\n      if (recommendations.length === 0) return null;\n\n      return {\n        summary: `${recommendations.length} preventive care recommendation(s)`,\n        detail: `Recommended preventive care: ${recommendations.join(', ')}`,\n        indicator: 'info',\n        source: {\n          label: 'OmniCare Preventive Care Guidelines',\n          url: 'https://omnicare.com/clinical-guidelines/preventive-care',\n        },\n        links: [{\n          label: 'View full preventive care guidelines',\n          url: 'https://omnicare.com/clinical-guidelines/preventive-care',\n          type: 'absolute',\n        }],\n      };\n    } catch (error) {\n      logger.error('Failed to check preventive care:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Identify care gaps\n   */\n  private async identifyCareGaps(patient: Patient, prefetchData: any): Promise<CDSCard | null> {\n    try {\n      const conditions = prefetchData.conditions?.entry?.map((e: any) => e.resource) || [];\n      const medications = prefetchData.medications?.entry?.map((e: any) => e.resource) || [];\n      const observations = prefetchData.observations?.entry?.map((e: any) => e.resource) || [];\n\n      const careGaps: string[] = [];\n\n      // Check for diabetes management gaps\n      const hasDiabetes = conditions.some((c: any) => \n        c.code?.coding?.some((coding: any) => \n          coding.display?.toLowerCase().includes('diabetes')\n        )\n      );\n\n      if (hasDiabetes) {\n        const hasA1C = observations.some((o: any) => \n          o.code?.coding?.some((c: any) => c.code === '4548-4' || c.display?.includes('A1C'))\n        );\n        \n        if (!hasA1C) {\n          careGaps.push('Missing HbA1c monitoring for diabetes');\n        }\n      }\n\n      if (careGaps.length === 0) return null;\n\n      return {\n        summary: `${careGaps.length} care gap(s) identified`,\n        detail: `Care gaps: ${careGaps.join(', ')}`,\n        indicator: 'warning',\n        source: {\n          label: 'OmniCare Care Gap Analysis',\n          url: 'https://omnicare.com/clinical-guidelines/care-gaps',\n        },\n      };\n    } catch (error) {\n      logger.error('Failed to identify care gaps:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Check for drug interactions\n   */\n  private async checkDrugInteractions(\n    medicationRequest: MedicationRequest, \n    prefetchData: any\n  ): Promise<CDSCard | null> {\n    try {\n      const currentMedications = prefetchData.medications?.entry?.map((e: any) => e.resource) || [];\n      \n      // This is a simplified example - in practice, you'd use a drug interaction database\n      const newMedication = medicationRequest.medicationCodeableConcept?.coding?.[0]?.display;\n      \n      if (!newMedication) return null;\n\n      // Example interaction check (simplified)\n      const interactions = this.checkForKnownInteractions(newMedication, currentMedications);\n      \n      if (interactions.length === 0) return null;\n\n      return {\n        summary: `${interactions.length} potential drug interaction(s) detected`,\n        detail: `Potential interactions: ${interactions.join(', ')}`,\n        indicator: 'critical',\n        source: {\n          label: 'OmniCare Drug Interaction Check',\n          url: 'https://omnicare.com/clinical-guidelines/drug-interactions',\n        },\n        suggestions: [{\n          label: 'Review interaction and consider alternatives',\n          actions: [{\n            type: 'delete',\n            description: 'Remove problematic medication order',\n            resourceId: medicationRequest.id,\n          }],\n        }],\n      };\n    } catch (error) {\n      logger.error('Failed to check drug interactions:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Check for drug allergies\n   */\n  private async checkDrugAllergies(\n    medicationRequest: MedicationRequest,\n    patient: Patient,\n    prefetchData: any\n  ): Promise<CDSCard | null> {\n    try {\n      const allergies = prefetchData.allergies?.entry?.map((e: any) => e.resource) || [];\n      const newMedication = medicationRequest.medicationCodeableConcept?.coding?.[0]?.display;\n      \n      if (!newMedication || allergies.length === 0) return null;\n\n      // Check for allergen matches (simplified)\n      const matchingAllergies = allergies.filter((allergy: any) => \n        allergy.code?.coding?.some((coding: any) => \n          coding.display?.toLowerCase().includes(newMedication.toLowerCase()) ||\n          newMedication.toLowerCase().includes(coding.display?.toLowerCase())\n        )\n      );\n\n      if (matchingAllergies.length === 0) return null;\n\n      return {\n        summary: 'ALLERGY ALERT: Patient has documented allergy',\n        detail: `Patient has documented allergy to ${newMedication}. Reaction: ${matchingAllergies[0].reaction?.[0]?.manifestation?.[0]?.coding?.[0]?.display || 'Unknown'}`,\n        indicator: 'critical',\n        source: {\n          label: 'OmniCare Allergy Check',\n        },\n        suggestions: [{\n          label: 'Cancel order due to allergy',\n          actions: [{\n            type: 'delete',\n            description: 'Remove order due to patient allergy',\n            resourceId: medicationRequest.id,\n          }],\n        }],\n      };\n    } catch (error) {\n      logger.error('Failed to check drug allergies:', error);\n      return null;\n    }\n  }\n\n  // ===============================\n  // UTILITY METHODS\n  // ===============================\n\n  /**\n   * Simplified drug interaction checking\n   */\n  private checkForKnownInteractions(newMedication: string, currentMedications: any[]): string[] {\n    const interactions: string[] = [];\n    \n    // This is a very simplified example - in practice, use a comprehensive drug database\n    const knownInteractions: { [key: string]: string[] } = {\n      'warfarin': ['aspirin', 'ibuprofen', 'naproxen'],\n      'digoxin': ['furosemide', 'spironolactone'],\n      'metformin': [], // Add interactions as needed\n    };\n\n    const newMedLower = newMedication.toLowerCase();\n    \n    currentMedications.forEach(med => {\n      const currentMedName = med.medicationCodeableConcept?.coding?.[0]?.display?.toLowerCase();\n      \n      if (currentMedName) {\n        // Check if new medication interacts with current medication\n        Object.entries(knownInteractions).forEach(([drug, interactsWith]) => {\n          if (newMedLower.includes(drug) && interactsWith.some(interaction => \n            currentMedName.includes(interaction)\n          )) {\n            interactions.push(`${newMedication} + ${currentMedName}`);\n          }\n        });\n      }\n    });\n\n    return interactions;\n  }\n\n  /**\n   * Simplified dosing check\n   */\n  private async checkDosing(\n    medicationRequest: MedicationRequest,\n    patient: Patient,\n    prefetchData: any\n  ): Promise<CDSCard | null> {\n    // This would implement dosing algorithms based on patient characteristics\n    // For now, return null (no dosing recommendations)\n    return null;\n  }\n\n  /**\n   * Check contraindications\n   */\n  private async checkContraindications(\n    medicationRequest: MedicationRequest,\n    prefetchData: any\n  ): Promise<CDSCard | null> {\n    // This would check for contraindications based on patient conditions\n    // For now, return null (no contraindications found)\n    return null;\n  }\n\n  /**\n   * Check order appropriateness\n   */\n  private async checkOrderAppropriateness(\n    serviceRequest: ServiceRequest,\n    patient: Patient,\n    prefetchData: any\n  ): Promise<CDSCard | null> {\n    // This would implement clinical guidelines for order appropriateness\n    // For now, return null (order is appropriate)\n    return null;\n  }\n\n  /**\n   * Check for duplicate orders\n   */\n  private async checkDuplicateOrders(\n    serviceRequest: ServiceRequest,\n    prefetchData: any\n  ): Promise<CDSCard | null> {\n    // This would check for recent similar orders\n    // For now, return null (no duplicates found)\n    return null;\n  }\n\n  /**\n   * Check cost-effectiveness\n   */\n  private async checkCostEffectiveness(\n    serviceRequest: ServiceRequest,\n    patient: Patient\n  ): Promise<CDSCard | null> {\n    // This would implement cost-effectiveness analysis\n    // For now, return null (order is cost-effective)\n    return null;\n  }\n\n  /**\n   * Get health status\n   */\n  async getHealthStatus(): Promise<{ status: string; details: any }> {\n    try {\n      return {\n        status: 'UP',\n        details: {\n          servicesAvailable: this.services.length,\n          services: this.services.map(s => ({ id: s.id, hook: s.hook, name: s.name })),\n        },\n      };\n    } catch (error) {\n      return {\n        status: 'DOWN',\n        details: { error: getErrorMessage(error) },\n      };\n    }\n  }\n}\n\n// Export singleton instance\nexport const cdsHooksService = new CDSHooksService();"],"version":3}