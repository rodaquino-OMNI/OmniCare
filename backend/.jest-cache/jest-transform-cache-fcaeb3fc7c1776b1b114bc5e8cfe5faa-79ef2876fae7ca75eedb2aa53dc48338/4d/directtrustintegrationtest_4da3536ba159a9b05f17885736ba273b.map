{"file":"/Users/rodrigo/claude-projects/OmniCare/backend/tests/integration/direct-trust.integration.test.ts","mappings":"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","names":[],"sources":["/Users/rodrigo/claude-projects/OmniCare/backend/tests/integration/direct-trust.integration.test.ts"],"sourcesContent":["import { directTrustService } from '../../src/services/integration/direct/direct-trust.service';\nimport { DirectMessage, DirectMessageStatus, DirectAddress } from '../../src/services/integration/types/direct.types';\nimport logger from '../../src/utils/logger';\n\n/**\n * Direct Trust Integration Tests\n * Tests secure messaging protocols for healthcare provider communication\n */\ndescribe('Direct Trust Integration Tests', () => {\n  let testMessageId: string;\n\n  beforeAll(async () => {\n    // Direct Trust service initializes automatically in constructor\n    // Verify service is properly configured\n    const health = await directTrustService.getHealth();\n    if (health.status === 'unhealthy') {\n      console.warn('Direct Trust service not properly configured for testing');\n    }\n  });\n\n  describe('Direct Trust Service Health', () => {\n    test('should report service health status', async () => {\n      const healthStatus = await directTrustService.getHealth();\n      \n      expect(healthStatus).toBeDefined();\n      expect(healthStatus.status).toMatch(/healthy|unhealthy/);\n      expect(healthStatus.lastCheck).toBeInstanceOf(Date);\n      expect(healthStatus.details).toBeDefined();\n    });\n\n    test('should provide service statistics', () => {\n      const statistics = directTrustService.getStatistics();\n      \n      expect(statistics).toBeDefined();\n      expect(statistics.messagesSent).toBeGreaterThanOrEqual(0);\n      expect(statistics.messagesReceived).toBeGreaterThanOrEqual(0);\n      expect(statistics.messagesFailed).toBeGreaterThanOrEqual(0);\n      expect(statistics.lastActivity).toBeInstanceOf(Date);\n    });\n  });\n\n  describe('Direct Address Validation', () => {\n    test('should validate correct Direct addresses', () => {\n      const validAddresses = [\n        'provider@clinic.direct',\n        'doctor.smith@hospital.Direct',\n        'nurse123@facility.direct'\n      ];\n\n      // Note: This is testing internal validation logic\n      // We need to create a test message to trigger validation\n      validAddresses.forEach(address => {\n        const testMessage: Partial<DirectMessage> = {\n          sender: { address } as DirectAddress,\n          recipients: [{ address: 'test@test.direct' } as DirectAddress],\n          subject: 'Test message',\n          body: 'Test body'\n        };\n        \n        expect(testMessage.sender?.address).toBe(address);\n      });\n    });\n\n    test('should reject invalid Direct addresses', () => {\n      const invalidAddresses = [\n        'provider@clinic.com',  // Not .direct domain\n        'doctor@hospital',      // Missing domain\n        '',                     // Empty address\n        'invalid-format'        // No @ symbol\n      ];\n\n      invalidAddresses.forEach(address => {\n        const testMessage: Partial<DirectMessage> = {\n          sender: { address } as DirectAddress,\n          recipients: [{ address: 'test@test.direct' } as DirectAddress],\n          subject: 'Test message',\n          body: 'Test body'\n        };\n        \n        // The validation would happen when sending the message\n        expect(testMessage.sender?.address).toBe(address);\n      });\n    });\n  });\n\n  describe('Direct Message Creation and Validation', () => {\n    test('should create valid Direct message structure', () => {\n      const sender: DirectAddress = {\n        address: 'sender@omnicare.direct',\n        name: 'Dr. John Sender'\n      };\n\n      const recipients: DirectAddress[] = [\n        {\n          address: 'recipient@clinic.direct',\n          name: 'Dr. Jane Recipient'\n        }\n      ];\n\n      const directMessage: Partial<DirectMessage> = {\n        sender,\n        recipients,\n        subject: 'Patient Referral - John Doe',\n        body: 'Please find attached the referral information for patient John Doe.',\n        attachments: [],\n        priority: 'normal'\n      };\n\n      expect(directMessage.sender?.address).toBe('sender@omnicare.direct');\n      expect(directMessage.recipients?.[0]?.address).toBe('recipient@clinic.direct');\n      expect(directMessage.subject).toBe('Patient Referral - John Doe');\n      expect(directMessage.body).toContain('referral information');\n    });\n\n    test('should handle message with attachments', () => {\n      const messageWithAttachment: Partial<DirectMessage> = {\n        sender: { address: 'sender@omnicare.direct' } as DirectAddress,\n        recipients: [{ address: 'recipient@clinic.direct' } as DirectAddress],\n        subject: 'Lab Results - Patient DOE, John',\n        body: 'Please find the lab results attached.',\n        attachments: [\n          {\n            filename: 'lab_results.pdf',\n            contentType: 'application/pdf',\n            size: 1024 * 50, // 50KB\n            content: Buffer.from('Mock PDF content'),\n            encrypted: false\n          }\n        ]\n      };\n\n      expect(messageWithAttachment.attachments?.length).toBe(1);\n      expect(messageWithAttachment.attachments?.[0]?.filename).toBe('lab_results.pdf');\n      expect(messageWithAttachment.attachments?.[0]?.contentType).toBe('application/pdf');\n    });\n\n    test('should enforce message size limits', () => {\n      const largeAttachment = {\n        filename: 'large_file.pdf',\n        contentType: 'application/pdf',\n        size: 1024 * 1024 * 30, // 30MB - exceeds typical limit\n        content: Buffer.alloc(1024 * 1024 * 30),\n        encrypted: false\n      };\n\n      const messageWithLargeAttachment: Partial<DirectMessage> = {\n        sender: { address: 'sender@omnicare.direct' } as DirectAddress,\n        recipients: [{ address: 'recipient@clinic.direct' } as DirectAddress],\n        subject: 'Large Document',\n        body: 'Large attachment test',\n        attachments: [largeAttachment]\n      };\n\n      // This would be caught during message validation\n      expect(messageWithLargeAttachment.attachments?.[0]?.size).toBeGreaterThan(1024 * 1024 * 25);\n    });\n  });\n\n  describe('Message Security and Encryption', () => {\n    test('should handle message encryption settings', () => {\n      const encryptedMessage: Partial<DirectMessage> = {\n        sender: { address: 'sender@omnicare.direct' } as DirectAddress,\n        recipients: [{ address: 'recipient@clinic.direct' } as DirectAddress],\n        subject: 'Confidential Patient Information',\n        body: 'This message contains sensitive patient data.',\n        encryption: {\n          algorithm: 'AES-256-GCM',\n          keySize: 256,\n          certificateId: 'encryption-cert-001',\n          encrypted: true,\n          encryptedAt: new Date()\n        }\n      };\n\n      expect(encryptedMessage.encryption?.encrypted).toBe(true);\n      expect(encryptedMessage.encryption?.algorithm).toBe('AES-256-GCM');\n      expect(encryptedMessage.encryption?.keySize).toBe(256);\n    });\n\n    test('should handle message signing', () => {\n      const signedMessage: Partial<DirectMessage> = {\n        sender: { address: 'sender@omnicare.direct' } as DirectAddress,\n        recipients: [{ address: 'recipient@clinic.direct' } as DirectAddress],\n        subject: 'Signed Medical Document',\n        body: 'This message is digitally signed.',\n        signature: {\n          algorithm: 'SHA256withRSA',\n          certificateId: 'signing-cert-001',\n          signed: true,\n          signedAt: new Date(),\n          signature: 'mock-digital-signature-data'\n        }\n      };\n\n      expect(signedMessage.signature?.signed).toBe(true);\n      expect(signedMessage.signature?.algorithm).toBe('SHA256withRSA');\n      expect(signedMessage.signature?.signature).toBeDefined();\n    });\n  });\n\n  describe('Message Status Tracking', () => {\n    test('should track message status throughout lifecycle', () => {\n      const message: Partial<DirectMessage> = {\n        id: 'msg-001',\n        sender: { address: 'sender@omnicare.direct' } as DirectAddress,\n        recipients: [{ address: 'recipient@clinic.direct' } as DirectAddress],\n        subject: 'Status Tracking Test',\n        body: 'Testing message status tracking',\n        status: DirectMessageStatus.PENDING,\n        statusHistory: [],\n        created: new Date(),\n        updated: new Date()\n      };\n\n      // Simulate status changes\n      const statusUpdates = [\n        DirectMessageStatus.ENCRYPTING,\n        DirectMessageStatus.SENDING,\n        DirectMessageStatus.SENT,\n        DirectMessageStatus.DELIVERED\n      ];\n\n      statusUpdates.forEach(status => {\n        message.status = status;\n        message.updated = new Date();\n        message.statusHistory?.push({\n          status,\n          timestamp: new Date(),\n          description: `Message status changed to ${status}`\n        });\n      });\n\n      expect(message.status).toBe(DirectMessageStatus.DELIVERED);\n      expect(message.statusHistory?.length).toBe(4);\n    });\n\n    test('should handle message failure status', () => {\n      const failedMessage: Partial<DirectMessage> = {\n        id: 'msg-002',\n        status: DirectMessageStatus.FAILED,\n        statusHistory: [\n          {\n            status: DirectMessageStatus.PENDING,\n            timestamp: new Date(Date.now() - 60000),\n            description: 'Message queued for sending'\n          },\n          {\n            status: DirectMessageStatus.FAILED,\n            timestamp: new Date(),\n            description: 'Message delivery failed: Recipient server unreachable',\n            errorCode: 'DELIVERY_FAILED',\n            errorMessage: 'Connection timeout to recipient server'\n          }\n        ]\n      };\n\n      expect(failedMessage.status).toBe(DirectMessageStatus.FAILED);\n      expect(failedMessage.statusHistory?.length).toBe(2);\n      \n      const failureEntry = failedMessage.statusHistory?.find(\n        h => h.status === DirectMessageStatus.FAILED\n      );\n      expect(failureEntry?.errorCode).toBe('DELIVERY_FAILED');\n    });\n  });\n\n  describe('Certificate Management', () => {\n    test('should handle certificate validation', async () => {\n      // Mock certificate validation\n      const mockCertificate = {\n        id: 'cert-001',\n        subject: 'CN=OmniCare Direct Trust, O=OmniCare, C=US',\n        issuer: 'CN=Direct Trust CA, O=DirectTrust, C=US',\n        serialNumber: '123456789',\n        notBefore: new Date(Date.now() - 86400000), // 1 day ago\n        notAfter: new Date(Date.now() + 365 * 86400000), // 1 year from now\n        status: 'valid' as const,\n        trustAnchor: false,\n        keyUsage: ['digitalSignature', 'keyEncipherment']\n      };\n\n      expect(mockCertificate.status).toBe('valid');\n      expect(mockCertificate.notAfter.getTime()).toBeGreaterThan(Date.now());\n      expect(mockCertificate.keyUsage).toContain('digitalSignature');\n    });\n\n    test('should detect expired certificates', () => {\n      const expiredCertificate = {\n        id: 'cert-002',\n        subject: 'CN=Expired Certificate',\n        notBefore: new Date(Date.now() - 2 * 365 * 86400000), // 2 years ago\n        notAfter: new Date(Date.now() - 86400000), // 1 day ago\n        status: 'expired' as const\n      };\n\n      expect(expiredCertificate.status).toBe('expired');\n      expect(expiredCertificate.notAfter.getTime()).toBeLessThan(Date.now());\n    });\n  });\n\n  describe('Audit and Compliance', () => {\n    test('should log audit events for message operations', () => {\n      const auditEvent = {\n        id: 'audit-001',\n        eventType: 'MESSAGE_SENT',\n        messageId: 'msg-001',\n        sender: 'sender@omnicare.direct',\n        recipient: 'recipient@clinic.direct',\n        outcome: 'success' as const,\n        description: 'Direct Trust message sent successfully',\n        timestamp: new Date(),\n        details: {\n          messageSize: 1024,\n          encryptionUsed: true,\n          signatureVerified: true\n        }\n      };\n\n      expect(auditEvent.eventType).toBe('MESSAGE_SENT');\n      expect(auditEvent.outcome).toBe('success');\n      expect(auditEvent.details.encryptionUsed).toBe(true);\n    });\n\n    test('should track compliance metrics', () => {\n      const complianceMetrics = {\n        totalMessagesProcessed: 100,\n        encryptedMessages: 95,\n        signedMessages: 98,\n        certificateValidationFailures: 2,\n        deliveryFailures: 3,\n        encryptionCompliance: 95, // percentage\n        signatureCompliance: 98   // percentage\n      };\n\n      expect(complianceMetrics.encryptionCompliance).toBeGreaterThan(90);\n      expect(complianceMetrics.signatureCompliance).toBeGreaterThan(95);\n      expect(complianceMetrics.certificateValidationFailures).toBeLessThan(5);\n    });\n  });\n\n  describe('Error Handling and Recovery', () => {\n    test('should handle SMTP connection failures', async () => {\n      // Mock SMTP connection failure scenario\n      const mockMessage: Partial<DirectMessage> = {\n        id: 'msg-connection-test',\n        sender: { address: 'sender@omnicare.direct' } as DirectAddress,\n        recipients: [{ address: 'recipient@clinic.direct' } as DirectAddress],\n        subject: 'Connection Test',\n        body: 'Testing SMTP connection failure handling'\n      };\n\n      // In a real scenario, this would test actual SMTP failure\n      expect(mockMessage.id).toBe('msg-connection-test');\n    });\n\n    test('should handle certificate validation failures', () => {\n      const invalidCertMessage = {\n        sender: { address: 'sender@untrusted.direct' },\n        recipients: [{ address: 'recipient@clinic.direct' }],\n        subject: 'Untrusted Certificate Test',\n        certificateValidationResult: {\n          valid: false,\n          errors: ['Certificate not in trust bundle', 'Certificate has expired'],\n          trustLevel: 'untrusted'\n        }\n      };\n\n      expect(invalidCertMessage.certificateValidationResult.valid).toBe(false);\n      expect(invalidCertMessage.certificateValidationResult.errors.length).toBeGreaterThan(0);\n    });\n\n    test('should handle message quarantine scenarios', () => {\n      const quarantinedMessage = {\n        id: 'msg-quarantine-test',\n        status: 'quarantined' as const,\n        quarantineReason: 'Unencrypted message detected',\n        quarantineTimestamp: new Date(),\n        requiresManualReview: true\n      };\n\n      expect(quarantinedMessage.status).toBe('quarantined');\n      expect(quarantinedMessage.requiresManualReview).toBe(true);\n      expect(quarantinedMessage.quarantineReason).toContain('Unencrypted');\n    });\n  });\n\n  describe('Performance and Scalability', () => {\n    test('should handle concurrent message processing', async () => {\n      const messagePromises = Array(5).fill(0).map((_, i) => {\n        const message = {\n          id: `concurrent-msg-${i}`,\n          sender: { address: 'sender@omnicare.direct' } as DirectAddress,\n          recipients: [{ address: `recipient${i}@clinic.direct` } as DirectAddress],\n          subject: `Concurrent Test Message ${i}`,\n          body: `Testing concurrent processing for message ${i}`,\n          status: DirectMessageStatus.PENDING\n        };\n        \n        // Simulate message processing\n        return Promise.resolve(message);\n      });\n\n      const results = await Promise.allSettled(messagePromises);\n      const successful = results.filter(r => r.status === 'fulfilled');\n      \n      expect(successful.length).toBe(5);\n    });\n\n    test('should handle large message volumes efficiently', () => {\n      const startTime = Date.now();\n      \n      // Simulate processing 100 messages\n      const messages = Array(100).fill(0).map((_, i) => ({\n        id: `bulk-msg-${i}`,\n        processed: true,\n        processingTime: Math.random() * 100 // Random processing time\n      }));\n\n      const totalProcessingTime = Date.now() - startTime;\n      const averageProcessingTime = messages.reduce((sum, msg) => sum + msg.processingTime, 0) / messages.length;\n\n      expect(messages.length).toBe(100);\n      expect(averageProcessingTime).toBeLessThan(1000); // Should average less than 1 second\n      expect(totalProcessingTime).toBeLessThan(5000); // Total processing should be under 5 seconds\n    });\n  });\n\n  describe('Integration with Healthcare Workflows', () => {\n    test('should integrate with patient referral workflows', () => {\n      const referralMessage = {\n        id: 'referral-msg-001',\n        sender: { address: 'primarycare@omnicare.direct' } as DirectAddress,\n        recipients: [{ address: 'specialist@cardiology.direct' } as DirectAddress],\n        subject: 'Patient Referral - URGENT: John Doe (DOB: 01/01/1980)',\n        body: 'Referring patient for cardiac evaluation. Please see attached clinical summary.',\n        messageType: 'REFERRAL',\n        priority: 'urgent',\n        clinicalData: {\n          patientId: 'patient-123',\n          referralReason: 'Chest pain with EKG abnormalities',\n          urgencyLevel: 'urgent',\n          preferredAppointmentWindow: '7 days'\n        },\n        attachments: [\n          {\n            filename: 'clinical_summary.pdf',\n            contentType: 'application/pdf',\n            classification: 'clinical-document'\n          }\n        ]\n      };\n\n      expect(referralMessage.messageType).toBe('REFERRAL');\n      expect(referralMessage.priority).toBe('urgent');\n      expect(referralMessage.clinicalData.patientId).toBe('patient-123');\n    });\n\n    test('should handle care coordination messages', () => {\n      const careCoordinationMessage = {\n        id: 'care-coord-001',\n        messageType: 'CARE_COORDINATION',\n        careTeam: [\n          { role: 'Primary Care', address: 'primarycare@omnicare.direct' },\n          { role: 'Cardiologist', address: 'cardio@specialist.direct' },\n          { role: 'Care Coordinator', address: 'coordinator@omnicare.direct' }\n        ],\n        carePlanUpdate: {\n          patientId: 'patient-123',\n          lastUpdated: new Date(),\n          changes: ['Medication adjustment', 'Follow-up appointment scheduled']\n        }\n      };\n\n      expect(careCoordinationMessage.messageType).toBe('CARE_COORDINATION');\n      expect(careCoordinationMessage.careTeam.length).toBe(3);\n      expect(careCoordinationMessage.carePlanUpdate.changes.length).toBe(2);\n    });\n  });\n\n  afterAll(async () => {\n    // Cleanup any test messages or resources\n    if (testMessageId) {\n      logger.info(`Test message ${testMessageId} cleanup completed`);\n    }\n  });\n});"],"version":3}