e7bb89d0f219b41a4bb2de2db15d9cab
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const base_model_1 = require("../../../src/models/base.model");
describe('Base Model', () => {
    describe('HumanName', () => {
        describe('validateHumanName', () => {
            it('should validate a complete human name', () => {
                const validName = {
                    use: 'official',
                    text: 'Dr. John Q. Doe Jr.',
                    family: 'Doe',
                    given: ['John', 'Quincy'],
                    prefix: ['Dr.'],
                    suffix: ['Jr.'],
                    period: {
                        start: '2000-01-01',
                        end: '2024-12-31'
                    }
                };
                const result = (0, base_model_1.validateHumanName)(validName);
                expect(result.valid).toBe(true);
                expect(result.errors).toHaveLength(0);
            });
            it('should validate minimal human name', () => {
                const minimalName = {
                    family: 'Doe'
                };
                const result = (0, base_model_1.validateHumanName)(minimalName);
                expect(result.valid).toBe(true);
                expect(result.errors).toHaveLength(0);
            });
            it('should reject name without family or given name', () => {
                const invalidName = {
                    use: 'official'
                    // Missing both family and given
                };
                const result = (0, base_model_1.validateHumanName)(invalidName);
                expect(result.valid).toBe(false);
                expect(result.errors).toContain('At least family name or given name is required');
            });
            it('should reject invalid use value', () => {
                const invalidName = {
                    use: 'invalid-use',
                    family: 'Doe'
                };
                const result = (0, base_model_1.validateHumanName)(invalidName);
                expect(result.valid).toBe(false);
                expect(result.errors).toContain('Invalid name use. Must be one of: usual, official, temp, nickname, anonymous, old, maiden');
            });
            it('should validate given names array', () => {
                const nameWithGiven = {
                    given: ['John', 'Quincy', 'Middle'],
                    family: 'Doe'
                };
                const result = (0, base_model_1.validateHumanName)(nameWithGiven);
                expect(result.valid).toBe(true);
            });
            it('should reject empty given names array', () => {
                const nameWithEmptyGiven = {
                    given: [],
                    family: 'Doe'
                };
                const result = (0, base_model_1.validateHumanName)(nameWithEmptyGiven);
                expect(result.valid).toBe(false);
                expect(result.errors).toContain('Given names array cannot be empty');
            });
        });
        describe('formatHumanName', () => {
            it('should format complete human name', () => {
                const name = {
                    prefix: ['Dr.'],
                    given: ['John', 'Q.'],
                    family: 'Doe',
                    suffix: ['Jr.', 'MD']
                };
                const formatted = (0, base_model_1.formatHumanName)(name);
                expect(formatted).toBe('Dr. John Q. Doe Jr., MD');
            });
            it('should format minimal human name', () => {
                const name = {
                    family: 'Doe'
                };
                const formatted = (0, base_model_1.formatHumanName)(name);
                expect(formatted).toBe('Doe');
            });
            it('should format name with given names only', () => {
                const name = {
                    given: ['John', 'Quincy']
                };
                const formatted = (0, base_model_1.formatHumanName)(name);
                expect(formatted).toBe('John Quincy');
            });
            it('should handle empty name parts', () => {
                const name = {
                    prefix: [],
                    given: ['John'],
                    family: 'Doe',
                    suffix: []
                };
                const formatted = (0, base_model_1.formatHumanName)(name);
                expect(formatted).toBe('John Doe');
            });
        });
    });
    describe('Address', () => {
        describe('validateAddress', () => {
            it('should validate complete address', () => {
                const validAddress = {
                    use: 'home',
                    type: 'both',
                    text: '123 Main St, Anytown, ST 12345, USA',
                    line: ['123 Main St', 'Apt 4B'],
                    city: 'Anytown',
                    district: 'Central District',
                    state: 'ST',
                    postalCode: '12345',
                    country: 'USA',
                    period: {
                        start: '2020-01-01'
                    }
                };
                const result = (0, base_model_1.validateAddress)(validAddress);
                expect(result.valid).toBe(true);
                expect(result.errors).toHaveLength(0);
            });
            it('should validate minimal address', () => {
                const minimalAddress = {
                    line: ['123 Main St'],
                    city: 'Anytown'
                };
                const result = (0, base_model_1.validateAddress)(minimalAddress);
                expect(result.valid).toBe(true);
            });
            it('should reject address without any location data', () => {
                const invalidAddress = {
                    use: 'home'
                    // Missing all address components
                };
                const result = (0, base_model_1.validateAddress)(invalidAddress);
                expect(result.valid).toBe(false);
                expect(result.errors).toContain('Address must have at least one of: text, line, city, state, postalCode, or country');
            });
            it('should reject invalid address use', () => {
                const invalidAddress = {
                    use: 'invalid-use',
                    line: ['123 Main St']
                };
                const result = (0, base_model_1.validateAddress)(invalidAddress);
                expect(result.valid).toBe(false);
                expect(result.errors).toContain('Invalid address use. Must be one of: home, work, temp, old, billing');
            });
            it('should reject invalid address type', () => {
                const invalidAddress = {
                    type: 'invalid-type',
                    line: ['123 Main St']
                };
                const result = (0, base_model_1.validateAddress)(invalidAddress);
                expect(result.valid).toBe(false);
                expect(result.errors).toContain('Invalid address type. Must be one of: postal, physical, both');
            });
            it('should validate postal code formats', () => {
                const usAddress = {
                    line: ['123 Main St'],
                    city: 'Anytown',
                    state: 'CA',
                    postalCode: '90210',
                    country: 'USA'
                };
                const result = (0, base_model_1.validateAddress)(usAddress);
                expect(result.valid).toBe(true);
            });
        });
        describe('formatAddress', () => {
            it('should format complete address', () => {
                const address = {
                    line: ['123 Main St', 'Apt 4B'],
                    city: 'Anytown',
                    state: 'ST',
                    postalCode: '12345',
                    country: 'USA'
                };
                const formatted = (0, base_model_1.formatAddress)(address);
                expect(formatted).toBe('123 Main St, Apt 4B, Anytown, ST 12345, USA');
            });
            it('should format minimal address', () => {
                const address = {
                    city: 'Anytown',
                    state: 'ST'
                };
                const formatted = (0, base_model_1.formatAddress)(address);
                expect(formatted).toBe('Anytown, ST');
            });
            it('should use text field when provided', () => {
                const address = {
                    text: 'Custom Address Format',
                    line: ['123 Main St'],
                    city: 'Anytown'
                };
                const formatted = (0, base_model_1.formatAddress)(address);
                expect(formatted).toBe('Custom Address Format');
            });
        });
    });
    describe('ContactPoint', () => {
        describe('validateContactPoint', () => {
            it('should validate phone contact point', () => {
                const phoneContact = {
                    system: 'phone',
                    value: '+1-555-123-4567',
                    use: 'home',
                    rank: 1,
                    period: {
                        start: '2020-01-01'
                    }
                };
                const result = (0, base_model_1.validateContactPoint)(phoneContact);
                expect(result.valid).toBe(true);
            });
            it('should validate email contact point', () => {
                const emailContact = {
                    system: 'email',
                    value: 'john.doe@example.com',
                    use: 'work'
                };
                const result = (0, base_model_1.validateContactPoint)(emailContact);
                expect(result.valid).toBe(true);
            });
            it('should reject invalid contact system', () => {
                const invalidContact = {
                    system: 'invalid-system',
                    value: 'test-value'
                };
                const result = (0, base_model_1.validateContactPoint)(invalidContact);
                expect(result.valid).toBe(false);
                expect(result.errors).toContain('Invalid contact system. Must be one of: phone, fax, email, pager, url, sms, other');
            });
            it('should reject invalid email format', () => {
                const invalidEmail = {
                    system: 'email',
                    value: 'invalid-email-format'
                };
                const result = (0, base_model_1.validateContactPoint)(invalidEmail);
                expect(result.valid).toBe(false);
                expect(result.errors).toContain('Invalid email format');
            });
            it('should validate phone number formats', () => {
                const phoneFormats = [
                    '+1-555-123-4567',
                    '(555) 123-4567',
                    '555-123-4567',
                    '5551234567'
                ];
                phoneFormats.forEach(phoneNumber => {
                    const contact = {
                        system: 'phone',
                        value: phoneNumber
                    };
                    const result = (0, base_model_1.validateContactPoint)(contact);
                    expect(result.valid).toBe(true);
                });
            });
            it('should reject missing value', () => {
                const noValueContact = {
                    system: 'phone'
                    // Missing value
                };
                const result = (0, base_model_1.validateContactPoint)(noValueContact);
                expect(result.valid).toBe(false);
                expect(result.errors).toContain('Contact point value is required');
            });
        });
    });
    describe('CodeableConcept', () => {
        describe('validateCodeableConcept', () => {
            it('should validate complete codeable concept', () => {
                const concept = {
                    coding: [
                        {
                            system: 'http://loinc.org',
                            version: '2.69',
                            code: '8310-5',
                            display: 'Body temperature',
                            userSelected: true
                        }
                    ],
                    text: 'Body temperature measurement'
                };
                const result = (0, base_model_1.validateCodeableConcept)(concept);
                expect(result.valid).toBe(true);
            });
            it('should validate concept with multiple codings', () => {
                const concept = {
                    coding: [
                        {
                            system: 'http://loinc.org',
                            code: '8310-5',
                            display: 'Body temperature'
                        },
                        {
                            system: 'http://snomed.info/sct',
                            code: '386725007',
                            display: 'Body temperature'
                        }
                    ]
                };
                const result = (0, base_model_1.validateCodeableConcept)(concept);
                expect(result.valid).toBe(true);
            });
            it('should validate concept with text only', () => {
                const concept = {
                    text: 'Custom measurement description'
                };
                const result = (0, base_model_1.validateCodeableConcept)(concept);
                expect(result.valid).toBe(true);
            });
            it('should reject concept without coding or text', () => {
                const concept = {};
                const result = (0, base_model_1.validateCodeableConcept)(concept);
                expect(result.valid).toBe(false);
                expect(result.errors).toContain('CodeableConcept must have either coding or text');
            });
            it('should reject coding without system or code', () => {
                const concept = {
                    coding: [
                        {
                            display: 'Body temperature'
                            // Missing system and code
                        }
                    ]
                };
                const result = (0, base_model_1.validateCodeableConcept)(concept);
                expect(result.valid).toBe(false);
                expect(result.errors).toContain('Coding must have either system+code or display');
            });
        });
    });
    describe('Identifier', () => {
        describe('validateIdentifier', () => {
            it('should validate complete identifier', () => {
                const identifier = {
                    use: 'official',
                    type: {
                        coding: [{
                                system: 'http://terminology.hl7.org/CodeSystem/v2-0203',
                                code: 'MR',
                                display: 'Medical Record Number'
                            }]
                    },
                    system: 'http://hospital.example.org/mrn',
                    value: 'MRN123456',
                    period: {
                        start: '2020-01-01'
                    },
                    assigner: {
                        reference: 'Organization/hospital-1',
                        display: 'Example Hospital'
                    }
                };
                const result = (0, base_model_1.validateIdentifier)(identifier);
                expect(result.valid).toBe(true);
            });
            it('should validate minimal identifier', () => {
                const identifier = {
                    value: 'ID123456'
                };
                const result = (0, base_model_1.validateIdentifier)(identifier);
                expect(result.valid).toBe(true);
            });
            it('should reject identifier without value', () => {
                const identifier = {
                    system: 'http://example.org/id'
                    // Missing value
                };
                const result = (0, base_model_1.validateIdentifier)(identifier);
                expect(result.valid).toBe(false);
                expect(result.errors).toContain('Identifier value is required');
            });
            it('should validate common identifier types', () => {
                const mrn = {
                    type: {
                        coding: [{
                                system: 'http://terminology.hl7.org/CodeSystem/v2-0203',
                                code: 'MR'
                            }]
                    },
                    value: 'MRN123'
                };
                const ssn = {
                    type: {
                        coding: [{
                                system: 'http://terminology.hl7.org/CodeSystem/v2-0203',
                                code: 'SS'
                            }]
                    },
                    value: '123-45-6789'
                };
                expect((0, base_model_1.validateIdentifier)(mrn).valid).toBe(true);
                expect((0, base_model_1.validateIdentifier)(ssn).valid).toBe(true);
            });
        });
    });
    describe('Period', () => {
        describe('validatePeriod', () => {
            it('should validate complete period', () => {
                const period = {
                    start: '2020-01-01T00:00:00Z',
                    end: '2024-12-31T23:59:59Z'
                };
                const result = (0, base_model_1.validatePeriod)(period);
                expect(result.valid).toBe(true);
            });
            it('should validate period with start only', () => {
                const period = {
                    start: '2020-01-01T00:00:00Z'
                };
                const result = (0, base_model_1.validatePeriod)(period);
                expect(result.valid).toBe(true);
            });
            it('should validate period with end only', () => {
                const period = {
                    end: '2024-12-31T23:59:59Z'
                };
                const result = (0, base_model_1.validatePeriod)(period);
                expect(result.valid).toBe(true);
            });
            it('should reject period where end is before start', () => {
                const period = {
                    start: '2024-12-31T23:59:59Z',
                    end: '2020-01-01T00:00:00Z'
                };
                const result = (0, base_model_1.validatePeriod)(period);
                expect(result.valid).toBe(false);
                expect(result.errors).toContain('Period end must be after start');
            });
            it('should reject period with invalid date formats', () => {
                const period = {
                    start: 'invalid-date',
                    end: '2024-12-31'
                };
                const result = (0, base_model_1.validatePeriod)(period);
                expect(result.valid).toBe(false);
                expect(result.errors).toContain('Invalid start date format');
            });
            it('should reject empty period', () => {
                const period = {};
                const result = (0, base_model_1.validatePeriod)(period);
                expect(result.valid).toBe(false);
                expect(result.errors).toContain('Period must have start and/or end');
            });
        });
    });
    describe('Reference', () => {
        describe('validateReference', () => {
            it('should validate reference with reference field', () => {
                const reference = {
                    reference: 'Patient/patient-123',
                    display: 'John Doe'
                };
                const result = (0, base_model_1.validateReference)(reference);
                expect(result.valid).toBe(true);
            });
            it('should validate reference with identifier', () => {
                const reference = {
                    identifier: {
                        system: 'http://hospital.example.org/mrn',
                        value: 'MRN123456'
                    },
                    display: 'John Doe'
                };
                const result = (0, base_model_1.validateReference)(reference);
                expect(result.valid).toBe(true);
            });
            it('should reject reference without reference or identifier', () => {
                const reference = {
                    display: 'John Doe'
                    // Missing reference and identifier
                };
                const result = (0, base_model_1.validateReference)(reference);
                expect(result.valid).toBe(false);
                expect(result.errors).toContain('Reference must have either reference or identifier');
            });
            it('should validate FHIR reference formats', () => {
                const validReferences = [
                    'Patient/123',
                    'Practitioner/456',
                    'Organization/789',
                    'http://example.org/fhir/Patient/123'
                ];
                validReferences.forEach(ref => {
                    const reference = { reference: ref };
                    const result = (0, base_model_1.validateReference)(reference);
                    expect(result.valid).toBe(true);
                });
            });
        });
        describe('createReference', () => {
            it('should create reference from resource type and ID', () => {
                const reference = (0, base_model_1.createReference)('Patient', 'patient-123');
                expect(reference).toEqual({
                    reference: 'Patient/patient-123'
                });
            });
            it('should create reference with display', () => {
                const reference = (0, base_model_1.createReference)('Patient', 'patient-123', 'John Doe');
                expect(reference).toEqual({
                    reference: 'Patient/patient-123',
                    display: 'John Doe'
                });
            });
        });
    });
    describe('Quantity', () => {
        describe('validateQuantity', () => {
            it('should validate complete quantity', () => {
                const quantity = {
                    value: 98.6,
                    comparator: '<',
                    unit: 'degrees Fahrenheit',
                    system: 'http://unitsofmeasure.org',
                    code: '[degF]'
                };
                const result = (0, base_model_1.validateQuantity)(quantity);
                expect(result.valid).toBe(true);
            });
            it('should validate minimal quantity', () => {
                const quantity = {
                    value: 100
                };
                const result = (0, base_model_1.validateQuantity)(quantity);
                expect(result.valid).toBe(true);
            });
            it('should reject quantity without value', () => {
                const quantity = {
                    unit: 'kg'
                    // Missing value
                };
                const result = (0, base_model_1.validateQuantity)(quantity);
                expect(result.valid).toBe(false);
                expect(result.errors).toContain('Quantity value is required');
            });
            it('should reject invalid comparator', () => {
                const quantity = {
                    value: 100,
                    comparator: 'invalid'
                };
                const result = (0, base_model_1.validateQuantity)(quantity);
                expect(result.valid).toBe(false);
                expect(result.errors).toContain('Invalid comparator. Must be one of: <, <=, >=, >');
            });
            it('should validate common unit systems', () => {
                const ucumQuantity = {
                    value: 70,
                    unit: 'kg',
                    system: 'http://unitsofmeasure.org',
                    code: 'kg'
                };
                const result = (0, base_model_1.validateQuantity)(ucumQuantity);
                expect(result.valid).toBe(true);
            });
        });
    });
    describe('Edge Cases and Error Handling', () => {
        it('should handle null values gracefully', () => {
            expect(() => (0, base_model_1.validateHumanName)(null)).not.toThrow();
            expect(() => (0, base_model_1.validateAddress)(null)).not.toThrow();
            expect(() => (0, base_model_1.validateContactPoint)(null)).not.toThrow();
        });
        it('should handle undefined values gracefully', () => {
            expect(() => (0, base_model_1.validateHumanName)(undefined)).not.toThrow();
            expect(() => (0, base_model_1.validateAddress)(undefined)).not.toThrow();
            expect(() => (0, base_model_1.validateContactPoint)(undefined)).not.toThrow();
        });
        it('should handle empty objects', () => {
            const emptyName = (0, base_model_1.validateHumanName)({});
            const emptyAddress = (0, base_model_1.validateAddress)({});
            const emptyContact = (0, base_model_1.validateContactPoint)({});
            expect(emptyName.valid).toBe(false);
            expect(emptyAddress.valid).toBe(false);
            expect(emptyContact.valid).toBe(false);
        });
        it('should handle very long strings', () => {
            const longString = 'a'.repeat(10000);
            const nameWithLongFamily = {
                family: longString
            };
            const result = (0, base_model_1.validateHumanName)(nameWithLongFamily);
            expect(result.valid).toBe(false);
            expect(result.errors).toContain('Family name exceeds maximum length');
        });
        it('should handle special characters in names', () => {
            const nameWithSpecialChars = {
                family: "O'Connell-Smith",
                given: ['Jean-Luc', "D'Artagnan"]
            };
            const result = (0, base_model_1.validateHumanName)(nameWithSpecialChars);
            expect(result.valid).toBe(true);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,