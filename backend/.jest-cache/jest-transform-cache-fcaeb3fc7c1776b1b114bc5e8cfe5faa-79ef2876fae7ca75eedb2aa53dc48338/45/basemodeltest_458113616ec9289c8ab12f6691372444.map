{"file":"/Users/rodrigo/claude-projects/OmniCare/backend/tests/unit/models/base.model.test.ts","mappings":"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","names":[],"sources":["/Users/rodrigo/claude-projects/OmniCare/backend/tests/unit/models/base.model.test.ts"],"sourcesContent":["import {\n  HumanName,\n  Address,\n  ContactPoint,\n  CodeableConcept,\n  Identifier,\n  Period,\n  Reference,\n  Quantity,\n  validateHumanName,\n  validateAddress,\n  validateContactPoint,\n  validateCodeableConcept,\n  validateIdentifier,\n  validatePeriod,\n  validateReference,\n  validateQuantity,\n  createReference,\n  formatHumanName,\n  formatAddress\n} from '../../../src/models/base.model';\n\ndescribe('Base Model', () => {\n  describe('HumanName', () => {\n    describe('validateHumanName', () => {\n      it('should validate a complete human name', () => {\n        const validName: HumanName = {\n          use: 'official',\n          text: 'Dr. John Q. Doe Jr.',\n          family: 'Doe',\n          given: ['John', 'Quincy'],\n          prefix: ['Dr.'],\n          suffix: ['Jr.'],\n          period: {\n            start: '2000-01-01',\n            end: '2024-12-31'\n          }\n        };\n\n        const result = validateHumanName(validName);\n        expect(result.valid).toBe(true);\n        expect(result.errors).toHaveLength(0);\n      });\n\n      it('should validate minimal human name', () => {\n        const minimalName: HumanName = {\n          family: 'Doe'\n        };\n\n        const result = validateHumanName(minimalName);\n        expect(result.valid).toBe(true);\n        expect(result.errors).toHaveLength(0);\n      });\n\n      it('should reject name without family or given name', () => {\n        const invalidName: HumanName = {\n          use: 'official'\n          // Missing both family and given\n        };\n\n        const result = validateHumanName(invalidName);\n        expect(result.valid).toBe(false);\n        expect(result.errors).toContain('At least family name or given name is required');\n      });\n\n      it('should reject invalid use value', () => {\n        const invalidName: HumanName = {\n          use: 'invalid-use' as any,\n          family: 'Doe'\n        };\n\n        const result = validateHumanName(invalidName);\n        expect(result.valid).toBe(false);\n        expect(result.errors).toContain('Invalid name use. Must be one of: usual, official, temp, nickname, anonymous, old, maiden');\n      });\n\n      it('should validate given names array', () => {\n        const nameWithGiven: HumanName = {\n          given: ['John', 'Quincy', 'Middle'],\n          family: 'Doe'\n        };\n\n        const result = validateHumanName(nameWithGiven);\n        expect(result.valid).toBe(true);\n      });\n\n      it('should reject empty given names array', () => {\n        const nameWithEmptyGiven: HumanName = {\n          given: [],\n          family: 'Doe'\n        };\n\n        const result = validateHumanName(nameWithEmptyGiven);\n        expect(result.valid).toBe(false);\n        expect(result.errors).toContain('Given names array cannot be empty');\n      });\n    });\n\n    describe('formatHumanName', () => {\n      it('should format complete human name', () => {\n        const name: HumanName = {\n          prefix: ['Dr.'],\n          given: ['John', 'Q.'],\n          family: 'Doe',\n          suffix: ['Jr.', 'MD']\n        };\n\n        const formatted = formatHumanName(name);\n        expect(formatted).toBe('Dr. John Q. Doe Jr., MD');\n      });\n\n      it('should format minimal human name', () => {\n        const name: HumanName = {\n          family: 'Doe'\n        };\n\n        const formatted = formatHumanName(name);\n        expect(formatted).toBe('Doe');\n      });\n\n      it('should format name with given names only', () => {\n        const name: HumanName = {\n          given: ['John', 'Quincy']\n        };\n\n        const formatted = formatHumanName(name);\n        expect(formatted).toBe('John Quincy');\n      });\n\n      it('should handle empty name parts', () => {\n        const name: HumanName = {\n          prefix: [],\n          given: ['John'],\n          family: 'Doe',\n          suffix: []\n        };\n\n        const formatted = formatHumanName(name);\n        expect(formatted).toBe('John Doe');\n      });\n    });\n  });\n\n  describe('Address', () => {\n    describe('validateAddress', () => {\n      it('should validate complete address', () => {\n        const validAddress: Address = {\n          use: 'home',\n          type: 'both',\n          text: '123 Main St, Anytown, ST 12345, USA',\n          line: ['123 Main St', 'Apt 4B'],\n          city: 'Anytown',\n          district: 'Central District',\n          state: 'ST',\n          postalCode: '12345',\n          country: 'USA',\n          period: {\n            start: '2020-01-01'\n          }\n        };\n\n        const result = validateAddress(validAddress);\n        expect(result.valid).toBe(true);\n        expect(result.errors).toHaveLength(0);\n      });\n\n      it('should validate minimal address', () => {\n        const minimalAddress: Address = {\n          line: ['123 Main St'],\n          city: 'Anytown'\n        };\n\n        const result = validateAddress(minimalAddress);\n        expect(result.valid).toBe(true);\n      });\n\n      it('should reject address without any location data', () => {\n        const invalidAddress: Address = {\n          use: 'home'\n          // Missing all address components\n        };\n\n        const result = validateAddress(invalidAddress);\n        expect(result.valid).toBe(false);\n        expect(result.errors).toContain('Address must have at least one of: text, line, city, state, postalCode, or country');\n      });\n\n      it('should reject invalid address use', () => {\n        const invalidAddress: Address = {\n          use: 'invalid-use' as any,\n          line: ['123 Main St']\n        };\n\n        const result = validateAddress(invalidAddress);\n        expect(result.valid).toBe(false);\n        expect(result.errors).toContain('Invalid address use. Must be one of: home, work, temp, old, billing');\n      });\n\n      it('should reject invalid address type', () => {\n        const invalidAddress: Address = {\n          type: 'invalid-type' as any,\n          line: ['123 Main St']\n        };\n\n        const result = validateAddress(invalidAddress);\n        expect(result.valid).toBe(false);\n        expect(result.errors).toContain('Invalid address type. Must be one of: postal, physical, both');\n      });\n\n      it('should validate postal code formats', () => {\n        const usAddress: Address = {\n          line: ['123 Main St'],\n          city: 'Anytown',\n          state: 'CA',\n          postalCode: '90210',\n          country: 'USA'\n        };\n\n        const result = validateAddress(usAddress);\n        expect(result.valid).toBe(true);\n      });\n    });\n\n    describe('formatAddress', () => {\n      it('should format complete address', () => {\n        const address: Address = {\n          line: ['123 Main St', 'Apt 4B'],\n          city: 'Anytown',\n          state: 'ST',\n          postalCode: '12345',\n          country: 'USA'\n        };\n\n        const formatted = formatAddress(address);\n        expect(formatted).toBe('123 Main St, Apt 4B, Anytown, ST 12345, USA');\n      });\n\n      it('should format minimal address', () => {\n        const address: Address = {\n          city: 'Anytown',\n          state: 'ST'\n        };\n\n        const formatted = formatAddress(address);\n        expect(formatted).toBe('Anytown, ST');\n      });\n\n      it('should use text field when provided', () => {\n        const address: Address = {\n          text: 'Custom Address Format',\n          line: ['123 Main St'],\n          city: 'Anytown'\n        };\n\n        const formatted = formatAddress(address);\n        expect(formatted).toBe('Custom Address Format');\n      });\n    });\n  });\n\n  describe('ContactPoint', () => {\n    describe('validateContactPoint', () => {\n      it('should validate phone contact point', () => {\n        const phoneContact: ContactPoint = {\n          system: 'phone',\n          value: '+1-555-123-4567',\n          use: 'home',\n          rank: 1,\n          period: {\n            start: '2020-01-01'\n          }\n        };\n\n        const result = validateContactPoint(phoneContact);\n        expect(result.valid).toBe(true);\n      });\n\n      it('should validate email contact point', () => {\n        const emailContact: ContactPoint = {\n          system: 'email',\n          value: 'john.doe@example.com',\n          use: 'work'\n        };\n\n        const result = validateContactPoint(emailContact);\n        expect(result.valid).toBe(true);\n      });\n\n      it('should reject invalid contact system', () => {\n        const invalidContact: ContactPoint = {\n          system: 'invalid-system' as any,\n          value: 'test-value'\n        };\n\n        const result = validateContactPoint(invalidContact);\n        expect(result.valid).toBe(false);\n        expect(result.errors).toContain('Invalid contact system. Must be one of: phone, fax, email, pager, url, sms, other');\n      });\n\n      it('should reject invalid email format', () => {\n        const invalidEmail: ContactPoint = {\n          system: 'email',\n          value: 'invalid-email-format'\n        };\n\n        const result = validateContactPoint(invalidEmail);\n        expect(result.valid).toBe(false);\n        expect(result.errors).toContain('Invalid email format');\n      });\n\n      it('should validate phone number formats', () => {\n        const phoneFormats = [\n          '+1-555-123-4567',\n          '(555) 123-4567',\n          '555-123-4567',\n          '5551234567'\n        ];\n\n        phoneFormats.forEach(phoneNumber => {\n          const contact: ContactPoint = {\n            system: 'phone',\n            value: phoneNumber\n          };\n\n          const result = validateContactPoint(contact);\n          expect(result.valid).toBe(true);\n        });\n      });\n\n      it('should reject missing value', () => {\n        const noValueContact: ContactPoint = {\n          system: 'phone'\n          // Missing value\n        };\n\n        const result = validateContactPoint(noValueContact);\n        expect(result.valid).toBe(false);\n        expect(result.errors).toContain('Contact point value is required');\n      });\n    });\n  });\n\n  describe('CodeableConcept', () => {\n    describe('validateCodeableConcept', () => {\n      it('should validate complete codeable concept', () => {\n        const concept: CodeableConcept = {\n          coding: [\n            {\n              system: 'http://loinc.org',\n              version: '2.69',\n              code: '8310-5',\n              display: 'Body temperature',\n              userSelected: true\n            }\n          ],\n          text: 'Body temperature measurement'\n        };\n\n        const result = validateCodeableConcept(concept);\n        expect(result.valid).toBe(true);\n      });\n\n      it('should validate concept with multiple codings', () => {\n        const concept: CodeableConcept = {\n          coding: [\n            {\n              system: 'http://loinc.org',\n              code: '8310-5',\n              display: 'Body temperature'\n            },\n            {\n              system: 'http://snomed.info/sct',\n              code: '386725007',\n              display: 'Body temperature'\n            }\n          ]\n        };\n\n        const result = validateCodeableConcept(concept);\n        expect(result.valid).toBe(true);\n      });\n\n      it('should validate concept with text only', () => {\n        const concept: CodeableConcept = {\n          text: 'Custom measurement description'\n        };\n\n        const result = validateCodeableConcept(concept);\n        expect(result.valid).toBe(true);\n      });\n\n      it('should reject concept without coding or text', () => {\n        const concept: CodeableConcept = {};\n\n        const result = validateCodeableConcept(concept);\n        expect(result.valid).toBe(false);\n        expect(result.errors).toContain('CodeableConcept must have either coding or text');\n      });\n\n      it('should reject coding without system or code', () => {\n        const concept: CodeableConcept = {\n          coding: [\n            {\n              display: 'Body temperature'\n              // Missing system and code\n            }\n          ]\n        };\n\n        const result = validateCodeableConcept(concept);\n        expect(result.valid).toBe(false);\n        expect(result.errors).toContain('Coding must have either system+code or display');\n      });\n    });\n  });\n\n  describe('Identifier', () => {\n    describe('validateIdentifier', () => {\n      it('should validate complete identifier', () => {\n        const identifier: Identifier = {\n          use: 'official',\n          type: {\n            coding: [{\n              system: 'http://terminology.hl7.org/CodeSystem/v2-0203',\n              code: 'MR',\n              display: 'Medical Record Number'\n            }]\n          },\n          system: 'http://hospital.example.org/mrn',\n          value: 'MRN123456',\n          period: {\n            start: '2020-01-01'\n          },\n          assigner: {\n            reference: 'Organization/hospital-1',\n            display: 'Example Hospital'\n          }\n        };\n\n        const result = validateIdentifier(identifier);\n        expect(result.valid).toBe(true);\n      });\n\n      it('should validate minimal identifier', () => {\n        const identifier: Identifier = {\n          value: 'ID123456'\n        };\n\n        const result = validateIdentifier(identifier);\n        expect(result.valid).toBe(true);\n      });\n\n      it('should reject identifier without value', () => {\n        const identifier: Identifier = {\n          system: 'http://example.org/id'\n          // Missing value\n        };\n\n        const result = validateIdentifier(identifier);\n        expect(result.valid).toBe(false);\n        expect(result.errors).toContain('Identifier value is required');\n      });\n\n      it('should validate common identifier types', () => {\n        const mrn: Identifier = {\n          type: {\n            coding: [{\n              system: 'http://terminology.hl7.org/CodeSystem/v2-0203',\n              code: 'MR'\n            }]\n          },\n          value: 'MRN123'\n        };\n\n        const ssn: Identifier = {\n          type: {\n            coding: [{\n              system: 'http://terminology.hl7.org/CodeSystem/v2-0203',\n              code: 'SS'\n            }]\n          },\n          value: '123-45-6789'\n        };\n\n        expect(validateIdentifier(mrn).valid).toBe(true);\n        expect(validateIdentifier(ssn).valid).toBe(true);\n      });\n    });\n  });\n\n  describe('Period', () => {\n    describe('validatePeriod', () => {\n      it('should validate complete period', () => {\n        const period: Period = {\n          start: '2020-01-01T00:00:00Z',\n          end: '2024-12-31T23:59:59Z'\n        };\n\n        const result = validatePeriod(period);\n        expect(result.valid).toBe(true);\n      });\n\n      it('should validate period with start only', () => {\n        const period: Period = {\n          start: '2020-01-01T00:00:00Z'\n        };\n\n        const result = validatePeriod(period);\n        expect(result.valid).toBe(true);\n      });\n\n      it('should validate period with end only', () => {\n        const period: Period = {\n          end: '2024-12-31T23:59:59Z'\n        };\n\n        const result = validatePeriod(period);\n        expect(result.valid).toBe(true);\n      });\n\n      it('should reject period where end is before start', () => {\n        const period: Period = {\n          start: '2024-12-31T23:59:59Z',\n          end: '2020-01-01T00:00:00Z'\n        };\n\n        const result = validatePeriod(period);\n        expect(result.valid).toBe(false);\n        expect(result.errors).toContain('Period end must be after start');\n      });\n\n      it('should reject period with invalid date formats', () => {\n        const period: Period = {\n          start: 'invalid-date',\n          end: '2024-12-31'\n        };\n\n        const result = validatePeriod(period);\n        expect(result.valid).toBe(false);\n        expect(result.errors).toContain('Invalid start date format');\n      });\n\n      it('should reject empty period', () => {\n        const period: Period = {};\n\n        const result = validatePeriod(period);\n        expect(result.valid).toBe(false);\n        expect(result.errors).toContain('Period must have start and/or end');\n      });\n    });\n  });\n\n  describe('Reference', () => {\n    describe('validateReference', () => {\n      it('should validate reference with reference field', () => {\n        const reference: Reference = {\n          reference: 'Patient/patient-123',\n          display: 'John Doe'\n        };\n\n        const result = validateReference(reference);\n        expect(result.valid).toBe(true);\n      });\n\n      it('should validate reference with identifier', () => {\n        const reference: Reference = {\n          identifier: {\n            system: 'http://hospital.example.org/mrn',\n            value: 'MRN123456'\n          },\n          display: 'John Doe'\n        };\n\n        const result = validateReference(reference);\n        expect(result.valid).toBe(true);\n      });\n\n      it('should reject reference without reference or identifier', () => {\n        const reference: Reference = {\n          display: 'John Doe'\n          // Missing reference and identifier\n        };\n\n        const result = validateReference(reference);\n        expect(result.valid).toBe(false);\n        expect(result.errors).toContain('Reference must have either reference or identifier');\n      });\n\n      it('should validate FHIR reference formats', () => {\n        const validReferences = [\n          'Patient/123',\n          'Practitioner/456',\n          'Organization/789',\n          'http://example.org/fhir/Patient/123'\n        ];\n\n        validReferences.forEach(ref => {\n          const reference: Reference = { reference: ref };\n          const result = validateReference(reference);\n          expect(result.valid).toBe(true);\n        });\n      });\n    });\n\n    describe('createReference', () => {\n      it('should create reference from resource type and ID', () => {\n        const reference = createReference('Patient', 'patient-123');\n        expect(reference).toEqual({\n          reference: 'Patient/patient-123'\n        });\n      });\n\n      it('should create reference with display', () => {\n        const reference = createReference('Patient', 'patient-123', 'John Doe');\n        expect(reference).toEqual({\n          reference: 'Patient/patient-123',\n          display: 'John Doe'\n        });\n      });\n    });\n  });\n\n  describe('Quantity', () => {\n    describe('validateQuantity', () => {\n      it('should validate complete quantity', () => {\n        const quantity: Quantity = {\n          value: 98.6,\n          comparator: '<',\n          unit: 'degrees Fahrenheit',\n          system: 'http://unitsofmeasure.org',\n          code: '[degF]'\n        };\n\n        const result = validateQuantity(quantity);\n        expect(result.valid).toBe(true);\n      });\n\n      it('should validate minimal quantity', () => {\n        const quantity: Quantity = {\n          value: 100\n        };\n\n        const result = validateQuantity(quantity);\n        expect(result.valid).toBe(true);\n      });\n\n      it('should reject quantity without value', () => {\n        const quantity: Quantity = {\n          unit: 'kg'\n          // Missing value\n        };\n\n        const result = validateQuantity(quantity);\n        expect(result.valid).toBe(false);\n        expect(result.errors).toContain('Quantity value is required');\n      });\n\n      it('should reject invalid comparator', () => {\n        const quantity: Quantity = {\n          value: 100,\n          comparator: 'invalid' as any\n        };\n\n        const result = validateQuantity(quantity);\n        expect(result.valid).toBe(false);\n        expect(result.errors).toContain('Invalid comparator. Must be one of: <, <=, >=, >');\n      });\n\n      it('should validate common unit systems', () => {\n        const ucumQuantity: Quantity = {\n          value: 70,\n          unit: 'kg',\n          system: 'http://unitsofmeasure.org',\n          code: 'kg'\n        };\n\n        const result = validateQuantity(ucumQuantity);\n        expect(result.valid).toBe(true);\n      });\n    });\n  });\n\n  describe('Edge Cases and Error Handling', () => {\n    it('should handle null values gracefully', () => {\n      expect(() => validateHumanName(null as any)).not.toThrow();\n      expect(() => validateAddress(null as any)).not.toThrow();\n      expect(() => validateContactPoint(null as any)).not.toThrow();\n    });\n\n    it('should handle undefined values gracefully', () => {\n      expect(() => validateHumanName(undefined as any)).not.toThrow();\n      expect(() => validateAddress(undefined as any)).not.toThrow();\n      expect(() => validateContactPoint(undefined as any)).not.toThrow();\n    });\n\n    it('should handle empty objects', () => {\n      const emptyName = validateHumanName({});\n      const emptyAddress = validateAddress({});\n      const emptyContact = validateContactPoint({});\n\n      expect(emptyName.valid).toBe(false);\n      expect(emptyAddress.valid).toBe(false);\n      expect(emptyContact.valid).toBe(false);\n    });\n\n    it('should handle very long strings', () => {\n      const longString = 'a'.repeat(10000);\n      \n      const nameWithLongFamily: HumanName = {\n        family: longString\n      };\n\n      const result = validateHumanName(nameWithLongFamily);\n      expect(result.valid).toBe(false);\n      expect(result.errors).toContain('Family name exceeds maximum length');\n    });\n\n    it('should handle special characters in names', () => {\n      const nameWithSpecialChars: HumanName = {\n        family: \"O'Connell-Smith\",\n        given: ['Jean-Luc', \"D'Artagnan\"]\n      };\n\n      const result = validateHumanName(nameWithSpecialChars);\n      expect(result.valid).toBe(true);\n    });\n  });\n});"],"version":3}