91e628fa6188229493159742b302c333
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateOmniCarePatient = validateOmniCarePatient;
exports.validateEmergencyContact = validateEmergencyContact;
exports.validateInsurance = validateInsurance;
exports.validatePatientAlert = validatePatientAlert;
exports.formatPatientName = formatPatientName;
exports.calculateAge = calculateAge;
exports.getActiveInsurance = getActiveInsurance;
exports.hasActiveAlerts = hasActiveAlerts;
/**
 * Validation Functions
 */
function validateOmniCarePatient(patient) {
    const errors = [];
    if (!patient.resourceType || patient.resourceType !== 'Patient') {
        errors.push('resourceType must be "Patient"');
    }
    if (!patient.name || patient.name.length === 0) {
        errors.push('Patient name is required');
    }
    if (!patient.omnicarePatientId) {
        errors.push('omnicarePatientId is required');
    }
    if (patient.birthDate) {
        const birthDate = new Date(patient.birthDate);
        if (birthDate > new Date()) {
            errors.push('Birth date cannot be in the future');
        }
    }
    return {
        valid: errors.length === 0,
        errors
    };
}
function validateEmergencyContact(contact) {
    const errors = [];
    if (!contact.name) {
        errors.push('Emergency contact name is required');
    }
    if (!contact.relationship) {
        errors.push('Emergency contact relationship is required');
    }
    return {
        valid: errors.length === 0,
        errors
    };
}
function validateInsurance(insurance) {
    const errors = [];
    if (!insurance.payorName) {
        errors.push('Insurance payor name is required');
    }
    if (!insurance.planName) {
        errors.push('Insurance plan name is required');
    }
    return {
        valid: errors.length === 0,
        errors
    };
}
function validatePatientAlert(alert) {
    const errors = [];
    if (!alert.type) {
        errors.push('Alert type is required');
    }
    if (!alert.severity) {
        errors.push('Alert severity is required');
    }
    if (!alert.title) {
        errors.push('Alert title is required');
    }
    return {
        valid: errors.length === 0,
        errors
    };
}
/**
 * Utility Functions
 */
function formatPatientName(nameOrPatient) {
    // If it's a patient object, get the first name
    if ('resourceType' in nameOrPatient && nameOrPatient.resourceType === 'Patient') {
        const patient = nameOrPatient;
        if (!patient.name || patient.name.length === 0) {
            return '';
        }
        const name = patient.name[0];
        if (!name)
            return '';
        const given = name.given?.join(' ') || '';
        const family = name.family || '';
        return `${given} ${family}`.trim();
    }
    // If it's a HumanName object
    const name = nameOrPatient;
    const given = name.given?.join(' ') || '';
    const family = name.family || '';
    return `${given} ${family}`.trim();
}
function calculateAge(birthDate) {
    const birth = new Date(birthDate);
    const today = new Date();
    let age = today.getFullYear() - birth.getFullYear();
    const monthDiff = today.getMonth() - birth.getMonth();
    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
        age--;
    }
    return age;
}
function getActiveInsurance(insurance) {
    return insurance.find(ins => ins.active && ins.priority === 1);
}
function hasActiveAlerts(alerts) {
    return alerts.some(alert => alert.active);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,