{"file":"/Users/rodrigo/claude-projects/OmniCare/backend/src/services/smart-fhir.service.ts","mappings":"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","names":[],"sources":["/Users/rodrigo/claude-projects/OmniCare/backend/src/services/smart-fhir.service.ts"],"sourcesContent":["import crypto from 'crypto';\n\nimport axios from 'axios';\nimport jwt from 'jsonwebtoken';\n\nimport config from '@/config';\nimport { \n  SMARTTokenResponse, \n  SMARTLaunchContext,\n} from '@/types/fhir';\nimport logger from '@/utils/logger';\nimport { getErrorMessage } from '@/utils/error.utils';\n\n/**\n * SMART on FHIR Integration Service\n * Implements SMART on FHIR authorization and integration with external EHR systems\n * Supports both standalone and EHR-launched applications\n */\nexport class SMARTFHIRService {\n  private readonly defaultScopes = config.smart.scopes;\n  private readonly stateStore = new Map<string, any>(); // In production, use Redis\n  private readonly authCodeStore = new Map<string, any>(); // In production, use Redis\n\n  // ===============================\n  // SMART AUTHORIZATION FLOW\n  // ===============================\n\n  /**\n   * Initiate SMART authorization flow\n   */\n  async initiateAuthorization(\n    clientId: string,\n    redirectUri: string,\n    scope: string[] = this.defaultScopes,\n    state?: string,\n    aud?: string,\n    launch?: string\n  ): Promise<{ authorizationUrl: string; state: string }> {\n    try {\n      const authState = state || this.generateSecureState();\n      const codeVerifier = this.generateCodeVerifier();\n      const codeChallenge = this.generateCodeChallenge(codeVerifier);\n\n      // Store state and code verifier for later verification\n      this.stateStore.set(authState, {\n        clientId,\n        redirectUri,\n        scope,\n        codeVerifier,\n        aud,\n        launch,\n        timestamp: Date.now(),\n        expiresAt: Date.now() + (10 * 60 * 1000), // 10 minutes\n      });\n\n      const authParams = new URLSearchParams({\n        response_type: 'code',\n        client_id: clientId,\n        redirect_uri: redirectUri,\n        scope: scope.join(' '),\n        state: authState,\n        code_challenge: codeChallenge,\n        code_challenge_method: 'S256',\n      });\n\n      if (aud) {\n        authParams.append('aud', aud);\n      }\n\n      if (launch) {\n        authParams.append('launch', launch);\n      }\n\n      const authorizationUrl = `${config.smart.authorizationUrl}?${authParams.toString()}`;\n\n      logger.security('SMART authorization initiated', {\n        clientId,\n        scope: scope.join(' '),\n        state: authState,\n        aud,\n        launch: !!launch,\n      });\n\n      return { authorizationUrl, state: authState };\n    } catch (error) {\n      logger.error('Failed to initiate SMART authorization:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Exchange authorization code for access token\n   */\n  async exchangeCodeForToken(\n    code: string,\n    state: string,\n    clientId?: string\n  ): Promise<SMARTTokenResponse> {\n    try {\n      // Verify state and retrieve stored data\n      const storedData = this.stateStore.get(state);\n      if (!storedData) {\n        throw new Error('Invalid or expired state parameter');\n      }\n\n      if (Date.now() > storedData.expiresAt) {\n        this.stateStore.delete(state);\n        throw new Error('Authorization state has expired');\n      }\n\n      // Use stored client ID if not provided\n      const effectiveClientId = clientId || storedData.clientId;\n\n      const tokenParams = {\n        grant_type: 'authorization_code',\n        code,\n        redirect_uri: storedData.redirectUri,\n        client_id: effectiveClientId,\n        code_verifier: storedData.codeVerifier,\n      };\n\n      const response = await axios.post(\n        config.smart.tokenUrl,\n        new URLSearchParams(tokenParams).toString(),\n        {\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n            'Accept': 'application/json',\n          },\n          timeout: 30000,\n        }\n      );\n\n      const tokenResponse: SMARTTokenResponse = response.data;\n\n      // Store authorization code mapping for potential refresh\n      if (tokenResponse.refresh_token) {\n        this.authCodeStore.set(tokenResponse.access_token, {\n          refreshToken: tokenResponse.refresh_token,\n          clientId: effectiveClientId,\n          scope: tokenResponse.scope,\n          patient: tokenResponse.patient,\n          encounter: tokenResponse.encounter,\n          fhirUser: tokenResponse.fhirUser,\n          timestamp: Date.now(),\n        });\n      }\n\n      // Clean up state store\n      this.stateStore.delete(state);\n\n      logger.security('SMART token exchange completed', {\n        clientId: effectiveClientId,\n        scope: tokenResponse.scope,\n        patient: tokenResponse.patient,\n        encounter: tokenResponse.encounter,\n        fhirUser: tokenResponse.fhirUser,\n        hasRefreshToken: !!tokenResponse.refresh_token,\n      });\n\n      return tokenResponse;\n    } catch (error) {\n      logger.error('Failed to exchange code for token:', error);\n      if (axios.isAxiosError(error)) {\n        logger.error('Token exchange error details:', {\n          status: error.response?.status,\n          data: error.response?.data,\n        });\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Refresh access token using refresh token\n   */\n  async refreshToken(refreshToken: string, clientId: string): Promise<SMARTTokenResponse> {\n    try {\n      const tokenParams = {\n        grant_type: 'refresh_token',\n        refresh_token: refreshToken,\n        client_id: clientId,\n      };\n\n      const response = await axios.post(\n        config.smart.tokenUrl,\n        new URLSearchParams(tokenParams).toString(),\n        {\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n            'Accept': 'application/json',\n          },\n          timeout: 30000,\n        }\n      );\n\n      const tokenResponse: SMARTTokenResponse = response.data;\n\n      logger.security('SMART token refreshed', {\n        clientId,\n        scope: tokenResponse.scope,\n      });\n\n      return tokenResponse;\n    } catch (error) {\n      logger.error('Failed to refresh token:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Introspect access token\n   */\n  async introspectToken(accessToken: string): Promise<any> {\n    try {\n      const response = await axios.post(\n        config.smart.introspectionUrl,\n        new URLSearchParams({ token: accessToken }).toString(),\n        {\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n            'Accept': 'application/json',\n          },\n          timeout: 10000,\n        }\n      );\n\n      const introspectionResult = response.data;\n\n      logger.security('Token introspection completed', {\n        active: introspectionResult.active,\n        scope: introspectionResult.scope,\n        client_id: introspectionResult.client_id,\n      });\n\n      return introspectionResult;\n    } catch (error) {\n      logger.error('Failed to introspect token:', error);\n      throw error;\n    }\n  }\n\n  // ===============================\n  // EHR INTEGRATION\n  // ===============================\n\n  /**\n   * Get SMART configuration from EHR\n   */\n  async getSMARTConfiguration(fhirBaseUrl: string): Promise<any> {\n    try {\n      const configUrl = `${fhirBaseUrl.replace(/\\/$/, '')}/.well-known/smart_configuration`;\n      \n      const response = await axios.get(configUrl, {\n        headers: {\n          'Accept': 'application/json',\n        },\n        timeout: 10000,\n      });\n\n      const smartConfig = response.data;\n\n      logger.integration('SMART configuration retrieved', {\n        fhirBaseUrl,\n        authorizationEndpoint: smartConfig.authorization_endpoint,\n        tokenEndpoint: smartConfig.token_endpoint,\n        capabilities: smartConfig.capabilities,\n      });\n\n      return smartConfig;\n    } catch (error) {\n      logger.error('Failed to get SMART configuration:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Launch standalone app\n   */\n  async launchStandaloneApp(\n    fhirBaseUrl: string,\n    clientId: string,\n    redirectUri: string,\n    scope: string[] = this.defaultScopes\n  ): Promise<{ authorizationUrl: string; state: string }> {\n    try {\n      // Get SMART configuration\n      const smartConfig = await this.getSMARTConfiguration(fhirBaseUrl);\n\n      const authState = this.generateSecureState();\n      const codeVerifier = this.generateCodeVerifier();\n      const codeChallenge = this.generateCodeChallenge(codeVerifier);\n\n      // Store launch context\n      this.stateStore.set(authState, {\n        clientId,\n        redirectUri,\n        scope,\n        codeVerifier,\n        fhirBaseUrl,\n        authorizationEndpoint: smartConfig.authorization_endpoint,\n        tokenEndpoint: smartConfig.token_endpoint,\n        timestamp: Date.now(),\n        expiresAt: Date.now() + (10 * 60 * 1000),\n      });\n\n      const authParams = new URLSearchParams({\n        response_type: 'code',\n        client_id: clientId,\n        redirect_uri: redirectUri,\n        scope: scope.join(' '),\n        state: authState,\n        code_challenge: codeChallenge,\n        code_challenge_method: 'S256',\n        aud: fhirBaseUrl,\n      });\n\n      const authorizationUrl = `${smartConfig.authorization_endpoint}?${authParams.toString()}`;\n\n      logger.integration('Standalone app launch initiated', {\n        fhirBaseUrl,\n        clientId,\n        scope: scope.join(' '),\n        state: authState,\n      });\n\n      return { authorizationUrl, state: authState };\n    } catch (error) {\n      logger.error('Failed to launch standalone app:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Handle EHR launch\n   */\n  async handleEHRLaunch(\n    iss: string,\n    launch: string,\n    clientId: string,\n    redirectUri: string,\n    scope: string[] = this.defaultScopes\n  ): Promise<{ authorizationUrl: string; state: string }> {\n    try {\n      // Get SMART configuration from the issuer\n      const smartConfig = await this.getSMARTConfiguration(iss);\n\n      const authState = this.generateSecureState();\n      const codeVerifier = this.generateCodeVerifier();\n      const codeChallenge = this.generateCodeChallenge(codeVerifier);\n\n      // Store EHR launch context\n      this.stateStore.set(authState, {\n        clientId,\n        redirectUri,\n        scope,\n        codeVerifier,\n        iss,\n        launch,\n        authorizationEndpoint: smartConfig.authorization_endpoint,\n        tokenEndpoint: smartConfig.token_endpoint,\n        timestamp: Date.now(),\n        expiresAt: Date.now() + (10 * 60 * 1000),\n      });\n\n      const authParams = new URLSearchParams({\n        response_type: 'code',\n        client_id: clientId,\n        redirect_uri: redirectUri,\n        scope: scope.join(' '),\n        state: authState,\n        code_challenge: codeChallenge,\n        code_challenge_method: 'S256',\n        aud: iss,\n        launch,\n      });\n\n      const authorizationUrl = `${smartConfig.authorization_endpoint}?${authParams.toString()}`;\n\n      logger.integration('EHR launch handled', {\n        iss,\n        launch,\n        clientId,\n        scope: scope.join(' '),\n        state: authState,\n      });\n\n      return { authorizationUrl, state: authState };\n    } catch (error) {\n      logger.error('Failed to handle EHR launch:', error);\n      throw error;\n    }\n  }\n\n  // ===============================\n  // EPIC INTEGRATION\n  // ===============================\n\n  /**\n   * Authenticate with Epic using JWT\n   */\n  async authenticateWithEpic(privateKeyPath: string): Promise<string> {\n    try {\n      const fs = await import('fs/promises');\n      const privateKey = await fs.readFile(privateKeyPath, 'utf8');\n\n      const jwtPayload = {\n        iss: config.ehr.epic.clientId,\n        sub: config.ehr.epic.clientId,\n        aud: config.ehr.epic.fhirBaseUrl.replace(/\\/fhir.*$/, '/oauth2/token'),\n        jti: crypto.randomUUID(),\n        exp: Math.floor(Date.now() / 1000) + (5 * 60), // 5 minutes\n      };\n\n      const signedJWT = jwt.sign(jwtPayload, privateKey, { algorithm: 'RS384' });\n\n      const tokenParams = {\n        grant_type: 'client_credentials',\n        client_assertion_type: 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer',\n        client_assertion: signedJWT,\n      };\n\n      const response = await axios.post(\n        config.ehr.epic.fhirBaseUrl.replace(/\\/fhir.*$/, '/oauth2/token'),\n        new URLSearchParams(tokenParams).toString(),\n        {\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n            'Accept': 'application/json',\n          },\n          timeout: 30000,\n        }\n      );\n\n      const accessToken = response.data.access_token;\n\n      logger.integration('Epic authentication successful', {\n        clientId: config.ehr.epic.clientId,\n      });\n\n      return accessToken;\n    } catch (error) {\n      logger.error('Failed to authenticate with Epic:', error);\n      throw error;\n    }\n  }\n\n  // ===============================\n  // CERNER INTEGRATION\n  // ===============================\n\n  /**\n   * Authenticate with Cerner\n   */\n  async authenticateWithCerner(): Promise<string> {\n    try {\n      const tokenParams = {\n        grant_type: 'client_credentials',\n        client_id: config.ehr.cerner.clientId,\n        client_secret: config.ehr.cerner.clientSecret,\n        scope: 'system/Patient.read system/Observation.read',\n      };\n\n      const response = await axios.post(\n        config.ehr.cerner.fhirBaseUrl.replace(/\\/r4.*$/, '/tenants/oauth/token'),\n        new URLSearchParams(tokenParams).toString(),\n        {\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n            'Accept': 'application/json',\n          },\n          timeout: 30000,\n        }\n      );\n\n      const accessToken = response.data.access_token;\n\n      logger.integration('Cerner authentication successful', {\n        clientId: config.ehr.cerner.clientId,\n      });\n\n      return accessToken;\n    } catch (error) {\n      logger.error('Failed to authenticate with Cerner:', error);\n      throw error;\n    }\n  }\n\n  // ===============================\n  // UTILITY METHODS\n  // ===============================\n\n  /**\n   * Generate secure state parameter\n   */\n  private generateSecureState(): string {\n    return crypto.randomBytes(32).toString('hex');\n  }\n\n  /**\n   * Generate PKCE code verifier\n   */\n  private generateCodeVerifier(): string {\n    return crypto.randomBytes(43).toString('base64url');\n  }\n\n  /**\n   * Generate PKCE code challenge\n   */\n  private generateCodeChallenge(codeVerifier: string): string {\n    return crypto\n      .createHash('sha256')\n      .update(codeVerifier)\n      .digest('base64url');\n  }\n\n  /**\n   * Validate JWT token (for SMART apps)\n   */\n  validateJWT(token: string, publicKey?: string): any {\n    try {\n      const decoded = jwt.verify(token, publicKey || config.jwt.secret);\n      \n      logger.security('JWT validation successful', {\n        sub: (decoded as any).sub,\n        iss: (decoded as any).iss,\n        aud: (decoded as any).aud,\n      });\n\n      return decoded;\n    } catch (error) {\n      logger.error('JWT validation failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Clean up expired state and auth code entries\n   */\n  cleanupExpiredEntries(): void {\n    const now = Date.now();\n    \n    // Clean up state store\n    for (const [key, value] of this.stateStore.entries()) {\n      if (value.expiresAt && now > value.expiresAt) {\n        this.stateStore.delete(key);\n      }\n    }\n\n    // Clean up auth code store (older than 1 hour)\n    for (const [key, value] of this.authCodeStore.entries()) {\n      if (now - value.timestamp > 3600000) {\n        this.authCodeStore.delete(key);\n      }\n    }\n\n    logger.debug('Expired SMART entries cleaned up');\n  }\n\n  /**\n   * Get health status\n   */\n  async getHealthStatus(): Promise<{ status: string; details: any }> {\n    try {\n      const details = {\n        stateStoreSize: this.stateStore.size,\n        authCodeStoreSize: this.authCodeStore.size,\n        config: {\n          authorizationUrl: config.smart.authorizationUrl,\n          tokenUrl: config.smart.tokenUrl,\n          introspectionUrl: config.smart.introspectionUrl,\n        },\n      };\n\n      return { status: 'UP', details };\n    } catch (error) {\n      return {\n        status: 'DOWN',\n        details: { error: getErrorMessage(error) },\n      };\n    }\n  }\n}\n\n// Export singleton instance\nexport const smartFHIRService = new SMARTFHIRService();\n\n// Schedule cleanup of expired entries every 5 minutes\nsetInterval(() => {\n  smartFHIRService.cleanupExpiredEntries();\n}, 5 * 60 * 1000);"],"version":3}