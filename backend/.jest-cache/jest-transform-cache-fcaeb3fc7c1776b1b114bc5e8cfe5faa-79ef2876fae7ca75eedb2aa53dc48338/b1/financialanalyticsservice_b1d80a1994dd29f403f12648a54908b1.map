{"file":"/Users/rodrigo/claude-projects/OmniCare/backend/src/services/analytics/financial-analytics.service.ts","mappings":"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","names":[],"sources":["/Users/rodrigo/claude-projects/OmniCare/backend/src/services/analytics/financial-analytics.service.ts"],"sourcesContent":["/**\n * Financial Analytics Service\n * \n * Comprehensive financial analytics, revenue cycle management,\n * and business intelligence for OmniCare EMR\n */\n\nimport { EventEmitter } from 'events';\n\nexport interface RevenueMetrics {\n  totalRevenue: number;\n  grossCharges: number;\n  netCollections: number;\n  adjustments: number;\n  writeOffs: number;\n  collectionRate: number;\n  daysInAR: number;\n  denialRate: number;\n  firstPassResolutionRate: number;\n}\n\nexport interface PayerMix {\n  payerName: string;\n  payerType: 'Commercial' | 'Medicare' | 'Medicaid' | 'Self-Pay' | 'Workers Comp' | 'Other';\n  volume: number;\n  percentage: number;\n  averageReimbursement: number;\n  totalRevenue: number;\n  denialRate: number;\n  averageDaysToPayment: number;\n}\n\nexport interface ARAnalysis {\n  totalAR: number;\n  current: number; // 0-30 days\n  thirty: number;   // 31-60 days\n  sixty: number;    // 61-90 days\n  ninety: number;   // 91-120 days\n  over120: number;  // >120 days\n  buckets: Array<{\n    ageBucket: string;\n    amount: number;\n    percentage: number;\n    claimCount: number;\n  }>;\n}\n\nexport interface DenialAnalysis {\n  totalDenials: number;\n  denialRate: number;\n  topDenialReasons: Array<{\n    reasonCode: string;\n    description: string;\n    count: number;\n    amount: number;\n    percentage: number;\n  }>;\n  denialsByPayer: Array<{\n    payerName: string;\n    denialCount: number;\n    denialAmount: number;\n    denialRate: number;\n  }>;\n  appealableAmount: number;\n  recoveryOpportunity: number;\n}\n\nexport interface ProductivityMetrics {\n  providerId?: string;\n  providerName?: string;\n  totalEncounters: number;\n  totalRVUs: number;\n  workRVUs: number;\n  practiceExpenseRVUs: number;\n  malpracticeRVUs: number;\n  averageRVUPerEncounter: number;\n  revenuePerRVU: number;\n  revenuePerEncounter: number;\n  totalRevenue: number;\n  collectionEfficiency: number;\n}\n\nexport interface FinancialForecast {\n  period: string;\n  projectedRevenue: number;\n  projectedExpenses: number;\n  projectedMargin: number;\n  confidenceInterval: {\n    lower: number;\n    upper: number;\n  };\n  keyAssumptions: string[];\n  riskFactors: string[];\n}\n\nexport class FinancialAnalyticsService extends EventEmitter {\n  private historicalData: Map<string, any[]> = new Map();\n  private benchmarks: Map<string, number> = new Map();\n\n  constructor() {\n    super();\n    this.initializeBenchmarks();\n  }\n\n  /**\n   * Get comprehensive revenue cycle analytics\n   */\n  async getRevenueCycleAnalytics(\n    facilityId: string,\n    period: { start: Date; end: Date }\n  ): Promise<{\n    revenueMetrics: RevenueMetrics;\n    payerMix: PayerMix[];\n    arAnalysis: ARAnalysis;\n    denialAnalysis: DenialAnalysis;\n    trends: Array<{\n      period: string;\n      revenue: number;\n      collections: number;\n      denials: number;\n      ar: number;\n    }>;\n    kpis: Array<{\n      name: string;\n      value: number;\n      target: number;\n      variance: number;\n      trend: 'up' | 'down' | 'stable';\n    }>;\n  }> {\n    const revenueMetrics = await this.calculateRevenueMetrics(facilityId, period);\n    const payerMix = await this.analyzePayerMix(facilityId, period);\n    const arAnalysis = await this.analyzeAccountsReceivable(facilityId);\n    const denialAnalysis = await this.analyzeDenials(facilityId, period);\n    const trends = await this.getRevenueTrends(facilityId, 12);\n    const kpis = await this.calculateFinancialKPIs(revenueMetrics, payerMix, arAnalysis, denialAnalysis);\n\n    return {\n      revenueMetrics,\n      payerMix,\n      arAnalysis,\n      denialAnalysis,\n      trends,\n      kpis\n    };\n  }\n\n  /**\n   * Analyze provider productivity and financial performance\n   */\n  async getProviderProductivityAnalysis(\n    facilityId: string,\n    period: { start: Date; end: Date },\n    providerId?: string\n  ): Promise<{\n    summary: {\n      totalProviders: number;\n      averageProductivity: number;\n      topPerformer: string;\n      improvementOpportunity: number;\n    };\n    providerMetrics: ProductivityMetrics[];\n    benchmarks: {\n      specialtyBenchmarks: Map<string, ProductivityMetrics>;\n      nationalBenchmarks: ProductivityMetrics;\n    };\n    recommendations: Array<{\n      providerId: string;\n      recommendation: string;\n      expectedImpact: number;\n      priority: 'High' | 'Medium' | 'Low';\n    }>;\n  }> {\n    const providerMetrics = await this.calculateProviderProductivity(facilityId, period, providerId);\n    const benchmarks = await this.getProductivityBenchmarks();\n    \n    const summary = {\n      totalProviders: providerMetrics.length,\n      averageProductivity: providerMetrics.reduce((sum, p) => sum + (p.totalRVUs || 0), 0) / providerMetrics.length,\n      topPerformer: providerMetrics.sort((a, b) => (b.totalRVUs || 0) - (a.totalRVUs || 0))[0]?.providerName || 'N/A',\n      improvementOpportunity: providerMetrics.filter(p => (p.totalRVUs || 0) < benchmarks.nationalBenchmarks.totalRVUs * 0.8).length\n    };\n\n    const recommendations = await this.generateProductivityRecommendations(providerMetrics, benchmarks);\n\n    return {\n      summary,\n      providerMetrics,\n      benchmarks,\n      recommendations\n    };\n  }\n\n  /**\n   * Generate financial forecasting and budgeting\n   */\n  async generateFinancialForecast(\n    facilityId: string,\n    forecastMonths: number = 12\n  ): Promise<{\n    summary: {\n      totalProjectedRevenue: number;\n      projectedGrowthRate: number;\n      riskAdjustedRevenue: number;\n      confidenceLevel: number;\n    };\n    monthlyForecasts: FinancialForecast[];\n    scenarioAnalysis: {\n      optimistic: FinancialForecast;\n      realistic: FinancialForecast;\n      pessimistic: FinancialForecast;\n    };\n    keyDrivers: Array<{\n      driver: string;\n      impact: number;\n      sensitivity: 'High' | 'Medium' | 'Low';\n    }>;\n  }> {\n    const historicalRevenue = await this.getHistoricalRevenue(facilityId, 24);\n    const seasonality = this.calculateSeasonality(historicalRevenue);\n    const trendAnalysis = this.calculateTrend(historicalRevenue);\n\n    const monthlyForecasts: FinancialForecast[] = [];\n    let baseRevenue = historicalRevenue[historicalRevenue.length - 1]?.revenue || 0;\n\n    for (let month = 1; month <= forecastMonths; month++) {\n      const seasonalityFactor = seasonality[(month - 1) % 12] || 1.0;\n      const trendFactor = 1 + (trendAnalysis.monthlyGrowthRate / 100);\n      \n      const projectedRevenue = baseRevenue * trendFactor * seasonalityFactor;\n      const projectedExpenses = projectedRevenue * 0.75; // Assuming 75% expense ratio\n      \n      monthlyForecasts.push({\n        period: this.getMonthName(month),\n        projectedRevenue,\n        projectedExpenses,\n        projectedMargin: projectedRevenue - projectedExpenses,\n        confidenceInterval: {\n          lower: projectedRevenue * 0.85,\n          upper: projectedRevenue * 1.15\n        },\n        keyAssumptions: [\n          `Monthly growth rate: ${trendAnalysis.monthlyGrowthRate.toFixed(2)}%`,\n          `Seasonality factor: ${((seasonalityFactor - 1) * 100).toFixed(1)}%`,\n          'Current payer mix maintained',\n          'No major market disruptions'\n        ],\n        riskFactors: [\n          'Regulatory changes',\n          'Payer contract renegotiations',\n          'Economic downturn',\n          'Competition changes'\n        ]\n      });\n\n      baseRevenue = projectedRevenue;\n    }\n\n    const totalProjectedRevenue = monthlyForecasts.reduce((sum, f) => sum + f.projectedRevenue, 0);\n    const projectedGrowthRate = ((totalProjectedRevenue / (historicalRevenue.reduce((sum, h) => sum + h.revenue, 0))) - 1) * 100;\n\n    const scenarioAnalysis = this.generateScenarioAnalysis(monthlyForecasts);\n    const keyDrivers = this.identifyKeyDrivers(historicalRevenue);\n\n    return {\n      summary: {\n        totalProjectedRevenue,\n        projectedGrowthRate,\n        riskAdjustedRevenue: totalProjectedRevenue * 0.9,\n        confidenceLevel: 85\n      },\n      monthlyForecasts,\n      scenarioAnalysis,\n      keyDrivers\n    };\n  }\n\n  /**\n   * Analyze profitability by service line\n   */\n  async getServiceLineProfitability(\n    facilityId: string,\n    period: { start: Date; end: Date }\n  ): Promise<{\n    serviceLines: Array<{\n      serviceLineName: string;\n      revenue: number;\n      directCosts: number;\n      indirectCosts: number;\n      grossMargin: number;\n      netMargin: number;\n      marginPercentage: number;\n      volume: number;\n      revenuePerUnit: number;\n      growthRate: number;\n    }>;\n    recommendations: Array<{\n      serviceLine: string;\n      recommendation: string;\n      expectedImpact: number;\n      investmentRequired: number;\n      roi: number;\n    }>;\n  }> {\n    // Mock service line data - would integrate with actual EHR data\n    const serviceLines = [\n      {\n        serviceLineName: 'Primary Care',\n        revenue: 2500000,\n        directCosts: 1500000,\n        indirectCosts: 500000,\n        grossMargin: 1000000,\n        netMargin: 500000,\n        marginPercentage: 20,\n        volume: 15000,\n        revenuePerUnit: 166.67,\n        growthRate: 5.2\n      },\n      {\n        serviceLineName: 'Cardiology',\n        revenue: 1800000,\n        directCosts: 900000,\n        indirectCosts: 400000,\n        grossMargin: 900000,\n        netMargin: 500000,\n        marginPercentage: 27.8,\n        volume: 4500,\n        revenuePerUnit: 400,\n        growthRate: 8.1\n      },\n      {\n        serviceLineName: 'Orthopedics',\n        revenue: 3200000,\n        directCosts: 1600000,\n        indirectCosts: 600000,\n        grossMargin: 1600000,\n        netMargin: 1000000,\n        marginPercentage: 31.25,\n        volume: 3200,\n        revenuePerUnit: 1000,\n        growthRate: 12.5\n      }\n    ];\n\n    const recommendations = serviceLines.map(sl => ({\n      serviceLine: sl.serviceLineName,\n      recommendation: sl.marginPercentage < 20 ? \n        'Focus on cost reduction and efficiency improvements' :\n        'Expand capacity and market share',\n      expectedImpact: sl.revenue * 0.05, // 5% improvement\n      investmentRequired: sl.revenue * 0.02, // 2% investment\n      roi: 2.5\n    }));\n\n    return { serviceLines, recommendations };\n  }\n\n  private async calculateRevenueMetrics(\n    facilityId: string,\n    period: { start: Date; end: Date }\n  ): Promise<RevenueMetrics> {\n    // Mock implementation - would query actual financial data\n    const grossCharges = 5000000;\n    const adjustments = 1200000;\n    const writeOffs = 300000;\n    const netCollections = 3500000;\n    \n    return {\n      totalRevenue: grossCharges,\n      grossCharges,\n      netCollections,\n      adjustments,\n      writeOffs,\n      collectionRate: (netCollections / (grossCharges - adjustments)) * 100,\n      daysInAR: 45,\n      denialRate: 8.5,\n      firstPassResolutionRate: 91.2\n    };\n  }\n\n  private async analyzePayerMix(\n    facilityId: string,\n    period: { start: Date; end: Date }\n  ): Promise<PayerMix[]> {\n    return [\n      {\n        payerName: 'Blue Cross Blue Shield',\n        payerType: 'Commercial',\n        volume: 3500,\n        percentage: 35,\n        averageReimbursement: 285,\n        totalRevenue: 997500,\n        denialRate: 5.2,\n        averageDaysToPayment: 32\n      },\n      {\n        payerName: 'Medicare',\n        payerType: 'Medicare',\n        volume: 2800,\n        percentage: 28,\n        averageReimbursement: 198,\n        totalRevenue: 554400,\n        denialRate: 3.1,\n        averageDaysToPayment: 21\n      },\n      {\n        payerName: 'Medicaid',\n        payerType: 'Medicaid',\n        volume: 2200,\n        percentage: 22,\n        averageReimbursement: 156,\n        totalRevenue: 343200,\n        denialRate: 12.8,\n        averageDaysToPayment: 45\n      },\n      {\n        payerName: 'Self-Pay',\n        payerType: 'Self-Pay',\n        volume: 1500,\n        percentage: 15,\n        averageReimbursement: 89,\n        totalRevenue: 133500,\n        denialRate: 0,\n        averageDaysToPayment: 65\n      }\n    ];\n  }\n\n  private async analyzeAccountsReceivable(facilityId: string): Promise<ARAnalysis> {\n    const totalAR = 1250000;\n    \n    return {\n      totalAR,\n      current: 625000,    // 50%\n      thirty: 250000,     // 20%\n      sixty: 187500,      // 15%\n      ninety: 125000,     // 10%\n      over120: 62500,     // 5%\n      buckets: [\n        { ageBucket: '0-30 days', amount: 625000, percentage: 50, claimCount: 2500 },\n        { ageBucket: '31-60 days', amount: 250000, percentage: 20, claimCount: 800 },\n        { ageBucket: '61-90 days', amount: 187500, percentage: 15, claimCount: 450 },\n        { ageBucket: '91-120 days', amount: 125000, percentage: 10, claimCount: 250 },\n        { ageBucket: '>120 days', amount: 62500, percentage: 5, claimCount: 125 }\n      ]\n    };\n  }\n\n  private async analyzeDenials(\n    facilityId: string,\n    period: { start: Date; end: Date }\n  ): Promise<DenialAnalysis> {\n    return {\n      totalDenials: 425,\n      denialRate: 8.5,\n      topDenialReasons: [\n        {\n          reasonCode: 'CO-11',\n          description: 'Diagnosis inconsistent with procedure',\n          count: 85,\n          amount: 42500,\n          percentage: 20\n        },\n        {\n          reasonCode: 'CO-16',\n          description: 'Claim lacks required information',\n          count: 72,\n          amount: 36000,\n          percentage: 17\n        },\n        {\n          reasonCode: 'CO-97',\n          description: 'Payment is included in another service',\n          count: 68,\n          amount: 34000,\n          percentage: 16\n        }\n      ],\n      denialsByPayer: [\n        {\n          payerName: 'Medicaid',\n          denialCount: 180,\n          denialAmount: 90000,\n          denialRate: 12.8\n        },\n        {\n          payerName: 'Blue Cross Blue Shield',\n          denialCount: 145,\n          denialAmount: 72500,\n          denialRate: 5.2\n        }\n      ],\n      appealableAmount: 156000,\n      recoveryOpportunity: 93600\n    };\n  }\n\n  private async getRevenueTrends(facilityId: string, months: number): Promise<any[]> {\n    const trends = [];\n    const now = new Date();\n    \n    for (let i = months - 1; i >= 0; i--) {\n      const date = new Date(now);\n      date.setMonth(date.getMonth() - i);\n      \n      trends.push({\n        period: `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`,\n        revenue: Math.floor(Math.random() * 500000) + 400000,\n        collections: Math.floor(Math.random() * 450000) + 350000,\n        denials: Math.floor(Math.random() * 50) + 20,\n        ar: Math.floor(Math.random() * 200000) + 1000000\n      });\n    }\n    \n    return trends;\n  }\n\n  private async calculateFinancialKPIs(\n    revenue: RevenueMetrics,\n    payerMix: PayerMix[],\n    ar: ARAnalysis,\n    denials: DenialAnalysis\n  ): Promise<any[]> {\n    const kpis = [\n      {\n        name: 'Collection Rate',\n        value: revenue.collectionRate,\n        target: this.benchmarks.get('collection-rate') || 95,\n        variance: 0,\n        trend: 'stable' as const\n      },\n      {\n        name: 'Days in A/R',\n        value: revenue.daysInAR,\n        target: this.benchmarks.get('days-in-ar') || 35,\n        variance: 0,\n        trend: 'up' as const\n      },\n      {\n        name: 'Denial Rate',\n        value: revenue.denialRate,\n        target: this.benchmarks.get('denial-rate') || 5,\n        variance: 0,\n        trend: 'down' as const\n      },\n      {\n        name: 'First Pass Resolution',\n        value: revenue.firstPassResolutionRate,\n        target: this.benchmarks.get('first-pass-resolution') || 95,\n        variance: 0,\n        trend: 'stable' as const\n      }\n    ];\n\n    // Calculate variances\n    kpis.forEach(kpi => {\n      kpi.variance = ((kpi.value - kpi.target) / kpi.target) * 100;\n    });\n\n    return kpis;\n  }\n\n  private async calculateProviderProductivity(\n    facilityId: string,\n    period: { start: Date; end: Date },\n    providerId?: string\n  ): Promise<ProductivityMetrics[]> {\n    // Mock provider productivity data\n    return [\n      {\n        providerId: 'PROV001',\n        providerName: 'Dr. Smith',\n        totalEncounters: 1250,\n        totalRVUs: 3750,\n        workRVUs: 2250,\n        practiceExpenseRVUs: 1125,\n        malpracticeRVUs: 375,\n        averageRVUPerEncounter: 3.0,\n        revenuePerRVU: 45.50,\n        revenuePerEncounter: 136.50,\n        totalRevenue: 170625,\n        collectionEfficiency: 92.5\n      },\n      {\n        providerId: 'PROV002',\n        providerName: 'Dr. Johnson',\n        totalEncounters: 980,\n        totalRVUs: 3430,\n        workRVUs: 2058,\n        practiceExpenseRVUs: 1029,\n        malpracticeRVUs: 343,\n        averageRVUPerEncounter: 3.5,\n        revenuePerRVU: 47.20,\n        revenuePerEncounter: 165.20,\n        totalRevenue: 161896,\n        collectionEfficiency: 94.2\n      }\n    ];\n  }\n\n  private async getProductivityBenchmarks(): Promise<any> {\n    return {\n      specialtyBenchmarks: new Map([\n        ['Family Medicine', {\n          totalRVUs: 4500,\n          workRVUs: 2700,\n          practiceExpenseRVUs: 1350,\n          malpracticeRVUs: 450,\n          revenuePerRVU: 50.00\n        }],\n        ['Internal Medicine', {\n          totalRVUs: 4200,\n          workRVUs: 2520,\n          practiceExpenseRVUs: 1260,\n          malpracticeRVUs: 420,\n          revenuePerRVU: 52.00\n        }]\n      ]),\n      nationalBenchmarks: {\n        totalRVUs: 4350,\n        workRVUs: 2610,\n        practiceExpenseRVUs: 1305,\n        malpracticeRVUs: 435,\n        revenuePerRVU: 51.00,\n        collectionEfficiency: 95.0\n      }\n    };\n  }\n\n  private async generateProductivityRecommendations(\n    metrics: ProductivityMetrics[],\n    benchmarks: any\n  ): Promise<any[]> {\n    return metrics.map(provider => {\n      let recommendation = 'Performance within expected range';\n      let priority: 'High' | 'Medium' | 'Low' = 'Low';\n      let expectedImpact = 0;\n\n      if ((provider.totalRVUs || 0) < benchmarks.nationalBenchmarks.totalRVUs * 0.8) {\n        recommendation = 'Focus on increasing patient volume and encounter complexity';\n        priority = 'High';\n        expectedImpact = 25000;\n      } else if ((provider.collectionEfficiency || 0) < 90) {\n        recommendation = 'Improve documentation and coding accuracy';\n        priority = 'Medium';\n        expectedImpact = 15000;\n      }\n\n      return {\n        providerId: provider.providerId || '',\n        recommendation,\n        expectedImpact,\n        priority\n      };\n    });\n  }\n\n  private async getHistoricalRevenue(facilityId: string, months: number): Promise<any[]> {\n    const data = [];\n    const now = new Date();\n    \n    for (let i = months - 1; i >= 0; i--) {\n      const date = new Date(now);\n      date.setMonth(date.getMonth() - i);\n      \n      data.push({\n        period: `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`,\n        revenue: Math.floor(Math.random() * 200000) + 400000 + (i * 5000), // Growth trend\n        date\n      });\n    }\n    \n    return data;\n  }\n\n  private calculateSeasonality(historicalData: any[]): number[] {\n    // Mock seasonality calculation - would use actual statistical analysis\n    return [1.0, 0.95, 1.02, 1.05, 1.03, 0.98, 0.92, 0.88, 1.08, 1.12, 1.05, 0.97];\n  }\n\n  private calculateTrend(historicalData: any[]): { monthlyGrowthRate: number; annualGrowthRate: number } {\n    if (historicalData.length < 2) {\n      return { monthlyGrowthRate: 0, annualGrowthRate: 0 };\n    }\n\n    const firstRevenue = historicalData[0].revenue;\n    const lastRevenue = historicalData[historicalData.length - 1].revenue;\n    const months = historicalData.length - 1;\n    \n    const monthlyGrowthRate = (Math.pow(lastRevenue / firstRevenue, 1 / months) - 1) * 100;\n    const annualGrowthRate = monthlyGrowthRate * 12;\n\n    return { monthlyGrowthRate, annualGrowthRate };\n  }\n\n  private generateScenarioAnalysis(forecasts: FinancialForecast[]): any {\n    const realistic = forecasts[0]; // Use first forecast as baseline\n    \n    if (!realistic) {\n      return {\n        optimistic: null,\n        realistic: null,\n        pessimistic: null\n      };\n    }\n    \n    return {\n      optimistic: {\n        ...realistic,\n        projectedRevenue: realistic.projectedRevenue * 1.15,\n        projectedMargin: realistic.projectedMargin * 1.20\n      },\n      realistic,\n      pessimistic: {\n        ...realistic,\n        projectedRevenue: realistic.projectedRevenue * 0.85,\n        projectedMargin: realistic.projectedMargin * 0.75\n      }\n    };\n  }\n\n  private identifyKeyDrivers(historicalData: any[]): any[] {\n    return [\n      {\n        driver: 'Patient Volume',\n        impact: 0.45,\n        sensitivity: 'High' as const\n      },\n      {\n        driver: 'Payer Mix',\n        impact: 0.25,\n        sensitivity: 'Medium' as const\n      },\n      {\n        driver: 'Service Line Mix',\n        impact: 0.20,\n        sensitivity: 'Medium' as const\n      },\n      {\n        driver: 'Collection Efficiency',\n        impact: 0.10,\n        sensitivity: 'Low' as const\n      }\n    ];\n  }\n\n  private getMonthName(month: number): string {\n    const months = [\n      'January', 'February', 'March', 'April', 'May', 'June',\n      'July', 'August', 'September', 'October', 'November', 'December'\n    ];\n    return months[(month - 1) % 12] || 'Unknown';\n  }\n\n  private initializeBenchmarks(): void {\n    this.benchmarks.set('collection-rate', 95);\n    this.benchmarks.set('days-in-ar', 35);\n    this.benchmarks.set('denial-rate', 5);\n    this.benchmarks.set('first-pass-resolution', 95);\n    this.benchmarks.set('net-collection-rate', 98);\n    this.benchmarks.set('cost-to-collect', 3.5);\n  }\n}"],"version":3}