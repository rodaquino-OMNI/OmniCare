{"file":"/Users/rodrigo/claude-projects/OmniCare/backend/src/controllers/fhir.controller.ts","mappings":";;;;;;AAEA,oEAA+D;AAC/D,8EAAyE;AACzE,gEAA4D;AAC5D,4EAAwE;AAExE,4DAAoC;AACpC,qDAAkE;AAElE;;;GAGG;AACH,MAAa,cAAc;IAEzB,kCAAkC;IAClC,+BAA+B;IAC/B,kCAAkC;IAElC;;OAEG;IACH,KAAK,CAAC,sBAAsB,CAAC,GAAY,EAAE,GAAa;QACtD,IAAI,CAAC;YACH,gBAAM,CAAC,IAAI,CAAC,gCAAgC,EAAE;gBAC5C,SAAS,EAAE,GAAG,CAAC,GAAG,CAAC,YAAY,CAAC;gBAChC,EAAE,EAAE,GAAG,CAAC,EAAE;aACX,CAAC,CAAC;YAEH,MAAM,mBAAmB,GAAG,MAAM,gCAAc,CAAC,sBAAsB,EAAE,CAAC;YAE1E,GAAG,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;QAChC,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,qCAAqC,EAAE,KAAK,CAAC,CAAC;YAC3D,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,YAAY,EAAE,kBAAkB;gBAChC,KAAK,EAAE,CAAC;wBACN,QAAQ,EAAE,OAAO;wBACjB,IAAI,EAAE,WAAW;wBACjB,WAAW,EAAE,yCAAyC;qBACvD,CAAC;aACH,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,kCAAkC;IAClC,2BAA2B;IAC3B,kCAAkC;IAElC;;OAEG;IACH,KAAK,CAAC,cAAc,CAAC,GAAY,EAAE,GAAa;QAC9C,IAAI,CAAC;YACH,MAAM,EAAE,YAAY,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YACpC,MAAM,QAAQ,GAAG,GAAG,CAAC,IAAI,CAAC;YAE1B,gBAAM,CAAC,IAAI,CAAC,mBAAmB,EAAE;gBAC/B,YAAY;gBACZ,MAAM,EAAE,GAAG,CAAC,IAAI,EAAE,EAAE;gBACpB,KAAK,EAAE,CAAC,CAAC,QAAQ,CAAC,EAAE;aACrB,CAAC,CAAC;YAEH,yBAAyB;YACzB,IAAI,QAAQ,CAAC,YAAY,KAAK,YAAY,EAAE,CAAC;gBAC3C,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,YAAY,EAAE,kBAAkB;oBAChC,KAAK,EAAE,CAAC;4BACN,QAAQ,EAAE,OAAO;4BACjB,IAAI,EAAE,SAAS;4BACf,WAAW,EAAE,oCAAoC,YAAY,SAAS,QAAQ,CAAC,YAAY,EAAE;yBAC9F,CAAC;iBACH,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,4CAA4C;YAC5C,IAAI,QAAQ,CAAC,EAAE,EAAE,CAAC;gBAChB,OAAO,QAAQ,CAAC,EAAE,CAAC;YACrB,CAAC;YAED,MAAM,eAAe,GAAG,MAAM,gCAAc,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;YAEtE,uBAAuB;YACvB,MAAM,4CAAoB,CAAC,qBAAqB,CAC9C,YAAY,IAAI,EAAE,EAClB,eAAe,CAAC,EAAE,IAAI,EAAE,EACxB,QAAQ,EACR,eAAe,CAChB,CAAC;YAEF,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC;iBACZ,QAAQ,CAAC,YAAY,YAAY,IAAI,eAAe,CAAC,EAAE,EAAE,CAAC;iBAC1D,IAAI,CAAC,eAAe,CAAC,CAAC;QAC3B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,4BAA4B,EAAE,KAAK,CAAC,CAAC;YAClD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,YAAY,EAAE,kBAAkB;gBAChC,KAAK,EAAE,CAAC;wBACN,QAAQ,EAAE,OAAO;wBACjB,IAAI,EAAE,WAAW;wBACjB,WAAW,EAAE,2BAA2B;qBACzC,CAAC;aACH,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,YAAY,CAAC,GAAY,EAAE,GAAa;QAC5C,IAAI,CAAC;YACH,MAAM,EAAE,YAAY,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YAExC,gBAAM,CAAC,IAAI,CAAC,kBAAkB,EAAE;gBAC9B,YAAY;gBACZ,EAAE;gBACF,MAAM,EAAE,GAAG,CAAC,IAAI,EAAE,EAAE;aACrB,CAAC,CAAC;YAEH,MAAM,QAAQ,GAAG,MAAM,gCAAc,CAAC,YAAY,CAAC,YAAY,IAAI,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;YAEjF,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACrB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,0BAA0B,EAAE,KAAK,CAAC,CAAC;YAEhD,IAAI,CAAC,IAAA,wBAAU,EAAC,KAAK,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,IAAK,KAAa,CAAC,MAAM,KAAK,GAAG,EAAE,CAAC;gBAChG,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,YAAY,EAAE,kBAAkB;oBAChC,KAAK,EAAE,CAAC;4BACN,QAAQ,EAAE,OAAO;4BACjB,IAAI,EAAE,WAAW;4BACjB,WAAW,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC,YAAY,IAAI,GAAG,CAAC,MAAM,CAAC,EAAE,YAAY;yBACrE,CAAC;iBACH,CAAC,CAAC;YACL,CAAC;iBAAM,CAAC;gBACN,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,YAAY,EAAE,kBAAkB;oBAChC,KAAK,EAAE,CAAC;4BACN,QAAQ,EAAE,OAAO;4BACjB,IAAI,EAAE,WAAW;4BACjB,WAAW,EAAE,yBAAyB;yBACvC,CAAC;iBACH,CAAC,CAAC;YACL,CAAC;QACH,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,cAAc,CAAC,GAAY,EAAE,GAAa;QAC9C,IAAI,CAAC;YACH,MAAM,EAAE,YAAY,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YACxC,MAAM,QAAQ,GAAG,GAAG,CAAC,IAAI,CAAC;YAE1B,gBAAM,CAAC,IAAI,CAAC,mBAAmB,EAAE;gBAC/B,YAAY;gBACZ,EAAE;gBACF,MAAM,EAAE,GAAG,CAAC,IAAI,EAAE,EAAE;aACrB,CAAC,CAAC;YAEH,gCAAgC;YAChC,IAAI,QAAQ,CAAC,YAAY,KAAK,YAAY,EAAE,CAAC;gBAC3C,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,YAAY,EAAE,kBAAkB;oBAChC,KAAK,EAAE,CAAC;4BACN,QAAQ,EAAE,OAAO;4BACjB,IAAI,EAAE,SAAS;4BACf,WAAW,EAAE,oCAAoC,YAAY,SAAS,QAAQ,CAAC,YAAY,EAAE;yBAC9F,CAAC;iBACH,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,IAAI,QAAQ,CAAC,EAAE,IAAI,QAAQ,CAAC,EAAE,KAAK,EAAE,EAAE,CAAC;gBACtC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,YAAY,EAAE,kBAAkB;oBAChC,KAAK,EAAE,CAAC;4BACN,QAAQ,EAAE,OAAO;4BACjB,IAAI,EAAE,SAAS;4BACf,WAAW,EAAE,kCAAkC,EAAE,SAAS,QAAQ,CAAC,EAAE,EAAE;yBACxE,CAAC;iBACH,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,qCAAqC;YACrC,QAAQ,CAAC,EAAE,GAAG,EAAE,CAAC;YAEjB,MAAM,eAAe,GAAG,MAAM,gCAAc,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;YAEtE,uBAAuB;YACvB,MAAM,4CAAoB,CAAC,qBAAqB,CAC9C,YAAY,IAAI,EAAE,EAClB,EAAE,IAAI,EAAE,EACR,QAAQ,EACR,eAAe,CAChB,CAAC;YAEF,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QAC5B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,4BAA4B,EAAE,KAAK,CAAC,CAAC;YAElD,IAAI,CAAC,IAAA,wBAAU,EAAC,KAAK,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,IAAK,KAAa,CAAC,MAAM,KAAK,GAAG,EAAE,CAAC;gBAChG,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,YAAY,EAAE,kBAAkB;oBAChC,KAAK,EAAE,CAAC;4BACN,QAAQ,EAAE,OAAO;4BACjB,IAAI,EAAE,WAAW;4BACjB,WAAW,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC,YAAY,IAAI,GAAG,CAAC,MAAM,CAAC,EAAE,YAAY;yBACrE,CAAC;iBACH,CAAC,CAAC;YACL,CAAC;iBAAM,CAAC;gBACN,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,YAAY,EAAE,kBAAkB;oBAChC,KAAK,EAAE,CAAC;4BACN,QAAQ,EAAE,OAAO;4BACjB,IAAI,EAAE,WAAW;4BACjB,WAAW,EAAE,2BAA2B;yBACzC,CAAC;iBACH,CAAC,CAAC;YACL,CAAC;QACH,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,cAAc,CAAC,GAAY,EAAE,GAAa;QAC9C,IAAI,CAAC;YACH,MAAM,EAAE,YAAY,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YAExC,gBAAM,CAAC,IAAI,CAAC,mBAAmB,EAAE;gBAC/B,YAAY;gBACZ,EAAE;gBACF,MAAM,EAAE,GAAG,CAAC,IAAI,EAAE,EAAE;aACrB,CAAC,CAAC;YAEH,MAAM,gCAAc,CAAC,cAAc,CAAC,YAAY,IAAI,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;YAElE,uBAAuB;YACvB,MAAM,4CAAoB,CAAC,qBAAqB,CAC9C,YAAY,IAAI,EAAE,EAClB,EAAE,IAAI,EAAE,EACR,QAAQ,CACT,CAAC;YAEF,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;QACzB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,4BAA4B,EAAE,KAAK,CAAC,CAAC;YAElD,IAAI,CAAC,IAAA,wBAAU,EAAC,KAAK,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,IAAK,KAAa,CAAC,MAAM,KAAK,GAAG,EAAE,CAAC;gBAChG,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,YAAY,EAAE,kBAAkB;oBAChC,KAAK,EAAE,CAAC;4BACN,QAAQ,EAAE,OAAO;4BACjB,IAAI,EAAE,WAAW;4BACjB,WAAW,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC,YAAY,IAAI,GAAG,CAAC,MAAM,CAAC,EAAE,YAAY;yBACrE,CAAC;iBACH,CAAC,CAAC;YACL,CAAC;iBAAM,CAAC;gBACN,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,YAAY,EAAE,kBAAkB;oBAChC,KAAK,EAAE,CAAC;4BACN,QAAQ,EAAE,OAAO;4BACjB,IAAI,EAAE,WAAW;4BACjB,WAAW,EAAE,2BAA2B;yBACzC,CAAC;iBACH,CAAC,CAAC;YACL,CAAC;QACH,CAAC;IACH,CAAC;IAED,kCAAkC;IAClC,oBAAoB;IACpB,kCAAkC;IAElC;;OAEG;IACH,KAAK,CAAC,eAAe,CAAC,GAAY,EAAE,GAAa;QAC/C,IAAI,CAAC;YACH,MAAM,EAAE,YAAY,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YACpC,MAAM,YAAY,GAAqB,GAAG,CAAC,KAAY,CAAC;YAExD,gBAAM,CAAC,IAAI,CAAC,qBAAqB,EAAE;gBACjC,YAAY;gBACZ,YAAY,EAAE,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;gBACvC,MAAM,EAAE,GAAG,CAAC,IAAI,EAAE,EAAE;aACrB,CAAC,CAAC;YAEH,MAAM,aAAa,GAAG,MAAM,gCAAc,CAAC,eAAe,CAAC,YAAY,IAAI,EAAE,EAAE,YAAY,CAAC,CAAC;YAE7F,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAC1B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,6BAA6B,EAAE,KAAK,CAAC,CAAC;YACnD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,YAAY,EAAE,kBAAkB;gBAChC,KAAK,EAAE,CAAC;wBACN,QAAQ,EAAE,OAAO;wBACjB,IAAI,EAAE,WAAW;wBACjB,WAAW,EAAE,4BAA4B;qBAC1C,CAAC;aACH,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,kCAAkC;IAClC,+BAA+B;IAC/B,kCAAkC;IAElC;;OAEG;IACH,KAAK,CAAC,YAAY,CAAC,GAAY,EAAE,GAAa;QAC5C,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,GAAG,CAAC,IAAI,CAAC;YAExB,gBAAM,CAAC,IAAI,CAAC,8BAA8B,EAAE;gBAC1C,UAAU,EAAE,MAAM,CAAC,IAAI;gBACvB,UAAU,EAAE,MAAM,CAAC,KAAK,EAAE,MAAM,IAAI,CAAC;gBACrC,MAAM,EAAE,GAAG,CAAC,IAAI,EAAE,EAAE;aACrB,CAAC,CAAC;YAEH,IAAI,MAAM,CAAC,YAAY,KAAK,QAAQ,EAAE,CAAC;gBACrC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,YAAY,EAAE,kBAAkB;oBAChC,KAAK,EAAE,CAAC;4BACN,QAAQ,EAAE,OAAO;4BACjB,IAAI,EAAE,SAAS;4BACf,WAAW,EAAE,+BAA+B;yBAC7C,CAAC;iBACH,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,IAAI,CAAC,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC;gBACpD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,YAAY,EAAE,kBAAkB;oBAChC,KAAK,EAAE,CAAC;4BACN,QAAQ,EAAE,OAAO;4BACjB,IAAI,EAAE,SAAS;4BACf,WAAW,EAAE,0CAA0C;yBACxD,CAAC;iBACH,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,MAAM,aAAa,GAAkB;gBACnC,YAAY,EAAE,QAAQ;gBACtB,IAAI,EAAE,MAAM,CAAC,IAAI;gBACjB,SAAS,EAAE,MAAM,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,KAAU,EAAE,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE;gBAClE,SAAS,EAAE,MAAM,CAAC,SAAS;aAC5B,CAAC;YAEF,MAAM,MAAM,GAAG,MAAM,gCAAc,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;YAEhE,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACnB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,sCAAsC,EAAE,KAAK,CAAC,CAAC;YAC5D,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,YAAY,EAAE,kBAAkB;gBAChC,KAAK,EAAE,CAAC;wBACN,QAAQ,EAAE,OAAO;wBACjB,IAAI,EAAE,WAAW;wBACjB,WAAW,EAAE,qCAAqC;qBACnD,CAAC;aACH,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,kCAAkC;IAClC,8BAA8B;IAC9B,kCAAkC;IAElC;;OAEG;IACH,KAAK,CAAC,oBAAoB,CAAC,GAAY,EAAE,GAAa;QACpD,IAAI,CAAC;YACH,MAAM,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YAE1B,gBAAM,CAAC,IAAI,CAAC,4BAA4B,EAAE;gBACxC,SAAS,EAAE,EAAE;gBACb,MAAM,EAAE,GAAG,CAAC,IAAI,EAAE,EAAE;aACrB,CAAC,CAAC;YAEH,MAAM,MAAM,GAAG,MAAM,6CAAoB,CAAC,oBAAoB,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;YAEzE,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACnB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,mCAAmC,EAAE,KAAK,CAAC,CAAC;YACzD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,YAAY,EAAE,kBAAkB;gBAChC,KAAK,EAAE,CAAC;wBACN,QAAQ,EAAE,OAAO;wBACjB,IAAI,EAAE,WAAW;wBACjB,WAAW,EAAE,iCAAiC;qBAC/C,CAAC;aACH,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,kCAAkC;IAClC,wBAAwB;IACxB,kCAAkC;IAElC;;OAEG;IACH,KAAK,CAAC,gBAAgB,CAAC,GAAY,EAAE,GAAa;QAChD,IAAI,CAAC;YACH,MAAM,EAAE,YAAY,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YACpC,MAAM,QAAQ,GAAG,GAAG,CAAC,IAAI,CAAC;YAE1B,gBAAM,CAAC,IAAI,CAAC,qBAAqB,EAAE;gBACjC,YAAY;gBACZ,MAAM,EAAE,GAAG,CAAC,IAAI,EAAE,EAAE;aACrB,CAAC,CAAC;YAEH,MAAM,gBAAgB,GAAG,MAAM,6CAAoB,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;YAE/E,IAAI,gBAAgB,CAAC,KAAK,EAAE,CAAC;gBAC3B,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,YAAY,EAAE,kBAAkB;oBAChC,KAAK,EAAE,CAAC;4BACN,QAAQ,EAAE,aAAa;4BACvB,IAAI,EAAE,eAAe;4BACrB,WAAW,EAAE,mBAAmB;yBACjC,CAAC;iBACH,CAAC,CAAC;YACL,CAAC;iBAAM,CAAC;gBACN,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,YAAY,EAAE,kBAAkB;oBAChC,KAAK,EAAE;wBACL,GAAG,gBAAgB,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;4BACvC,QAAQ,EAAE,OAAgB;4BAC1B,IAAI,EAAE,KAAK,CAAC,IAAI;4BAChB,WAAW,EAAE,KAAK,CAAC,OAAO;4BAC1B,UAAU,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS;yBAClD,CAAC,CAAC;wBACH,GAAG,gBAAgB,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;4BAC3C,QAAQ,EAAE,SAAkB;4BAC5B,IAAI,EAAE,OAAO,CAAC,IAAI;4BAClB,WAAW,EAAE,OAAO,CAAC,OAAO;4BAC5B,UAAU,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS;yBACtD,CAAC,CAAC;qBACJ;iBACF,CAAC,CAAC;YACL,CAAC;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,8BAA8B,EAAE,KAAK,CAAC,CAAC;YACpD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,YAAY,EAAE,kBAAkB;gBAChC,KAAK,EAAE,CAAC;wBACN,QAAQ,EAAE,OAAO;wBACjB,IAAI,EAAE,WAAW;wBACjB,WAAW,EAAE,6BAA6B;qBAC3C,CAAC;aACH,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,kCAAkC;IAClC,qBAAqB;IACrB,kCAAkC;IAElC;;OAEG;IACH,KAAK,CAAC,cAAc,CAAC,GAAY,EAAE,GAAa;QAC9C,IAAI,CAAC;YACH,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;YAEtC,gBAAM,CAAC,IAAI,CAAC,yBAAyB,EAAE;gBACrC,MAAM,EAAE,GAAG,CAAC,IAAI,EAAE,EAAE;gBACpB,YAAY,EAAE,CAAC,CAAC,SAAS;aAC1B,CAAC,CAAC;YAEH,MAAM,MAAM,GAAG,MAAM,gCAAc,CAAC,OAAO,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;YAE9D,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACnB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,kCAAkC,EAAE,KAAK,CAAC,CAAC;YACxD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,YAAY,EAAE,kBAAkB;gBAChC,KAAK,EAAE,CAAC;wBACN,QAAQ,EAAE,OAAO;wBACjB,IAAI,EAAE,WAAW;wBACjB,WAAW,EAAE,iCAAiC;qBAC/C,CAAC;aACH,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,kCAAkC;IAClC,uBAAuB;IACvB,kCAAkC;IAElC;;OAEG;IACH,KAAK,CAAC,cAAc,CAAC,GAAY,EAAE,GAAa;QAC9C,IAAI,CAAC;YACH,gBAAM,CAAC,IAAI,CAAC,+BAA+B,EAAE;gBAC3C,SAAS,EAAE,GAAG,CAAC,GAAG,CAAC,YAAY,CAAC;gBAChC,EAAE,EAAE,GAAG,CAAC,EAAE;aACX,CAAC,CAAC;YAEH,MAAM,iBAAiB,GAAG,mCAAe,CAAC,oBAAoB,EAAE,CAAC;YAEjE,GAAG,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAC9B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,6BAA6B,EAAE,KAAK,CAAC,CAAC;YACnD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,KAAK,EAAE,iCAAiC;aACzC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,cAAc,CAAC,GAAY,EAAE,GAAa;QAC9C,IAAI,CAAC;YACH,MAAM,EAAE,SAAS,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YACjC,MAAM,WAAW,GAAmB,GAAG,CAAC,IAAI,CAAC;YAE7C,gBAAM,CAAC,IAAI,CAAC,8BAA8B,EAAE;gBAC1C,SAAS;gBACT,IAAI,EAAE,WAAW,CAAC,IAAI;gBACtB,SAAS,EAAE,WAAW,CAAC,OAAO,CAAC,SAAS;gBACxC,MAAM,EAAE,GAAG,CAAC,IAAI,EAAE,EAAE;aACrB,CAAC,CAAC;YAEH,IAAI,QAAQ,CAAC;YAEb,QAAQ,SAAS,EAAE,CAAC;gBAClB,KAAK,kCAAkC;oBACrC,QAAQ,GAAG,MAAM,mCAAe,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;oBACjE,MAAM;gBACR,KAAK,4BAA4B;oBAC/B,QAAQ,GAAG,MAAM,mCAAe,CAAC,0BAA0B,CAAC,WAAW,CAAC,CAAC;oBACzE,MAAM;gBACR,KAAK,uBAAuB;oBAC1B,QAAQ,GAAG,MAAM,mCAAe,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;oBACjE,MAAM;gBACR;oBACE,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;wBACnB,KAAK,EAAE,eAAe,SAAS,YAAY;qBAC5C,CAAC,CAAC;oBACH,OAAO;YACX,CAAC;YAED,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACrB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,6BAA6B,EAAE,KAAK,CAAC,CAAC;YACnD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,KAAK,EAAE,4BAA4B;aACpC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,kCAAkC;IAClC,0BAA0B;IAC1B,kCAAkC;IAElC;;OAEG;IACH,KAAK,CAAC,iBAAiB,CAAC,GAAY,EAAE,GAAa;QACjD,IAAI,CAAC;YACH,gBAAM,CAAC,IAAI,CAAC,uBAAuB,EAAE;gBACnC,MAAM,EAAE,GAAG,CAAC,IAAI,EAAE,EAAE;aACrB,CAAC,CAAC;YAEH,MAAM,aAAa,GAAG,4CAAoB,CAAC,uBAAuB,EAAE,CAAC;YAErE,MAAM,MAAM,GAAG;gBACb,YAAY,EAAE,QAAQ;gBACtB,IAAI,EAAE,WAAW;gBACjB,KAAK,EAAE,aAAa,CAAC,MAAM;gBAC3B,KAAK,EAAE,aAAa,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;oBAC/B,QAAQ,EAAE;wBACR,YAAY,EAAE,cAAc;wBAC5B,EAAE,EAAE,GAAG,CAAC,EAAE;wBACV,MAAM,EAAE,GAAG,CAAC,MAAM;wBAClB,QAAQ,EAAE,GAAG,CAAC,QAAQ;wBACtB,OAAO,EAAE,GAAG,CAAC,OAAO;wBACpB,MAAM,EAAE,2BAA2B;qBACpC;iBACF,CAAC,CAAC;aACJ,CAAC;YAEF,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACnB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,+BAA+B,EAAE,KAAK,CAAC,CAAC;YACrD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,YAAY,EAAE,kBAAkB;gBAChC,KAAK,EAAE,CAAC;wBACN,QAAQ,EAAE,OAAO;wBACjB,IAAI,EAAE,WAAW;wBACjB,WAAW,EAAE,8BAA8B;qBAC5C,CAAC;aACH,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,kCAAkC;IAClC,eAAe;IACf,kCAAkC;IAElC;;OAEG;IACH,KAAK,CAAC,WAAW,CAAC,GAAY,EAAE,GAAa;QAC3C,IAAI,CAAC;YACH,MAAM,CAAC,aAAa,EAAE,SAAS,EAAE,mBAAmB,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;gBACxE,gCAAc,CAAC,eAAe,EAAE;gBAChC,mCAAe,CAAC,eAAe,EAAE;gBACjC,4CAAoB,CAAC,eAAe,EAAE;aACvC,CAAC,CAAC;YAEH,MAAM,aAAa,GAAG,CAAC,aAAa,EAAE,SAAS,EAAE,mBAAmB,CAAC;iBAClE,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC;YAE3D,MAAM,YAAY,GAAG;gBACnB,MAAM,EAAE,aAAa;gBACrB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBACnC,UAAU,EAAE;oBACV,OAAO,EAAE,aAAa;oBACtB,QAAQ,EAAE,SAAS;oBACnB,aAAa,EAAE,mBAAmB;iBACnC;aACF,CAAC;YAEF,GAAG,CAAC,MAAM,CAAC,aAAa,KAAK,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACpE,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,sBAAsB,EAAE,KAAK,CAAC,CAAC;YAC5C,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,MAAM,EAAE,MAAM;gBACd,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBACnC,KAAK,EAAE,qBAAqB;aAC7B,CAAC,CAAC;QACL,CAAC;IACH,CAAC;CACF;AA1nBD,wCA0nBC;AAED,4BAA4B;AACf,QAAA,cAAc,GAAG,IAAI,cAAc,EAAE,CAAC","names":[],"sources":["/Users/rodrigo/claude-projects/OmniCare/backend/src/controllers/fhir.controller.ts"],"sourcesContent":["import { Request, Response } from 'express';\n\nimport { cdsHooksService } from '@/services/cds-hooks.service';\nimport { fhirResourcesService } from '@/services/fhir-resources.service';\nimport { medplumService } from '@/services/medplum.service';\nimport { subscriptionsService } from '@/services/subscriptions.service';\nimport { FHIRSearchParams, CDSHookRequest, BundleRequest } from '@/types/fhir';\nimport logger from '@/utils/logger';\nimport { getErrorMessage, hasMessage } from '@/utils/error.utils';\n\n/**\n * FHIR API Controller\n * Handles all FHIR REST API endpoints according to FHIR R4 specification\n */\nexport class FHIRController {\n\n  // ===============================\n  // FHIR METADATA AND CAPABILITY\n  // ===============================\n\n  /**\n   * GET /fhir/R4/metadata - FHIR Capability Statement\n   */\n  async getCapabilityStatement(req: Request, res: Response): Promise<void> {\n    try {\n      logger.fhir('Capability statement requested', {\n        userAgent: req.get('User-Agent'),\n        ip: req.ip,\n      });\n\n      const capabilityStatement = await medplumService.getCapabilityStatement();\n      \n      res.json(capabilityStatement);\n    } catch (error) {\n      logger.error('Failed to get capability statement:', error);\n      res.status(500).json({\n        resourceType: 'OperationOutcome',\n        issue: [{\n          severity: 'error',\n          code: 'exception',\n          diagnostics: 'Failed to retrieve capability statement',\n        }],\n      });\n    }\n  }\n\n  // ===============================\n  // RESOURCE CRUD OPERATIONS\n  // ===============================\n\n  /**\n   * POST /fhir/R4/{resourceType} - Create resource\n   */\n  async createResource(req: Request, res: Response): Promise<void> {\n    try {\n      const { resourceType } = req.params;\n      const resource = req.body;\n\n      logger.fhir('Creating resource', {\n        resourceType,\n        userId: req.user?.id,\n        hasId: !!resource.id,\n      });\n\n      // Validate resource type\n      if (resource.resourceType !== resourceType) {\n        res.status(400).json({\n          resourceType: 'OperationOutcome',\n          issue: [{\n            severity: 'error',\n            code: 'invalid',\n            diagnostics: `Resource type mismatch: expected ${resourceType}, got ${resource.resourceType}`,\n          }],\n        });\n        return;\n      }\n\n      // Remove id if present (server assigns IDs)\n      if (resource.id) {\n        delete resource.id;\n      }\n\n      const createdResource = await medplumService.createResource(resource);\n\n      // Notify subscriptions\n      await subscriptionsService.processResourceChange(\n        resourceType ?? '',\n        createdResource.id ?? '',\n        'create',\n        createdResource\n      );\n\n      res.status(201)\n        .location(`/fhir/R4/${resourceType}/${createdResource.id}`)\n        .json(createdResource);\n    } catch (error) {\n      logger.error('Failed to create resource:', error);\n      res.status(500).json({\n        resourceType: 'OperationOutcome',\n        issue: [{\n          severity: 'error',\n          code: 'exception',\n          diagnostics: 'Failed to create resource',\n        }],\n      });\n    }\n  }\n\n  /**\n   * GET /fhir/R4/{resourceType}/{id} - Read resource\n   */\n  async readResource(req: Request, res: Response): Promise<void> {\n    try {\n      const { resourceType, id } = req.params;\n\n      logger.fhir('Reading resource', {\n        resourceType,\n        id,\n        userId: req.user?.id,\n      });\n\n      const resource = await medplumService.readResource(resourceType ?? '', id ?? '');\n      \n      res.json(resource);\n    } catch (error) {\n      logger.error('Failed to read resource:', error);\n      \n      if ((hasMessage(error) && error.message.includes('not found')) || (error as any).status === 404) {\n        res.status(404).json({\n          resourceType: 'OperationOutcome',\n          issue: [{\n            severity: 'error',\n            code: 'not-found',\n            diagnostics: `${req.params.resourceType}/${req.params.id} not found`,\n          }],\n        });\n      } else {\n        res.status(500).json({\n          resourceType: 'OperationOutcome',\n          issue: [{\n            severity: 'error',\n            code: 'exception',\n            diagnostics: 'Failed to read resource',\n          }],\n        });\n      }\n    }\n  }\n\n  /**\n   * PUT /fhir/R4/{resourceType}/{id} - Update resource\n   */\n  async updateResource(req: Request, res: Response): Promise<void> {\n    try {\n      const { resourceType, id } = req.params;\n      const resource = req.body;\n\n      logger.fhir('Updating resource', {\n        resourceType,\n        id,\n        userId: req.user?.id,\n      });\n\n      // Validate resource type and ID\n      if (resource.resourceType !== resourceType) {\n        res.status(400).json({\n          resourceType: 'OperationOutcome',\n          issue: [{\n            severity: 'error',\n            code: 'invalid',\n            diagnostics: `Resource type mismatch: expected ${resourceType}, got ${resource.resourceType}`,\n          }],\n        });\n        return;\n      }\n\n      if (resource.id && resource.id !== id) {\n        res.status(400).json({\n          resourceType: 'OperationOutcome',\n          issue: [{\n            severity: 'error',\n            code: 'invalid',\n            diagnostics: `Resource ID mismatch: expected ${id}, got ${resource.id}`,\n          }],\n        });\n        return;\n      }\n\n      // Ensure resource has the correct ID\n      resource.id = id;\n\n      const updatedResource = await medplumService.updateResource(resource);\n\n      // Notify subscriptions\n      await subscriptionsService.processResourceChange(\n        resourceType ?? '',\n        id ?? '',\n        'update',\n        updatedResource\n      );\n\n      res.json(updatedResource);\n    } catch (error) {\n      logger.error('Failed to update resource:', error);\n      \n      if ((hasMessage(error) && error.message.includes('not found')) || (error as any).status === 404) {\n        res.status(404).json({\n          resourceType: 'OperationOutcome',\n          issue: [{\n            severity: 'error',\n            code: 'not-found',\n            diagnostics: `${req.params.resourceType}/${req.params.id} not found`,\n          }],\n        });\n      } else {\n        res.status(500).json({\n          resourceType: 'OperationOutcome',\n          issue: [{\n            severity: 'error',\n            code: 'exception',\n            diagnostics: 'Failed to update resource',\n          }],\n        });\n      }\n    }\n  }\n\n  /**\n   * DELETE /fhir/R4/{resourceType}/{id} - Delete resource\n   */\n  async deleteResource(req: Request, res: Response): Promise<void> {\n    try {\n      const { resourceType, id } = req.params;\n\n      logger.fhir('Deleting resource', {\n        resourceType,\n        id,\n        userId: req.user?.id,\n      });\n\n      await medplumService.deleteResource(resourceType ?? '', id ?? '');\n\n      // Notify subscriptions\n      await subscriptionsService.processResourceChange(\n        resourceType ?? '',\n        id ?? '',\n        'delete'\n      );\n\n      res.status(204).send();\n    } catch (error) {\n      logger.error('Failed to delete resource:', error);\n      \n      if ((hasMessage(error) && error.message.includes('not found')) || (error as any).status === 404) {\n        res.status(404).json({\n          resourceType: 'OperationOutcome',\n          issue: [{\n            severity: 'error',\n            code: 'not-found',\n            diagnostics: `${req.params.resourceType}/${req.params.id} not found`,\n          }],\n        });\n      } else {\n        res.status(500).json({\n          resourceType: 'OperationOutcome',\n          issue: [{\n            severity: 'error',\n            code: 'exception',\n            diagnostics: 'Failed to delete resource',\n          }],\n        });\n      }\n    }\n  }\n\n  // ===============================\n  // SEARCH OPERATIONS\n  // ===============================\n\n  /**\n   * GET /fhir/R4/{resourceType} - Search resources\n   */\n  async searchResources(req: Request, res: Response): Promise<void> {\n    try {\n      const { resourceType } = req.params;\n      const searchParams: FHIRSearchParams = req.query as any;\n\n      logger.fhir('Searching resources', {\n        resourceType,\n        searchParams: Object.keys(searchParams),\n        userId: req.user?.id,\n      });\n\n      const searchResults = await medplumService.searchResources(resourceType ?? '', searchParams);\n      \n      res.json(searchResults);\n    } catch (error) {\n      logger.error('Failed to search resources:', error);\n      res.status(500).json({\n        resourceType: 'OperationOutcome',\n        issue: [{\n          severity: 'error',\n          code: 'exception',\n          diagnostics: 'Failed to search resources',\n        }],\n      });\n    }\n  }\n\n  // ===============================\n  // BATCH/TRANSACTION OPERATIONS\n  // ===============================\n\n  /**\n   * POST /fhir/R4 - Process batch/transaction bundle\n   */\n  async processBatch(req: Request, res: Response): Promise<void> {\n    try {\n      const bundle = req.body;\n\n      logger.fhir('Processing batch/transaction', {\n        bundleType: bundle.type,\n        entryCount: bundle.entry?.length || 0,\n        userId: req.user?.id,\n      });\n\n      if (bundle.resourceType !== 'Bundle') {\n        res.status(400).json({\n          resourceType: 'OperationOutcome',\n          issue: [{\n            severity: 'error',\n            code: 'invalid',\n            diagnostics: 'Expected Bundle resource type',\n          }],\n        });\n        return;\n      }\n\n      if (!['batch', 'transaction'].includes(bundle.type)) {\n        res.status(400).json({\n          resourceType: 'OperationOutcome',\n          issue: [{\n            severity: 'error',\n            code: 'invalid',\n            diagnostics: 'Bundle type must be batch or transaction',\n          }],\n        });\n        return;\n      }\n\n      const bundleRequest: BundleRequest = {\n        resourceType: 'Bundle',\n        type: bundle.type,\n        resources: bundle.entry?.map((entry: any) => entry.resource) || [],\n        timestamp: bundle.timestamp,\n      };\n\n      const result = await medplumService.executeBatch(bundleRequest);\n      \n      res.json(result);\n    } catch (error) {\n      logger.error('Failed to process batch/transaction:', error);\n      res.status(500).json({\n        resourceType: 'OperationOutcome',\n        issue: [{\n          severity: 'error',\n          code: 'exception',\n          diagnostics: 'Failed to process batch/transaction',\n        }],\n      });\n    }\n  }\n\n  // ===============================\n  // PATIENT-SPECIFIC OPERATIONS\n  // ===============================\n\n  /**\n   * GET /fhir/R4/Patient/{id}/$everything - Get all patient data\n   */\n  async getPatientEverything(req: Request, res: Response): Promise<void> {\n    try {\n      const { id } = req.params;\n\n      logger.fhir('Getting patient everything', {\n        patientId: id,\n        userId: req.user?.id,\n      });\n\n      const result = await fhirResourcesService.getPatientEverything(id ?? '');\n      \n      res.json(result);\n    } catch (error) {\n      logger.error('Failed to get patient everything:', error);\n      res.status(500).json({\n        resourceType: 'OperationOutcome',\n        issue: [{\n          severity: 'error',\n          code: 'exception',\n          diagnostics: 'Failed to retrieve patient data',\n        }],\n      });\n    }\n  }\n\n  // ===============================\n  // VALIDATION OPERATIONS\n  // ===============================\n\n  /**\n   * POST /fhir/R4/{resourceType}/$validate - Validate resource\n   */\n  async validateResource(req: Request, res: Response): Promise<void> {\n    try {\n      const { resourceType } = req.params;\n      const resource = req.body;\n\n      logger.fhir('Validating resource', {\n        resourceType,\n        userId: req.user?.id,\n      });\n\n      const validationResult = await fhirResourcesService.validateResource(resource);\n      \n      if (validationResult.valid) {\n        res.status(200).json({\n          resourceType: 'OperationOutcome',\n          issue: [{\n            severity: 'information',\n            code: 'informational',\n            diagnostics: 'Resource is valid',\n          }],\n        });\n      } else {\n        res.status(400).json({\n          resourceType: 'OperationOutcome',\n          issue: [\n            ...validationResult.errors.map(error => ({\n              severity: 'error' as const,\n              code: error.code,\n              diagnostics: error.message,\n              expression: error.path ? [error.path] : undefined,\n            })),\n            ...validationResult.warnings.map(warning => ({\n              severity: 'warning' as const,\n              code: warning.code,\n              diagnostics: warning.message,\n              expression: warning.path ? [warning.path] : undefined,\n            })),\n          ],\n        });\n      }\n    } catch (error) {\n      logger.error('Failed to validate resource:', error);\n      res.status(500).json({\n        resourceType: 'OperationOutcome',\n        issue: [{\n          severity: 'error',\n          code: 'exception',\n          diagnostics: 'Failed to validate resource',\n        }],\n      });\n    }\n  }\n\n  // ===============================\n  // GRAPHQL OPERATIONS\n  // ===============================\n\n  /**\n   * POST /fhir/R4/$graphql - Execute GraphQL query\n   */\n  async executeGraphQL(req: Request, res: Response): Promise<void> {\n    try {\n      const { query, variables } = req.body;\n\n      logger.fhir('Executing GraphQL query', {\n        userId: req.user?.id,\n        hasVariables: !!variables,\n      });\n\n      const result = await medplumService.graphql(query, variables);\n      \n      res.json(result);\n    } catch (error) {\n      logger.error('Failed to execute GraphQL query:', error);\n      res.status(500).json({\n        resourceType: 'OperationOutcome',\n        issue: [{\n          severity: 'error',\n          code: 'exception',\n          diagnostics: 'Failed to execute GraphQL query',\n        }],\n      });\n    }\n  }\n\n  // ===============================\n  // CDS HOOKS OPERATIONS\n  // ===============================\n\n  /**\n   * GET /cds-services - CDS Hooks discovery\n   */\n  async getCDSServices(req: Request, res: Response): Promise<void> {\n    try {\n      logger.info('CDS Hooks discovery requested', {\n        userAgent: req.get('User-Agent'),\n        ip: req.ip,\n      });\n\n      const discoveryDocument = cdsHooksService.getDiscoveryDocument();\n      \n      res.json(discoveryDocument);\n    } catch (error) {\n      logger.error('Failed to get CDS services:', error);\n      res.status(500).json({\n        error: 'Failed to retrieve CDS services',\n      });\n    }\n  }\n\n  /**\n   * POST /cds-services/{service-id} - Execute CDS Hook\n   */\n  async executeCDSHook(req: Request, res: Response): Promise<void> {\n    try {\n      const { serviceId } = req.params;\n      const hookRequest: CDSHookRequest = req.body;\n\n      logger.info('CDS Hook execution requested', {\n        serviceId,\n        hook: hookRequest.hook,\n        patientId: hookRequest.context.patientId,\n        userId: req.user?.id,\n      });\n\n      let response;\n      \n      switch (serviceId) {\n        case 'omnicare-patient-risk-assessment':\n          response = await cdsHooksService.executePatientView(hookRequest);\n          break;\n        case 'omnicare-medication-safety':\n          response = await cdsHooksService.executeMedicationPrescribe(hookRequest);\n          break;\n        case 'omnicare-order-review':\n          response = await cdsHooksService.executeOrderReview(hookRequest);\n          break;\n        default:\n          res.status(404).json({\n            error: `CDS service ${serviceId} not found`,\n          });\n          return;\n      }\n\n      res.json(response);\n    } catch (error) {\n      logger.error('Failed to execute CDS hook:', error);\n      res.status(500).json({\n        error: 'Failed to execute CDS hook',\n      });\n    }\n  }\n\n  // ===============================\n  // SUBSCRIPTION OPERATIONS\n  // ===============================\n\n  /**\n   * GET /fhir/R4/Subscription - List subscriptions\n   */\n  async listSubscriptions(req: Request, res: Response): Promise<void> {\n    try {\n      logger.fhir('Listing subscriptions', {\n        userId: req.user?.id,\n      });\n\n      const subscriptions = subscriptionsService.listActiveSubscriptions();\n      \n      const bundle = {\n        resourceType: 'Bundle',\n        type: 'searchset',\n        total: subscriptions.length,\n        entry: subscriptions.map(sub => ({\n          resource: {\n            resourceType: 'Subscription',\n            id: sub.id,\n            status: sub.status,\n            criteria: sub.criteria,\n            channel: sub.channel,\n            reason: 'OmniCare EMR Subscription',\n          },\n        })),\n      };\n\n      res.json(bundle);\n    } catch (error) {\n      logger.error('Failed to list subscriptions:', error);\n      res.status(500).json({\n        resourceType: 'OperationOutcome',\n        issue: [{\n          severity: 'error',\n          code: 'exception',\n          diagnostics: 'Failed to list subscriptions',\n        }],\n      });\n    }\n  }\n\n  // ===============================\n  // HEALTH CHECK\n  // ===============================\n\n  /**\n   * GET /health - Health check endpoint\n   */\n  async healthCheck(req: Request, res: Response): Promise<void> {\n    try {\n      const [medplumHealth, cdsHealth, subscriptionsHealth] = await Promise.all([\n        medplumService.getHealthStatus(),\n        cdsHooksService.getHealthStatus(),\n        subscriptionsService.getHealthStatus(),\n      ]);\n\n      const overallStatus = [medplumHealth, cdsHealth, subscriptionsHealth]\n        .every(health => health.status === 'UP') ? 'UP' : 'DOWN';\n\n      const healthStatus = {\n        status: overallStatus,\n        timestamp: new Date().toISOString(),\n        components: {\n          medplum: medplumHealth,\n          cdsHooks: cdsHealth,\n          subscriptions: subscriptionsHealth,\n        },\n      };\n\n      res.status(overallStatus === 'UP' ? 200 : 503).json(healthStatus);\n    } catch (error) {\n      logger.error('Health check failed:', error);\n      res.status(503).json({\n        status: 'DOWN',\n        timestamp: new Date().toISOString(),\n        error: 'Health check failed',\n      });\n    }\n  }\n}\n\n// Export singleton instance\nexport const fhirController = new FHIRController();"],"version":3}