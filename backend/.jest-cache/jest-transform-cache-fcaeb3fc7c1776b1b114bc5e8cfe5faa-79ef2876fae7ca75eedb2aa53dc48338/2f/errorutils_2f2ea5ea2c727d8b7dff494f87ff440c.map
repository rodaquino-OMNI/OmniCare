{"file":"/Users/rodrigo/claude-projects/OmniCare/backend/src/utils/error.utils.ts","mappings":"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","names":[],"sources":["/Users/rodrigo/claude-projects/OmniCare/backend/src/utils/error.utils.ts"],"sourcesContent":["/**\n * Error handling utilities for TypeScript\n * Provides type-safe error handling with proper type guards\n */\n\n/**\n * Type guard to check if a value is an Error instance\n * @param value - The value to check\n * @returns True if the value is an Error instance\n */\nexport function isError(value: unknown): value is Error {\n  return (\n    value instanceof Error ||\n    (\n      typeof value === 'object' &&\n      value !== null &&\n      'message' in value &&\n      'name' in value &&\n      typeof (value as any).message === 'string' &&\n      typeof (value as any).name === 'string'\n    )\n  );\n}\n\n/**\n * Type guard to check if a value has a message property\n * @param value - The value to check\n * @returns True if the value has a message property\n */\nexport function hasMessage(value: unknown): value is { message: string } {\n  return (\n    typeof value === 'object' &&\n    value !== null &&\n    'message' in value &&\n    typeof (value as any).message === 'string'\n  );\n}\n\n/**\n * Type guard to check if a value has a code property\n * @param value - The value to check\n * @returns True if the value has a code property\n */\nexport function hasCode(value: unknown): value is { code: string } {\n  return (\n    typeof value === 'object' &&\n    value !== null &&\n    'code' in value &&\n    typeof (value as any).code === 'string'\n  );\n}\n\n/**\n * Safely extract error message from unknown error type\n * @param error - The error to extract message from\n * @returns A string error message\n */\nexport function getErrorMessage(error: unknown): string {\n  if (isError(error)) {\n    return error.message;\n  }\n  \n  if (hasMessage(error)) {\n    return error.message;\n  }\n  \n  if (typeof error === 'string') {\n    return error;\n  }\n  \n  return String(error);\n}\n\n/**\n * Safely extract error code from unknown error type\n * @param error - The error to extract code from\n * @returns The error code if available, undefined otherwise\n */\nexport function getErrorCode(error: unknown): string | undefined {\n  if (hasCode(error)) {\n    return error.code;\n  }\n  \n  if (isError(error) && 'code' in error) {\n    return (error as any).code;\n  }\n  \n  return undefined;\n}\n\n/**\n * Safely extract stack trace from unknown error type\n * @param error - The error to extract stack from\n * @returns The stack trace if available, undefined otherwise\n */\nexport function getErrorStack(error: unknown): string | undefined {\n  if (isError(error)) {\n    return error.stack;\n  }\n  \n  if (typeof error === 'object' && error !== null && 'stack' in error && typeof (error as any).stack === 'string') {\n    return (error as any).stack;\n  }\n  \n  return undefined;\n}\n\n/**\n * Create a normalized error object from unknown error type\n * @param error - The error to normalize\n * @param context - Optional context to add to the error\n * @returns A normalized error object\n */\nexport function normalizeError(error: unknown, context?: string): {\n  message: string;\n  code?: string;\n  stack?: string;\n  context?: string;\n} {\n  return {\n    message: getErrorMessage(error),\n    code: getErrorCode(error),\n    stack: getErrorStack(error),\n    context\n  };\n}\n\n/**\n * Check if an error is a specific type of error\n * @param error - The error to check\n * @param errorType - The error constructor to check against\n * @returns True if the error is of the specified type\n */\nexport function isErrorType<T extends Error>(\n  error: unknown, \n  errorType: new (...args: any[]) => T\n): error is T {\n  return error instanceof errorType;\n}\n\n/**\n * FHIR-specific error handling\n */\nexport interface FHIRError {\n  outcome?: {\n    issue?: Array<{\n      diagnostics?: string;\n      details?: {\n        text?: string;\n      };\n    }>;\n  };\n  response?: {\n    data?: {\n      resourceType?: string;\n      issue?: Array<{\n        diagnostics?: string;\n        details?: {\n          text?: string;\n        };\n      }>;\n    };\n  };\n}\n\n/**\n * Check if an error is a FHIR error\n * @param error - The error to check\n * @returns True if the error is a FHIR error\n */\nexport function isFHIRError(error: unknown): error is FHIRError {\n  if (typeof error !== 'object' || error === null) {\n    return false;\n  }\n  \n  const err = error as any;\n  return (\n    (err.outcome && Array.isArray(err.outcome.issue)) ||\n    (err.response?.data?.resourceType === 'OperationOutcome')\n  );\n}\n\n/**\n * Extract error message from FHIR error\n * @param error - The FHIR error\n * @returns The error message\n */\nexport function getFHIRErrorMessage(error: FHIRError): string {\n  if (error.outcome?.issue?.[0]) {\n    const issue = error.outcome.issue[0];\n    return issue.diagnostics || issue.details?.text || 'FHIR operation failed';\n  }\n  \n  if (error.response?.data?.issue?.[0]) {\n    const issue = error.response.data.issue[0];\n    return issue.diagnostics || issue.details?.text || 'FHIR operation failed';\n  }\n  \n  return 'FHIR operation failed';\n}\n\n/**\n * Handle errors in async functions with proper typing\n * @param fn - The async function to wrap\n * @returns A wrapped function that handles errors\n */\nexport function withErrorHandling<T extends (...args: any[]) => Promise<any>>(\n  fn: T,\n  errorHandler?: (error: unknown) => void\n): T {\n  return (async (...args: Parameters<T>) => {\n    try {\n      return await fn(...args);\n    } catch (error) {\n      if (errorHandler) {\n        errorHandler(error);\n      }\n      throw error;\n    }\n  }) as T;\n}"],"version":3}