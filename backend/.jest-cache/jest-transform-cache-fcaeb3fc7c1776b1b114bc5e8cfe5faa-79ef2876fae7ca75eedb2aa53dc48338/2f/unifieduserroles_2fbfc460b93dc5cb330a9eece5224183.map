{"file":"/Users/rodrigo/claude-projects/OmniCare/backend/src/types/unified-user-roles.ts","mappings":"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","names":[],"sources":["/Users/rodrigo/claude-projects/OmniCare/backend/src/types/unified-user-roles.ts"],"sourcesContent":["/**\n * Unified User Role System for OmniCare EMR Backend\n * \n * This module provides backend-specific unified role types that can work\n * with both frontend short form and backend long form roles.\n */\n\n// Short form roles (used in frontend)\nexport type UserRoleShort = \n  | 'physician'\n  | 'nurse' \n  | 'admin'\n  | 'system_admin'\n  | 'pharmacist'\n  | 'lab_tech'\n  | 'radiology_tech'\n  | 'patient'\n  | 'billing'\n  | 'receptionist';\n\n// Long form role names (canonical backend format)\nexport type UserRoleLong =\n  | 'physician'\n  | 'nursing_staff'\n  | 'administrative_staff'\n  | 'system_administrator'\n  | 'pharmacist'\n  | 'laboratory_technician'\n  | 'radiology_technician'\n  | 'patient'\n  | 'billing'\n  | 'receptionist';\n\n// Main UserRole type (defaults to long form for backend)\nexport type UserRole = UserRoleLong;\n\n// Unified type that includes both formats\nexport type UserRoleUnified = UserRoleShort | UserRoleLong;\n\n// Role mapping between short and long forms\nexport const ROLE_MAPPINGS = {\n  // Short to Long\n  'physician': 'physician',\n  'nurse': 'nursing_staff',\n  'admin': 'administrative_staff',\n  'system_admin': 'system_administrator',\n  'pharmacist': 'pharmacist',\n  'lab_tech': 'laboratory_technician',\n  'radiology_tech': 'radiology_technician',\n  'patient': 'patient',\n  'billing': 'billing',\n  'receptionist': 'receptionist',\n  \n  // Long to Short\n  'nursing_staff': 'nurse',\n  'administrative_staff': 'admin',\n  'system_administrator': 'system_admin',\n  'laboratory_technician': 'lab_tech',\n  'radiology_technician': 'radiology_tech'\n} as const;\n\n// Display names for roles\nexport const ROLE_DISPLAY_NAMES: Record<UserRoleLong, string> = {\n  'physician': 'Physician',\n  'nursing_staff': 'Nurse',\n  'administrative_staff': 'Administrator',\n  'system_administrator': 'System Administrator',\n  'pharmacist': 'Pharmacist',\n  'laboratory_technician': 'Lab Technician',\n  'radiology_technician': 'Radiology Technician',\n  'patient': 'Patient',\n  'billing': 'Billing',\n  'receptionist': 'Receptionist'\n};\n\n// Role hierarchy (higher numbers = higher privileges)\nexport const ROLE_HIERARCHY: Record<UserRoleLong, number> = {\n  'patient': 1,\n  'receptionist': 2,\n  'billing': 3,\n  'laboratory_technician': 4,\n  'radiology_technician': 4,\n  'nursing_staff': 5,\n  'pharmacist': 6,\n  'physician': 7,\n  'administrative_staff': 8,\n  'system_administrator': 9\n};\n\n// Utility functions\nexport function toCanonicalRole(role: UserRoleUnified): UserRoleLong {\n  if (role in ROLE_MAPPINGS) {\n    const mapped = ROLE_MAPPINGS[role as keyof typeof ROLE_MAPPINGS];\n    // Check if the mapped value is a long form role\n    const longRoles: UserRoleLong[] = [\n      'physician', 'nursing_staff', 'administrative_staff', 'system_administrator',\n      'pharmacist', 'laboratory_technician', 'radiology_technician', 'patient',\n      'billing', 'receptionist'\n    ];\n    return longRoles.includes(mapped as UserRoleLong) ? mapped as UserRoleLong : role as UserRoleLong;\n  }\n  return role as UserRoleLong;\n}\n\nexport function toShortRole(role: UserRoleUnified): UserRoleShort {\n  if (role in ROLE_MAPPINGS) {\n    const mapped = ROLE_MAPPINGS[role as keyof typeof ROLE_MAPPINGS];\n    // Check if the mapped value is a short form role\n    const shortRoles: UserRoleShort[] = [\n      'physician', 'nurse', 'admin', 'system_admin', 'pharmacist',\n      'lab_tech', 'radiology_tech', 'patient', 'billing', 'receptionist'\n    ];\n    return shortRoles.includes(mapped as UserRoleShort) ? mapped as UserRoleShort : role as UserRoleShort;\n  }\n  return role as UserRoleShort;\n}\n\nexport function isCanonicalRole(role: string): role is UserRoleLong {\n  const longRoles: UserRoleLong[] = [\n    'physician', 'nursing_staff', 'administrative_staff', 'system_administrator',\n    'pharmacist', 'laboratory_technician', 'radiology_technician', 'patient',\n    'billing', 'receptionist'\n  ];\n  return longRoles.includes(role as UserRoleLong);\n}\n\nexport function isShortRole(role: string): role is UserRoleShort {\n  const shortRoles: UserRoleShort[] = [\n    'physician', 'nurse', 'admin', 'system_admin', 'pharmacist',\n    'lab_tech', 'radiology_tech', 'patient', 'billing', 'receptionist'\n  ];\n  return shortRoles.includes(role as UserRoleShort);\n}\n\nexport function isValidRole(role: string): role is UserRoleUnified {\n  return isShortRole(role) || isCanonicalRole(role);\n}\n\nexport function getRoleDisplayName(role: UserRoleUnified): string {\n  const longRole = toCanonicalRole(role);\n  return ROLE_DISPLAY_NAMES[longRole] || role;\n}\n\nexport function hasHigherRole(role1: UserRoleUnified, role2: UserRoleUnified): boolean {\n  const longRole1 = toCanonicalRole(role1);\n  const longRole2 = toCanonicalRole(role2);\n  return ROLE_HIERARCHY[longRole1] > ROLE_HIERARCHY[longRole2];\n}\n\n// Constants for type-safe role comparisons\nexport const UserRoles = {\n  PHYSICIAN: 'physician' as const,\n  NURSING_STAFF: 'nursing_staff' as const,\n  ADMINISTRATIVE_STAFF: 'administrative_staff' as const,\n  SYSTEM_ADMINISTRATOR: 'system_administrator' as const,\n  PHARMACIST: 'pharmacist' as const,\n  LABORATORY_TECHNICIAN: 'laboratory_technician' as const,\n  RADIOLOGY_TECHNICIAN: 'radiology_technician' as const,\n  PATIENT: 'patient' as const,\n  BILLING: 'billing' as const,\n  RECEPTIONIST: 'receptionist' as const\n} as const;"],"version":3}