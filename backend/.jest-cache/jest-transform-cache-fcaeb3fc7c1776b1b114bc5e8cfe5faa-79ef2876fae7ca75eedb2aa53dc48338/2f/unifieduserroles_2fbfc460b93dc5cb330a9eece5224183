2762943506028c14d543ae27987c797c
"use strict";
/**
 * Unified User Role System for OmniCare EMR Backend
 *
 * This module provides backend-specific unified role types that can work
 * with both frontend short form and backend long form roles.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserRoles = exports.ROLE_HIERARCHY = exports.ROLE_DISPLAY_NAMES = exports.ROLE_MAPPINGS = void 0;
exports.toCanonicalRole = toCanonicalRole;
exports.toShortRole = toShortRole;
exports.isCanonicalRole = isCanonicalRole;
exports.isShortRole = isShortRole;
exports.isValidRole = isValidRole;
exports.getRoleDisplayName = getRoleDisplayName;
exports.hasHigherRole = hasHigherRole;
// Role mapping between short and long forms
exports.ROLE_MAPPINGS = {
    // Short to Long
    'physician': 'physician',
    'nurse': 'nursing_staff',
    'admin': 'administrative_staff',
    'system_admin': 'system_administrator',
    'pharmacist': 'pharmacist',
    'lab_tech': 'laboratory_technician',
    'radiology_tech': 'radiology_technician',
    'patient': 'patient',
    'billing': 'billing',
    'receptionist': 'receptionist',
    // Long to Short
    'nursing_staff': 'nurse',
    'administrative_staff': 'admin',
    'system_administrator': 'system_admin',
    'laboratory_technician': 'lab_tech',
    'radiology_technician': 'radiology_tech'
};
// Display names for roles
exports.ROLE_DISPLAY_NAMES = {
    'physician': 'Physician',
    'nursing_staff': 'Nurse',
    'administrative_staff': 'Administrator',
    'system_administrator': 'System Administrator',
    'pharmacist': 'Pharmacist',
    'laboratory_technician': 'Lab Technician',
    'radiology_technician': 'Radiology Technician',
    'patient': 'Patient',
    'billing': 'Billing',
    'receptionist': 'Receptionist'
};
// Role hierarchy (higher numbers = higher privileges)
exports.ROLE_HIERARCHY = {
    'patient': 1,
    'receptionist': 2,
    'billing': 3,
    'laboratory_technician': 4,
    'radiology_technician': 4,
    'nursing_staff': 5,
    'pharmacist': 6,
    'physician': 7,
    'administrative_staff': 8,
    'system_administrator': 9
};
// Utility functions
function toCanonicalRole(role) {
    if (role in exports.ROLE_MAPPINGS) {
        const mapped = exports.ROLE_MAPPINGS[role];
        // Check if the mapped value is a long form role
        const longRoles = [
            'physician', 'nursing_staff', 'administrative_staff', 'system_administrator',
            'pharmacist', 'laboratory_technician', 'radiology_technician', 'patient',
            'billing', 'receptionist'
        ];
        return longRoles.includes(mapped) ? mapped : role;
    }
    return role;
}
function toShortRole(role) {
    if (role in exports.ROLE_MAPPINGS) {
        const mapped = exports.ROLE_MAPPINGS[role];
        // Check if the mapped value is a short form role
        const shortRoles = [
            'physician', 'nurse', 'admin', 'system_admin', 'pharmacist',
            'lab_tech', 'radiology_tech', 'patient', 'billing', 'receptionist'
        ];
        return shortRoles.includes(mapped) ? mapped : role;
    }
    return role;
}
function isCanonicalRole(role) {
    const longRoles = [
        'physician', 'nursing_staff', 'administrative_staff', 'system_administrator',
        'pharmacist', 'laboratory_technician', 'radiology_technician', 'patient',
        'billing', 'receptionist'
    ];
    return longRoles.includes(role);
}
function isShortRole(role) {
    const shortRoles = [
        'physician', 'nurse', 'admin', 'system_admin', 'pharmacist',
        'lab_tech', 'radiology_tech', 'patient', 'billing', 'receptionist'
    ];
    return shortRoles.includes(role);
}
function isValidRole(role) {
    return isShortRole(role) || isCanonicalRole(role);
}
function getRoleDisplayName(role) {
    const longRole = toCanonicalRole(role);
    return exports.ROLE_DISPLAY_NAMES[longRole] || role;
}
function hasHigherRole(role1, role2) {
    const longRole1 = toCanonicalRole(role1);
    const longRole2 = toCanonicalRole(role2);
    return exports.ROLE_HIERARCHY[longRole1] > exports.ROLE_HIERARCHY[longRole2];
}
// Constants for type-safe role comparisons
exports.UserRoles = {
    PHYSICIAN: 'physician',
    NURSING_STAFF: 'nursing_staff',
    ADMINISTRATIVE_STAFF: 'administrative_staff',
    SYSTEM_ADMINISTRATOR: 'system_administrator',
    PHARMACIST: 'pharmacist',
    LABORATORY_TECHNICIAN: 'laboratory_technician',
    RADIOLOGY_TECHNICIAN: 'radiology_technician',
    PATIENT: 'patient',
    BILLING: 'billing',
    RECEPTIONIST: 'receptionist'
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3JvZHJpZ28vY2xhdWRlLXByb2plY3RzL09tbmlDYXJlL2JhY2tlbmQvc3JjL3R5cGVzL3VuaWZpZWQtdXNlci1yb2xlcy50cyIsIm1hcHBpbmdzIjoiO0FBQUE7Ozs7O0dBS0c7OztBQXFGSCwwQ0FZQztBQUVELGtDQVdDO0FBRUQsMENBT0M7QUFFRCxrQ0FNQztBQUVELGtDQUVDO0FBRUQsZ0RBR0M7QUFFRCxzQ0FJQztBQTVHRCw0Q0FBNEM7QUFDL0IsUUFBQSxhQUFhLEdBQUc7SUFDM0IsZ0JBQWdCO0lBQ2hCLFdBQVcsRUFBRSxXQUFXO0lBQ3hCLE9BQU8sRUFBRSxlQUFlO0lBQ3hCLE9BQU8sRUFBRSxzQkFBc0I7SUFDL0IsY0FBYyxFQUFFLHNCQUFzQjtJQUN0QyxZQUFZLEVBQUUsWUFBWTtJQUMxQixVQUFVLEVBQUUsdUJBQXVCO0lBQ25DLGdCQUFnQixFQUFFLHNCQUFzQjtJQUN4QyxTQUFTLEVBQUUsU0FBUztJQUNwQixTQUFTLEVBQUUsU0FBUztJQUNwQixjQUFjLEVBQUUsY0FBYztJQUU5QixnQkFBZ0I7SUFDaEIsZUFBZSxFQUFFLE9BQU87SUFDeEIsc0JBQXNCLEVBQUUsT0FBTztJQUMvQixzQkFBc0IsRUFBRSxjQUFjO0lBQ3RDLHVCQUF1QixFQUFFLFVBQVU7SUFDbkMsc0JBQXNCLEVBQUUsZ0JBQWdCO0NBQ2hDLENBQUM7QUFFWCwwQkFBMEI7QUFDYixRQUFBLGtCQUFrQixHQUFpQztJQUM5RCxXQUFXLEVBQUUsV0FBVztJQUN4QixlQUFlLEVBQUUsT0FBTztJQUN4QixzQkFBc0IsRUFBRSxlQUFlO0lBQ3ZDLHNCQUFzQixFQUFFLHNCQUFzQjtJQUM5QyxZQUFZLEVBQUUsWUFBWTtJQUMxQix1QkFBdUIsRUFBRSxnQkFBZ0I7SUFDekMsc0JBQXNCLEVBQUUsc0JBQXNCO0lBQzlDLFNBQVMsRUFBRSxTQUFTO0lBQ3BCLFNBQVMsRUFBRSxTQUFTO0lBQ3BCLGNBQWMsRUFBRSxjQUFjO0NBQy9CLENBQUM7QUFFRixzREFBc0Q7QUFDekMsUUFBQSxjQUFj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O0lBQ3pDLE1BQU0sU0FBUyxHQUFHLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN6QyxPQUFPLHNCQUFjLENBQUMsU0FBUyxDQUFDLEdBQUcsc0JBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUMvRCxDQUFDO0FBRUQsMkNBQTJDO0FBQzlCLFFBQUEsU0FBUyxHQUFHO0lBQ3ZCLFNBQVMsRUFBRSxXQUFvQjtJQUMvQixhQUFhLEVBQUUsZUFBd0I7SUFDdkMsb0JBQW9CLEVBQUUsc0JBQStCO0lBQ3JELG9CQUFvQixFQUFFLHNCQUErQjtJQUNyRCxVQUFVLEVBQUUsWUFBcUI7SUFDakMscUJBQXFCLEVBQUUsdUJBQWdDO0lBQ3ZELG9CQUFvQixFQUFFLHNCQUErQjtJQUNyRCxPQUFPLEVBQUUsU0FBa0I7SUFDM0IsT0FBTyxFQUFFLFNBQWtCO0lBQzNCLFlBQVksRUFBRSxjQUF1QjtDQUM3QixDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9yb2RyaWdvL2NsYXVkZS1wcm9qZWN0cy9PbW5pQ2FyZS9iYWNrZW5kL3NyYy90eXBlcy91bmlmaWVkLXVzZXItcm9sZXMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBVbmlmaWVkIFVzZXIgUm9sZSBTeXN0ZW0gZm9yIE9tbmlDYXJlIEVNUiBCYWNrZW5kXG4gKiBcbiAqIFRoaXMgbW9kdWxlIHByb3ZpZGVzIGJhY2tlbmQtc3BlY2lmaWMgdW5pZmllZCByb2xlIHR5cGVzIHRoYXQgY2FuIHdvcmtcbiAqIHdpdGggYm90aCBmcm9udGVuZCBzaG9ydCBmb3JtIGFuZCBiYWNrZW5kIGxvbmcgZm9ybSByb2xlcy5cbiAqL1xuXG4vLyBTaG9ydCBmb3JtIHJvbGVzICh1c2VkIGluIGZyb250ZW5kKVxuZXhwb3J0IHR5cGUgVXNlclJvbGVTaG9ydCA9IFxuICB8ICdwaHlzaWNpYW4nXG4gIHwgJ251cnNlJyBcbiAgfCAnYWRtaW4nXG4gIHwgJ3N5c3RlbV9hZG1pbidcbiAgfCAncGhhcm1hY2lzdCdcbiAgfCAnbGFiX3RlY2gnXG4gIHwgJ3JhZGlvbG9neV90ZWNoJ1xuICB8ICdwYXRpZW50J1xuICB8ICdiaWxsaW5nJ1xuICB8ICdyZWNlcHRpb25pc3QnO1xuXG4vLyBMb25nIGZvcm0gcm9sZSBuYW1lcyAoY2Fub25pY2FsIGJhY2tlbmQgZm9ybWF0KVxuZXhwb3J0IHR5cGUgVXNlclJvbGVMb25nID1cbiAgfCAncGh5c2ljaWFuJ1xuICB8ICdudXJzaW5nX3N0YWZmJ1xuICB8ICdhZG1pbmlzdHJhdGl2ZV9zdGFmZidcbiAgfCAnc3lzdGVtX2FkbWluaXN0cmF0b3InXG4gIHwgJ3BoYXJtYWNpc3QnXG4gIHwgJ2xhYm9yYXRvcnlfdGVjaG5pY2lhbidcbiAgfCAncmFkaW9sb2d5X3RlY2huaWNpYW4nXG4gIHwgJ3BhdGllbnQnXG4gIHwgJ2JpbGxpbmcnXG4gIHwgJ3JlY2VwdGlvbmlzdCc7XG5cbi8vIE1haW4gVXNlclJvbGUgdHlwZSAoZGVmYXVsdHMgdG8gbG9uZyBmb3JtIGZvciBiYWNrZW5kKVxuZXhwb3J0IHR5cGUgVXNlclJvbGUgPSBVc2VyUm9sZUxvbmc7XG5cbi8vIFVuaWZpZWQgdHlwZSB0aGF0IGluY2x1ZGVzIGJvdGggZm9ybWF0c1xuZXhwb3J0IHR5cGUgVXNlclJvbGVVbmlmaWVkID0gVXNlclJvbGVTaG9ydCB8IFVzZXJSb2xlTG9uZztcblxuLy8gUm9sZSBtYXBwaW5nIGJldHdlZW4gc2hvcnQgYW5kIGxvbmcgZm9ybXNcbmV4cG9ydCBjb25zdCBST0xFX01BUFBJTkdTID0ge1xuICAvLyBTaG9ydCB0byBMb25nXG4gICdwaHlzaWNpYW4nOiAncGh5c2ljaWFuJyxcbiAgJ251cnNlJzogJ251cnNpbmdfc3RhZmYnLFxuICAnYWRtaW4nOiAnYWRtaW5pc3RyYXRpdmVfc3RhZmYnLFxuICAnc3lzdGVtX2FkbWluJzogJ3N5c3RlbV9hZG1pbmlzdHJhdG9yJyxcbiAgJ3BoYXJtYWNpc3QnOiAncGhhcm1hY2lzdCcsXG4gICdsYWJfdGVjaCc6ICdsYWJvcmF0b3J5X3RlY2huaWNpYW4nLFxuICAncmFkaW9sb2d5X3RlY2gnOiAncmFkaW9sb2d5X3RlY2huaWNpYW4nLFxuICAncGF0aWVudCc6ICdwYXRpZW50JyxcbiAgJ2JpbGxpbmcnOiAnYmlsbGluZycsXG4gICdyZWNlcHRpb25pc3QnOiAncmVjZXB0aW9uaXN0JyxcbiAgXG4gIC8vIExvbmcgdG8gU2hvcnRcbiAgJ251cnNpbmdfc3RhZmYnOiAnbnVyc2UnLFxuICAnYWRtaW5pc3RyYXRpdmVfc3RhZmYnOiAnYWRtaW4nLFxuICAnc3lzdGVtX2FkbWluaXN0cmF0b3InOiAnc3lzdGVtX2FkbWluJyxcbiAgJ2xhYm9yYXRvcnlfdGVjaG5pY2lhbic6ICdsYWJfdGVjaCcsXG4gICdyYWRpb2xvZ3lfdGVjaG5pY2lhbic6ICdyYWRpb2xvZ3lfdGVjaCdcbn0gYXMgY29uc3Q7XG5cbi8vIERpc3BsYXkgbmFtZXMgZm9yIHJvbGVzXG5leHBvcnQgY29uc3QgUk9MRV9ESVNQTEFZX05BTUVTOiBSZWNvcmQ8VXNlclJvbGVMb25nLCBzdHJpbmc+ID0ge1xuICAncGh5c2ljaWFuJzogJ1BoeXNpY2lhbicsXG4gICdudXJzaW5nX3N0YWZmJzogJ051cnNlJyxcbiAgJ2FkbWluaXN0cmF0aXZlX3N0YWZmJzogJ0FkbWluaXN0cmF0b3InLFxuICAnc3lzdGVtX2FkbWluaXN0cmF0b3InOiAnU3lzdGVtIEFkbWluaXN0cmF0b3InLFxuICAncGhhcm1hY2lzdCc6ICdQaGFybWFjaXN0JyxcbiAgJ2xhYm9yYXRvcnlfdGVjaG5pY2lhbic6ICdMYWIgVGVjaG5pY2lhbicsXG4gICdyYWRpb2xvZ3lfdGVjaG5pY2lhbic6ICdSYWRpb2xvZ3kgVGVjaG5pY2lhbicsXG4gICdwYXRpZW50JzogJ1BhdGllbnQnLFxuICAnYmlsbGluZyc6ICdCaWxsaW5nJyxcbiAgJ3JlY2VwdGlvbmlzdCc6ICdSZWNlcHRpb25pc3QnXG59O1xuXG4vLyBSb2xlIGhpZXJhcmNoeSAoaGlnaGVyIG51bWJlcnMgPSBoaWdoZXIgcHJpdmlsZWdlcylcbmV4cG9ydCBjb25zdCBST0xFX0hJRVJBUkNIWTogUmVjb3JkPFVzZXJSb2xlTG9uZywgbnVtYmVyPiA9IHtcbiAgJ3BhdGllbnQnOiAxLFxuICAncmVjZXB0aW9uaXN0JzogMixcbiAgJ2JpbGxpbmcnOiAzLFxuICAnbGFib3JhdG9yeV90ZWNobmljaWFuJzogNCxcbiAgJ3JhZGlvbG9neV90ZWNobmljaWFuJzogNCxcbiAgJ251cnNpbmdfc3RhZmYnOiA1LFxuICAncGhhcm1hY2lzdCc6IDYsXG4gICdwaHlzaWNpYW4nOiA3LFxuICAnYWRtaW5pc3RyYXRpdmVfc3RhZmYnOiA4LFxuICAnc3lzdGVtX2FkbWluaXN0cmF0b3InOiA5XG59O1xuXG4vLyBVdGlsaXR5IGZ1bmN0aW9uc1xuZXhwb3J0IGZ1bmN0aW9uIHRvQ2Fub25pY2FsUm9sZShyb2xlOiBVc2VyUm9sZVVuaWZpZWQpOiBVc2VyUm9sZUxvbmcge1xuICBpZiAocm9sZSBpbiBST0xFX01BUFBJTkdTKSB7XG4gICAgY29uc3QgbWFwcGVkID0gUk9MRV9NQVBQSU5HU1tyb2xlIGFzIGtleW9mIHR5cGVvZiBST0xFX01BUFBJTkdTXTtcbiAgICAvLyBDaGVjayBpZiB0aGUgbWFwcGVkIHZhbHVlIGlzIGEgbG9uZyBmb3JtIHJvbGVcbiAgICBjb25zdCBsb25nUm9sZXM6IFVzZXJSb2xlTG9uZ1tdID0gW1xuICAgICAgJ3BoeXNpY2lhbicsICdudXJzaW5nX3N0YWZmJywgJ2FkbWluaXN0cmF0aXZlX3N0YWZmJywgJ3N5c3RlbV9hZG1pbmlzdHJhdG9yJyxcbiAgICAgICdwaGFybWFjaXN0JywgJ2xhYm9yYXRvcnlfdGVjaG5pY2lhbicsICdyYWRpb2xvZ3lfdGVjaG5pY2lhbicsICdwYXRpZW50JyxcbiAgICAgICdiaWxsaW5nJywgJ3JlY2VwdGlvbmlzdCdcbiAgICBdO1xuICAgIHJldHVybiBsb25nUm9sZXMuaW5jbHVkZXMobWFwcGVkIGFzIFVzZXJSb2xlTG9uZykgPyBtYXBwZWQgYXMgVXNlclJvbGVMb25nIDogcm9sZSBhcyBVc2VyUm9sZUxvbmc7XG4gIH1cbiAgcmV0dXJuIHJvbGUgYXMgVXNlclJvbGVMb25nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdG9TaG9ydFJvbGUocm9sZTogVXNlclJvbGVVbmlmaWVkKTogVXNlclJvbGVTaG9ydCB7XG4gIGlmIChyb2xlIGluIFJPTEVfTUFQUElOR1MpIHtcbiAgICBjb25zdCBtYXBwZWQgPSBST0xFX01BUFBJTkdTW3JvbGUgYXMga2V5b2YgdHlwZW9mIFJPTEVfTUFQUElOR1NdO1xuICAgIC8vIENoZWNrIGlmIHRoZSBtYXBwZWQgdmFsdWUgaXMgYSBzaG9ydCBmb3JtIHJvbGVcbiAgICBjb25zdCBzaG9ydFJvbGVzOiBVc2VyUm9sZVNob3J0W10gPSBbXG4gICAgICAncGh5c2ljaWFuJywgJ251cnNlJywgJ2FkbWluJywgJ3N5c3RlbV9hZG1pbicsICdwaGFybWFjaXN0JyxcbiAgICAgICdsYWJfdGVjaCcsICdyYWRpb2xvZ3lfdGVjaCcsICdwYXRpZW50JywgJ2JpbGxpbmcnLCAncmVjZXB0aW9uaXN0J1xuICAgIF07XG4gICAgcmV0dXJuIHNob3J0Um9sZXMuaW5jbHVkZXMobWFwcGVkIGFzIFVzZXJSb2xlU2hvcnQpID8gbWFwcGVkIGFzIFVzZXJSb2xlU2hvcnQgOiByb2xlIGFzIFVzZXJSb2xlU2hvcnQ7XG4gIH1cbiAgcmV0dXJuIHJvbGUgYXMgVXNlclJvbGVTaG9ydDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQ2Fub25pY2FsUm9sZShyb2xlOiBzdHJpbmcpOiByb2xlIGlzIFVzZXJSb2xlTG9uZyB7XG4gIGNvbnN0IGxvbmdSb2xlczogVXNlclJvbGVMb25nW10gPSBbXG4gICAgJ3BoeXNpY2lhbicsICdudXJzaW5nX3N0YWZmJywgJ2FkbWluaXN0cmF0aXZlX3N0YWZmJywgJ3N5c3RlbV9hZG1pbmlzdHJhdG9yJyxcbiAgICAncGhhcm1hY2lzdCcsICdsYWJvcmF0b3J5X3RlY2huaWNpYW4nLCAncmFkaW9sb2d5X3RlY2huaWNpYW4nLCAncGF0aWVudCcsXG4gICAgJ2JpbGxpbmcnLCAncmVjZXB0aW9uaXN0J1xuICBdO1xuICByZXR1cm4gbG9uZ1JvbGVzLmluY2x1ZGVzKHJvbGUgYXMgVXNlclJvbGVMb25nKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzU2hvcnRSb2xlKHJvbGU6IHN0cmluZyk6IHJvbGUgaXMgVXNlclJvbGVTaG9ydCB7XG4gIGNvbnN0IHNob3J0Um9sZXM6IFVzZXJSb2xlU2hvcnRbXSA9IFtcbiAgICAncGh5c2ljaWFuJywgJ251cnNlJywgJ2FkbWluJywgJ3N5c3RlbV9hZG1pbicsICdwaGFybWFjaXN0JyxcbiAgICAnbGFiX3RlY2gnLCAncmFkaW9sb2d5X3RlY2gnLCAncGF0aWVudCcsICdiaWxsaW5nJywgJ3JlY2VwdGlvbmlzdCdcbiAgXTtcbiAgcmV0dXJuIHNob3J0Um9sZXMuaW5jbHVkZXMocm9sZSBhcyBVc2VyUm9sZVNob3J0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWRSb2xlKHJvbGU6IHN0cmluZyk6IHJvbGUgaXMgVXNlclJvbGVVbmlmaWVkIHtcbiAgcmV0dXJuIGlzU2hvcnRSb2xlKHJvbGUpIHx8IGlzQ2Fub25pY2FsUm9sZShyb2xlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFJvbGVEaXNwbGF5TmFtZShyb2xlOiBVc2VyUm9sZVVuaWZpZWQpOiBzdHJpbmcge1xuICBjb25zdCBsb25nUm9sZSA9IHRvQ2Fub25pY2FsUm9sZShyb2xlKTtcbiAgcmV0dXJuIFJPTEVfRElTUExBWV9OQU1FU1tsb25nUm9sZV0gfHwgcm9sZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhc0hpZ2hlclJvbGUocm9sZTE6IFVzZXJSb2xlVW5pZmllZCwgcm9sZTI6IFVzZXJSb2xlVW5pZmllZCk6IGJvb2xlYW4ge1xuICBjb25zdCBsb25nUm9sZTEgPSB0b0Nhbm9uaWNhbFJvbGUocm9sZTEpO1xuICBjb25zdCBsb25nUm9sZTIgPSB0b0Nhbm9uaWNhbFJvbGUocm9sZTIpO1xuICByZXR1cm4gUk9MRV9ISUVSQVJDSFlbbG9uZ1JvbGUxXSA+IFJPTEVfSElFUkFSQ0hZW2xvbmdSb2xlMl07XG59XG5cbi8vIENvbnN0YW50cyBmb3IgdHlwZS1zYWZlIHJvbGUgY29tcGFyaXNvbnNcbmV4cG9ydCBjb25zdCBVc2VyUm9sZXMgPSB7XG4gIFBIWVNJQ0lBTjogJ3BoeXNpY2lhbicgYXMgY29uc3QsXG4gIE5VUlNJTkdfU1RBRkY6ICdudXJzaW5nX3N0YWZmJyBhcyBjb25zdCxcbiAgQURNSU5JU1RSQVRJVkVfU1RBRkY6ICdhZG1pbmlzdHJhdGl2ZV9zdGFmZicgYXMgY29uc3QsXG4gIFNZU1RFTV9BRE1JTklTVFJBVE9SOiAnc3lzdGVtX2FkbWluaXN0cmF0b3InIGFzIGNvbnN0LFxuICBQSEFSTUFDSVNUOiAncGhhcm1hY2lzdCcgYXMgY29uc3QsXG4gIExBQk9SQVRPUllfVEVDSE5JQ0lBTjogJ2xhYm9yYXRvcnlfdGVjaG5pY2lhbicgYXMgY29uc3QsXG4gIFJBRElPTE9HWV9URUNITklDSUFOOiAncmFkaW9sb2d5X3RlY2huaWNpYW4nIGFzIGNvbnN0LFxuICBQQVRJRU5UOiAncGF0aWVudCcgYXMgY29uc3QsXG4gIEJJTExJTkc6ICdiaWxsaW5nJyBhcyBjb25zdCxcbiAgUkVDRVBUSU9OSVNUOiAncmVjZXB0aW9uaXN0JyBhcyBjb25zdFxufSBhcyBjb25zdDsiXSwidmVyc2lvbiI6M30=