{"file":"/Users/rodrigo/claude-projects/OmniCare/backend/src/services/subscriptions.service.ts","mappings":"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","names":[],"sources":["/Users/rodrigo/claude-projects/OmniCare/backend/src/services/subscriptions.service.ts"],"sourcesContent":["import { EventEmitter } from 'events';\n\nimport { Subscription, Bundle } from '@medplum/fhirtypes';\nimport WebSocket from 'ws';\n\nimport { medplumService } from './medplum.service';\n\nimport config from '@/config';\nimport { SubscriptionConfig } from '@/types/fhir';\nimport logger from '@/utils/logger';\nimport { getErrorMessage } from '@/utils/error.utils';\n\ninterface ActiveSubscription {\n  id: string;\n  criteria: string;\n  channel: {\n    type: string;\n    endpoint?: string;\n    payload?: string;\n    headers?: Record<string, string>;\n  };\n  status: 'active' | 'off' | 'error';\n  clientInfo?: {\n    userId?: string;\n    clientId?: string;\n    connection?: WebSocket;\n  };\n  lastNotification?: Date;\n  errorCount: number;\n  createdAt: Date;\n}\n\n/**\n * FHIR Subscriptions and Real-time Updates Service\n * Implements FHIR R4 Subscription framework with WebSocket and REST-hook support\n */\nexport class SubscriptionsService extends EventEmitter {\n  private activeSubscriptions = new Map<string, ActiveSubscription>();\n  private wsServer?: WebSocket.Server;\n  private connectedClients = new Map<string, WebSocket>();\n  private subscriptionPatterns = new Map<string, RegExp>();\n  private healthCheckInterval?: NodeJS.Timeout;\n\n  constructor() {\n    super();\n    this.setupWebSocketServer();\n    this.startHealthCheck();\n  }\n\n  // ===============================\n  // WEBSOCKET SERVER SETUP\n  // ===============================\n\n  /**\n   * Setup WebSocket server for real-time subscriptions\n   */\n  private setupWebSocketServer(): void {\n    try {\n      this.wsServer = new WebSocket.Server({\n        port: config.subscriptions.websocketPort,\n        maxPayload: 1024 * 1024, // 1MB\n        perMessageDeflate: true,\n      });\n\n      this.wsServer.on('connection', (ws, request) => {\n        this.handleWebSocketConnection(ws, request);\n      });\n\n      this.wsServer.on('error', (error) => {\n        logger.error('WebSocket server error:', error);\n      });\n\n      logger.info(`WebSocket server started on port ${config.subscriptions.websocketPort}`);\n    } catch (error) {\n      logger.error('Failed to setup WebSocket server:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Handle new WebSocket connection\n   */\n  private handleWebSocketConnection(ws: WebSocket, request: any): void {\n    const clientId = this.generateClientId();\n    const clientInfo = {\n      id: clientId,\n      remoteAddress: request.socket.remoteAddress,\n      userAgent: request.headers['user-agent'],\n      connectedAt: new Date(),\n    };\n\n    logger.info('WebSocket client connected', clientInfo);\n\n    // Store connection\n    this.connectedClients.set(clientId, ws);\n\n    // Handle messages from client\n    ws.on('message', (data) => {\n      this.handleWebSocketMessage(clientId, data);\n    });\n\n    // Handle connection close\n    ws.on('close', (code, reason) => {\n      logger.info('WebSocket client disconnected', {\n        clientId,\n        code,\n        reason: reason.toString(),\n      });\n      this.connectedClients.delete(clientId);\n      this.removeClientSubscriptions(clientId);\n    });\n\n    // Handle connection errors\n    ws.on('error', (error) => {\n      logger.error('WebSocket client error:', { clientId, error });\n      this.connectedClients.delete(clientId);\n      this.removeClientSubscriptions(clientId);\n    });\n\n    // Send welcome message\n    this.sendWebSocketMessage(clientId, {\n      type: 'welcome',\n      clientId,\n      timestamp: new Date().toISOString(),\n      supportedChannels: ['websocket', 'rest-hook'],\n    });\n  }\n\n  /**\n   * Handle WebSocket messages from clients\n   */\n  private handleWebSocketMessage(clientId: string, data: WebSocket.RawData): void {\n    try {\n      const message = JSON.parse(data.toString());\n      logger.debug('WebSocket message received', { clientId, type: message.type });\n\n      switch (message.type) {\n        case 'subscribe':\n          this.handleWebSocketSubscribe(clientId, message);\n          break;\n        case 'unsubscribe':\n          this.handleWebSocketUnsubscribe(clientId, message);\n          break;\n        case 'ping':\n          this.sendWebSocketMessage(clientId, { type: 'pong', timestamp: new Date().toISOString() });\n          break;\n        default:\n          logger.warn('Unknown WebSocket message type', { clientId, type: message.type });\n      }\n    } catch (error) {\n      logger.error('Failed to handle WebSocket message:', { clientId, error });\n      this.sendWebSocketMessage(clientId, {\n        type: 'error',\n        message: 'Invalid message format',\n        timestamp: new Date().toISOString(),\n      });\n    }\n  }\n\n  /**\n   * Handle WebSocket subscription request\n   */\n  private async handleWebSocketSubscribe(clientId: string, message: any): Promise<void> {\n    try {\n      const subscriptionConfig: SubscriptionConfig = {\n        criteria: message.criteria,\n        channel: {\n          type: 'websocket',\n          payload: message.payload || 'application/fhir+json',\n        },\n        reason: message.reason || 'WebSocket subscription',\n        status: 'active',\n      };\n\n      const subscriptionId = await this.createSubscription(subscriptionConfig, {\n        userId: message.userId,\n        clientId,\n        connection: this.connectedClients.get(clientId),\n      });\n\n      this.sendWebSocketMessage(clientId, {\n        type: 'subscription-created',\n        subscriptionId,\n        criteria: message.criteria,\n        timestamp: new Date().toISOString(),\n      });\n\n      logger.info('WebSocket subscription created', { clientId, subscriptionId, criteria: message.criteria });\n    } catch (error) {\n      logger.error('Failed to create WebSocket subscription:', { clientId, error });\n      this.sendWebSocketMessage(clientId, {\n        type: 'error',\n        message: 'Failed to create subscription',\n        timestamp: new Date().toISOString(),\n      });\n    }\n  }\n\n  /**\n   * Handle WebSocket unsubscribe request\n   */\n  private async handleWebSocketUnsubscribe(clientId: string, message: any): Promise<void> {\n    try {\n      await this.removeSubscription(message.subscriptionId);\n      \n      this.sendWebSocketMessage(clientId, {\n        type: 'subscription-removed',\n        subscriptionId: message.subscriptionId,\n        timestamp: new Date().toISOString(),\n      });\n\n      logger.info('WebSocket subscription removed', { clientId, subscriptionId: message.subscriptionId });\n    } catch (error) {\n      logger.error('Failed to remove WebSocket subscription:', { clientId, error });\n      this.sendWebSocketMessage(clientId, {\n        type: 'error',\n        message: 'Failed to remove subscription',\n        timestamp: new Date().toISOString(),\n      });\n    }\n  }\n\n  /**\n   * Send WebSocket message to client\n   */\n  private sendWebSocketMessage(clientId: string, message: any): void {\n    const ws = this.connectedClients.get(clientId);\n    if (ws && ws.readyState === WebSocket.OPEN) {\n      ws.send(JSON.stringify(message));\n    }\n  }\n\n  // ===============================\n  // SUBSCRIPTION MANAGEMENT\n  // ===============================\n\n  /**\n   * Create a new FHIR subscription\n   */\n  async createSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    clientInfo?: any\n  ): Promise<string> {\n    try {\n      // Create FHIR Subscription resource\n      const subscription: Subscription = {\n        resourceType: 'Subscription',\n        status: subscriptionConfig.status,\n        reason: subscriptionConfig.reason,\n        criteria: subscriptionConfig.criteria,\n        channel: {\n          type: subscriptionConfig.channel.type as any,\n          endpoint: subscriptionConfig.channel.endpoint,\n          payload: subscriptionConfig.channel.payload,\n          header: subscriptionConfig.channel.header,\n        },\n        extension: [\n          {\n            url: 'http://omnicare.com/fhir/StructureDefinition/subscription-metadata',\n            valueString: JSON.stringify({\n              createdBy: 'OmniCare EMR',\n              clientInfo: clientInfo ? {\n                userId: clientInfo.userId,\n                clientId: clientInfo.clientId,\n              } : undefined,\n            }),\n          },\n        ],\n      };\n\n      const createdSubscription = await medplumService.createResource(subscription);\n      \n      if (!createdSubscription.id) {\n        throw new Error('Failed to create subscription - no ID returned');\n      }\n\n      // Store active subscription\n      const activeSubscription: ActiveSubscription = {\n        id: createdSubscription.id,\n        criteria: subscriptionConfig.criteria,\n        channel: subscriptionConfig.channel,\n        status: 'active',\n        clientInfo,\n        errorCount: 0,\n        createdAt: new Date(),\n      };\n\n      this.activeSubscriptions.set(createdSubscription.id, activeSubscription);\n\n      // Compile criteria pattern for efficient matching\n      this.compileSubscriptionPattern(createdSubscription.id, subscriptionConfig.criteria);\n\n      logger.info('FHIR subscription created', {\n        subscriptionId: createdSubscription.id,\n        criteria: subscriptionConfig.criteria,\n        channelType: subscriptionConfig.channel.type,\n      });\n\n      return createdSubscription.id;\n    } catch (error) {\n      logger.error('Failed to create FHIR subscription:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Remove a subscription\n   */\n  async removeSubscription(subscriptionId: string): Promise<void> {\n    try {\n      // Update FHIR subscription status to 'off'\n      const subscription = await medplumService.readResource<Subscription>('Subscription', subscriptionId);\n      subscription.status = 'off';\n      await medplumService.updateResource(subscription);\n\n      // Remove from active subscriptions\n      this.activeSubscriptions.delete(subscriptionId);\n      this.subscriptionPatterns.delete(subscriptionId);\n\n      logger.info('Subscription removed', { subscriptionId });\n    } catch (error) {\n      logger.error('Failed to remove subscription:', { subscriptionId, error });\n      throw error;\n    }\n  }\n\n  /**\n   * List active subscriptions\n   */\n  listActiveSubscriptions(): ActiveSubscription[] {\n    return Array.from(this.activeSubscriptions.values());\n  }\n\n  /**\n   * Get subscription by ID\n   */\n  getSubscription(subscriptionId: string): ActiveSubscription | undefined {\n    return this.activeSubscriptions.get(subscriptionId);\n  }\n\n  // ===============================\n  // NOTIFICATION PROCESSING\n  // ===============================\n\n  /**\n   * Process resource change and send notifications\n   */\n  async processResourceChange(\n    resourceType: string,\n    resourceId: string,\n    operation: 'create' | 'update' | 'delete',\n    resource?: any\n  ): Promise<void> {\n    try {\n      const resourcePath = `${resourceType}/${resourceId}`;\n      \n      logger.debug('Processing resource change', {\n        resourceType,\n        resourceId,\n        operation,\n      });\n\n      // Find matching subscriptions\n      const matchingSubscriptions = this.findMatchingSubscriptions(resourcePath, operation);\n\n      if (matchingSubscriptions.length === 0) {\n        logger.debug('No matching subscriptions found', { resourcePath, operation });\n        return;\n      }\n\n      // Create notification bundle\n      const bundle = await this.createNotificationBundle(\n        resourceType,\n        resourceId,\n        operation,\n        resource,\n        matchingSubscriptions\n      );\n\n      // Send notifications to each matching subscription\n      for (const subscription of matchingSubscriptions) {\n        await this.sendNotification(subscription, bundle);\n      }\n\n      logger.debug('Resource change notifications sent', {\n        resourcePath,\n        operation,\n        notificationsSent: matchingSubscriptions.length,\n      });\n    } catch (error) {\n      logger.error('Failed to process resource change:', {\n        resourceType,\n        resourceId,\n        operation,\n        error,\n      });\n    }\n  }\n\n  /**\n   * Find subscriptions matching the resource change\n   */\n  private findMatchingSubscriptions(\n    resourcePath: string,\n    operation: string\n  ): ActiveSubscription[] {\n    const matchingSubscriptions: ActiveSubscription[] = [];\n\n    for (const [subscriptionId, subscription] of this.activeSubscriptions) {\n      if (subscription.status !== 'active') continue;\n\n      const pattern = this.subscriptionPatterns.get(subscriptionId);\n      if (pattern && pattern.test(resourcePath)) {\n        matchingSubscriptions.push(subscription);\n      }\n    }\n\n    return matchingSubscriptions;\n  }\n\n  /**\n   * Create notification bundle\n   */\n  private async createNotificationBundle(\n    resourceType: string,\n    resourceId: string,\n    operation: string,\n    resource: any,\n    subscriptions: ActiveSubscription[]\n  ): Promise<Bundle> {\n    const bundle: Bundle = {\n      resourceType: 'Bundle',\n      id: `notification-${Date.now()}`,\n      type: 'history',\n      timestamp: new Date().toISOString(),\n      entry: [],\n    };\n\n    // Add the changed resource to the bundle\n    if (resource && operation !== 'delete') {\n      bundle.entry?.push({\n        resource,\n        request: {\n          method: operation === 'create' ? 'POST' : 'PUT',\n          url: `${resourceType}/${resourceId}`,\n        },\n        response: {\n          status: operation === 'create' ? '201' : '200',\n        },\n      });\n    } else if (operation === 'delete') {\n      bundle.entry?.push({\n        request: {\n          method: 'DELETE',\n          url: `${resourceType}/${resourceId}`,\n        },\n        response: {\n          status: '204',\n        },\n      });\n    }\n\n    return bundle;\n  }\n\n  /**\n   * Send notification to subscription\n   */\n  private async sendNotification(\n    subscription: ActiveSubscription,\n    bundle: Bundle\n  ): Promise<void> {\n    try {\n      subscription.lastNotification = new Date();\n\n      switch (subscription.channel.type) {\n        case 'websocket':\n          await this.sendWebSocketNotification(subscription, bundle);\n          break;\n        case 'rest-hook':\n          await this.sendRestHookNotification(subscription, bundle);\n          break;\n        case 'email':\n          await this.sendEmailNotification(subscription, bundle);\n          break;\n        default:\n          logger.warn('Unsupported subscription channel type', {\n            subscriptionId: subscription.id,\n            channelType: subscription.channel.type,\n          });\n      }\n\n      // Reset error count on successful notification\n      subscription.errorCount = 0;\n    } catch (error) {\n      logger.error('Failed to send notification:', {\n        subscriptionId: subscription.id,\n        channelType: subscription.channel.type,\n        error,\n      });\n\n      subscription.errorCount++;\n      \n      // Disable subscription after too many errors\n      if (subscription.errorCount >= 5) {\n        subscription.status = 'error';\n        logger.error('Subscription disabled due to repeated errors', {\n          subscriptionId: subscription.id,\n        });\n      }\n    }\n  }\n\n  /**\n   * Send WebSocket notification\n   */\n  private async sendWebSocketNotification(\n    subscription: ActiveSubscription,\n    bundle: Bundle\n  ): Promise<void> {\n    if (!subscription.clientInfo?.connection) {\n      throw new Error('WebSocket connection not available');\n    }\n\n    const ws = subscription.clientInfo.connection;\n    if (ws.readyState !== WebSocket.OPEN) {\n      throw new Error('WebSocket connection not open');\n    }\n\n    const notification = {\n      type: 'notification',\n      subscriptionId: subscription.id,\n      timestamp: new Date().toISOString(),\n      bundle,\n    };\n\n    ws.send(JSON.stringify(notification));\n    \n    logger.debug('WebSocket notification sent', {\n      subscriptionId: subscription.id,\n      clientId: subscription.clientInfo.clientId,\n    });\n  }\n\n  /**\n   * Send REST hook notification\n   */\n  private async sendRestHookNotification(\n    subscription: ActiveSubscription,\n    bundle: Bundle\n  ): Promise<void> {\n    if (!subscription.channel.endpoint) {\n      throw new Error('REST hook endpoint not configured');\n    }\n\n    const axios = (await import('axios')).default;\n    \n    const headers: Record<string, string> = {\n      'Content-Type': subscription.channel.payload || 'application/fhir+json',\n      'User-Agent': 'OmniCare-FHIR-Subscriptions/1.0',\n    };\n\n    // Add custom headers if configured\n    if (subscription.channel.headers) {\n      Object.assign(headers, subscription.channel.headers);\n    }\n\n    await axios.post(subscription.channel.endpoint, bundle, {\n      headers,\n      timeout: 30000,\n    });\n\n    logger.debug('REST hook notification sent', {\n      subscriptionId: subscription.id,\n      endpoint: subscription.channel.endpoint,\n    });\n  }\n\n  /**\n   * Send email notification (placeholder)\n   */\n  private async sendEmailNotification(\n    subscription: ActiveSubscription,\n    bundle: Bundle\n  ): Promise<void> {\n    // Placeholder for email notification implementation\n    logger.info('Email notification would be sent', {\n      subscriptionId: subscription.id,\n    });\n  }\n\n  // ===============================\n  // UTILITY METHODS\n  // ===============================\n\n  /**\n   * Compile subscription criteria to regex pattern\n   */\n  private compileSubscriptionPattern(subscriptionId: string, criteria: string): void {\n    try {\n      // Simple criteria parsing - in practice, this would be more sophisticated\n      // Example: \"Patient?status=active\" -> /^Patient\\/.*$/\n      const [resourceType] = criteria.split('?');\n      const pattern = new RegExp(`^${resourceType}/.*$`);\n      this.subscriptionPatterns.set(subscriptionId, pattern);\n    } catch (error) {\n      logger.error('Failed to compile subscription pattern:', {\n        subscriptionId,\n        criteria,\n        error,\n      });\n    }\n  }\n\n  /**\n   * Generate unique client ID\n   */\n  private generateClientId(): string {\n    return `ws-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Remove all subscriptions for a client\n   */\n  private removeClientSubscriptions(clientId: string): void {\n    const subscriptionsToRemove: string[] = [];\n\n    for (const [subscriptionId, subscription] of this.activeSubscriptions) {\n      if (subscription.clientInfo?.clientId === clientId) {\n        subscriptionsToRemove.push(subscriptionId);\n      }\n    }\n\n    subscriptionsToRemove.forEach(subscriptionId => {\n      this.removeSubscription(subscriptionId).catch(error => {\n        logger.error('Failed to remove client subscription:', { subscriptionId, error });\n      });\n    });\n\n    logger.info('Client subscriptions removed', {\n      clientId,\n      subscriptionsRemoved: subscriptionsToRemove.length,\n    });\n  }\n\n  /**\n   * Start health check for subscriptions\n   */\n  private startHealthCheck(): void {\n    this.healthCheckInterval = setInterval(() => {\n      this.performHealthCheck();\n    }, 60000); // Check every minute\n  }\n\n  /**\n   * Perform health check on active subscriptions\n   */\n  private performHealthCheck(): void {\n    const now = new Date();\n    let activeCount = 0;\n    let errorCount = 0;\n\n    for (const [subscriptionId, subscription] of this.activeSubscriptions) {\n      if (subscription.status === 'active') {\n        activeCount++;\n      } else if (subscription.status === 'error') {\n        errorCount++;\n      }\n\n      // Check for stale WebSocket connections\n      if (subscription.channel.type === 'websocket' && subscription.clientInfo?.connection) {\n        const ws = subscription.clientInfo.connection;\n        if (ws.readyState !== WebSocket.OPEN) {\n          logger.warn('Removing subscription with closed WebSocket connection', {\n            subscriptionId,\n          });\n          this.removeSubscription(subscriptionId).catch(console.error);\n        }\n      }\n    }\n\n    logger.debug('Subscription health check completed', {\n      totalSubscriptions: this.activeSubscriptions.size,\n      activeSubscriptions: activeCount,\n      errorSubscriptions: errorCount,\n      connectedClients: this.connectedClients.size,\n    });\n  }\n\n  /**\n   * Get health status\n   */\n  async getHealthStatus(): Promise<{ status: string; details: any }> {\n    try {\n      const details = {\n        websocketServer: {\n          port: config.subscriptions.websocketPort,\n          connectedClients: this.connectedClients.size,\n          maxConnections: config.subscriptions.maxConnections,\n        },\n        subscriptions: {\n          total: this.activeSubscriptions.size,\n          active: Array.from(this.activeSubscriptions.values()).filter(s => s.status === 'active').length,\n          error: Array.from(this.activeSubscriptions.values()).filter(s => s.status === 'error').length,\n        },\n      };\n\n      return { status: 'UP', details };\n    } catch (error) {\n      return {\n        status: 'DOWN',\n        details: { error: getErrorMessage(error) },\n      };\n    }\n  }\n\n  /**\n   * Shutdown subscriptions service\n   */\n  async shutdown(): Promise<void> {\n    logger.info('Shutting down subscriptions service...');\n\n    // Clear health check interval\n    if (this.healthCheckInterval) {\n      clearInterval(this.healthCheckInterval);\n    }\n\n    // Close all WebSocket connections\n    for (const [clientId, ws] of this.connectedClients) {\n      ws.close(1001, 'Server shutting down');\n    }\n    this.connectedClients.clear();\n\n    // Close WebSocket server\n    if (this.wsServer) {\n      this.wsServer.close();\n    }\n\n    // Clear active subscriptions\n    this.activeSubscriptions.clear();\n    this.subscriptionPatterns.clear();\n\n    logger.info('Subscriptions service shutdown complete');\n  }\n}\n\n// Export singleton instance\nexport const subscriptionsService = new SubscriptionsService();"],"version":3}