188dbb46272a67cd699b6b5ccfd71f2d
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.subscriptionsService = exports.SubscriptionsService = void 0;
const events_1 = require("events");
const ws_1 = __importDefault(require("ws"));
const medplum_service_1 = require("./medplum.service");
const config_1 = __importDefault(require("@/config"));
const logger_1 = __importDefault(require("@/utils/logger"));
const error_utils_1 = require("@/utils/error.utils");
/**
 * FHIR Subscriptions and Real-time Updates Service
 * Implements FHIR R4 Subscription framework with WebSocket and REST-hook support
 */
class SubscriptionsService extends events_1.EventEmitter {
    activeSubscriptions = new Map();
    wsServer;
    connectedClients = new Map();
    subscriptionPatterns = new Map();
    healthCheckInterval;
    constructor() {
        super();
        this.setupWebSocketServer();
        this.startHealthCheck();
    }
    // ===============================
    // WEBSOCKET SERVER SETUP
    // ===============================
    /**
     * Setup WebSocket server for real-time subscriptions
     */
    setupWebSocketServer() {
        try {
            this.wsServer = new ws_1.default.Server({
                port: config_1.default.subscriptions.websocketPort,
                maxPayload: 1024 * 1024, // 1MB
                perMessageDeflate: true,
            });
            this.wsServer.on('connection', (ws, request) => {
                this.handleWebSocketConnection(ws, request);
            });
            this.wsServer.on('error', (error) => {
                logger_1.default.error('WebSocket server error:', error);
            });
            logger_1.default.info(`WebSocket server started on port ${config_1.default.subscriptions.websocketPort}`);
        }
        catch (error) {
            logger_1.default.error('Failed to setup WebSocket server:', error);
            throw error;
        }
    }
    /**
     * Handle new WebSocket connection
     */
    handleWebSocketConnection(ws, request) {
        const clientId = this.generateClientId();
        const clientInfo = {
            id: clientId,
            remoteAddress: request.socket.remoteAddress,
            userAgent: request.headers['user-agent'],
            connectedAt: new Date(),
        };
        logger_1.default.info('WebSocket client connected', clientInfo);
        // Store connection
        this.connectedClients.set(clientId, ws);
        // Handle messages from client
        ws.on('message', (data) => {
            this.handleWebSocketMessage(clientId, data);
        });
        // Handle connection close
        ws.on('close', (code, reason) => {
            logger_1.default.info('WebSocket client disconnected', {
                clientId,
                code,
                reason: reason.toString(),
            });
            this.connectedClients.delete(clientId);
            this.removeClientSubscriptions(clientId);
        });
        // Handle connection errors
        ws.on('error', (error) => {
            logger_1.default.error('WebSocket client error:', { clientId, error });
            this.connectedClients.delete(clientId);
            this.removeClientSubscriptions(clientId);
        });
        // Send welcome message
        this.sendWebSocketMessage(clientId, {
            type: 'welcome',
            clientId,
            timestamp: new Date().toISOString(),
            supportedChannels: ['websocket', 'rest-hook'],
        });
    }
    /**
     * Handle WebSocket messages from clients
     */
    handleWebSocketMessage(clientId, data) {
        try {
            const message = JSON.parse(data.toString());
            logger_1.default.debug('WebSocket message received', { clientId, type: message.type });
            switch (message.type) {
                case 'subscribe':
                    this.handleWebSocketSubscribe(clientId, message);
                    break;
                case 'unsubscribe':
                    this.handleWebSocketUnsubscribe(clientId, message);
                    break;
                case 'ping':
                    this.sendWebSocketMessage(clientId, { type: 'pong', timestamp: new Date().toISOString() });
                    break;
                default:
                    logger_1.default.warn('Unknown WebSocket message type', { clientId, type: message.type });
            }
        }
        catch (error) {
            logger_1.default.error('Failed to handle WebSocket message:', { clientId, error });
            this.sendWebSocketMessage(clientId, {
                type: 'error',
                message: 'Invalid message format',
                timestamp: new Date().toISOString(),
            });
        }
    }
    /**
     * Handle WebSocket subscription request
     */
    async handleWebSocketSubscribe(clientId, message) {
        try {
            const subscriptionConfig = {
                criteria: message.criteria,
                channel: {
                    type: 'websocket',
                    payload: message.payload || 'application/fhir+json',
                },
                reason: message.reason || 'WebSocket subscription',
                status: 'active',
            };
            const subscriptionId = await this.createSubscription(subscriptionConfig, {
                userId: message.userId,
                clientId,
                connection: this.connectedClients.get(clientId),
            });
            this.sendWebSocketMessage(clientId, {
                type: 'subscription-created',
                subscriptionId,
                criteria: message.criteria,
                timestamp: new Date().toISOString(),
            });
            logger_1.default.info('WebSocket subscription created', { clientId, subscriptionId, criteria: message.criteria });
        }
        catch (error) {
            logger_1.default.error('Failed to create WebSocket subscription:', { clientId, error });
            this.sendWebSocketMessage(clientId, {
                type: 'error',
                message: 'Failed to create subscription',
                timestamp: new Date().toISOString(),
            });
        }
    }
    /**
     * Handle WebSocket unsubscribe request
     */
    async handleWebSocketUnsubscribe(clientId, message) {
        try {
            await this.removeSubscription(message.subscriptionId);
            this.sendWebSocketMessage(clientId, {
                type: 'subscription-removed',
                subscriptionId: message.subscriptionId,
                timestamp: new Date().toISOString(),
            });
            logger_1.default.info('WebSocket subscription removed', { clientId, subscriptionId: message.subscriptionId });
        }
        catch (error) {
            logger_1.default.error('Failed to remove WebSocket subscription:', { clientId, error });
            this.sendWebSocketMessage(clientId, {
                type: 'error',
                message: 'Failed to remove subscription',
                timestamp: new Date().toISOString(),
            });
        }
    }
    /**
     * Send WebSocket message to client
     */
    sendWebSocketMessage(clientId, message) {
        const ws = this.connectedClients.get(clientId);
        if (ws && ws.readyState === ws_1.default.OPEN) {
            ws.send(JSON.stringify(message));
        }
    }
    // ===============================
    // SUBSCRIPTION MANAGEMENT
    // ===============================
    /**
     * Create a new FHIR subscription
     */
    async createSubscription(subscriptionConfig, clientInfo) {
        try {
            // Create FHIR Subscription resource
            const subscription = {
                resourceType: 'Subscription',
                status: subscriptionConfig.status,
                reason: subscriptionConfig.reason,
                criteria: subscriptionConfig.criteria,
                channel: {
                    type: subscriptionConfig.channel.type,
                    endpoint: subscriptionConfig.channel.endpoint,
                    payload: subscriptionConfig.channel.payload,
                    header: subscriptionConfig.channel.header,
                },
                extension: [
                    {
                        url: 'http://omnicare.com/fhir/StructureDefinition/subscription-metadata',
                        valueString: JSON.stringify({
                            createdBy: 'OmniCare EMR',
                            clientInfo: clientInfo ? {
                                userId: clientInfo.userId,
                                clientId: clientInfo.clientId,
                            } : undefined,
                        }),
                    },
                ],
            };
            const createdSubscription = await medplum_service_1.medplumService.createResource(subscription);
            if (!createdSubscription.id) {
                throw new Error('Failed to create subscription - no ID returned');
            }
            // Store active subscription
            const activeSubscription = {
                id: createdSubscription.id,
                criteria: subscriptionConfig.criteria,
                channel: subscriptionConfig.channel,
                status: 'active',
                clientInfo,
                errorCount: 0,
                createdAt: new Date(),
            };
            this.activeSubscriptions.set(createdSubscription.id, activeSubscription);
            // Compile criteria pattern for efficient matching
            this.compileSubscriptionPattern(createdSubscription.id, subscriptionConfig.criteria);
            logger_1.default.info('FHIR subscription created', {
                subscriptionId: createdSubscription.id,
                criteria: subscriptionConfig.criteria,
                channelType: subscriptionConfig.channel.type,
            });
            return createdSubscription.id;
        }
        catch (error) {
            logger_1.default.error('Failed to create FHIR subscription:', error);
            throw error;
        }
    }
    /**
     * Remove a subscription
     */
    async removeSubscription(subscriptionId) {
        try {
            // Update FHIR subscription status to 'off'
            const subscription = await medplum_service_1.medplumService.readResource('Subscription', subscriptionId);
            subscription.status = 'off';
            await medplum_service_1.medplumService.updateResource(subscription);
            // Remove from active subscriptions
            this.activeSubscriptions.delete(subscriptionId);
            this.subscriptionPatterns.delete(subscriptionId);
            logger_1.default.info('Subscription removed', { subscriptionId });
        }
        catch (error) {
            logger_1.default.error('Failed to remove subscription:', { subscriptionId, error });
            throw error;
        }
    }
    /**
     * List active subscriptions
     */
    listActiveSubscriptions() {
        return Array.from(this.activeSubscriptions.values());
    }
    /**
     * Get subscription by ID
     */
    getSubscription(subscriptionId) {
        return this.activeSubscriptions.get(subscriptionId);
    }
    // ===============================
    // NOTIFICATION PROCESSING
    // ===============================
    /**
     * Process resource change and send notifications
     */
    async processResourceChange(resourceType, resourceId, operation, resource) {
        try {
            const resourcePath = `${resourceType}/${resourceId}`;
            logger_1.default.debug('Processing resource change', {
                resourceType,
                resourceId,
                operation,
            });
            // Find matching subscriptions
            const matchingSubscriptions = this.findMatchingSubscriptions(resourcePath, operation);
            if (matchingSubscriptions.length === 0) {
                logger_1.default.debug('No matching subscriptions found', { resourcePath, operation });
                return;
            }
            // Create notification bundle
            const bundle = await this.createNotificationBundle(resourceType, resourceId, operation, resource, matchingSubscriptions);
            // Send notifications to each matching subscription
            for (const subscription of matchingSubscriptions) {
                await this.sendNotification(subscription, bundle);
            }
            logger_1.default.debug('Resource change notifications sent', {
                resourcePath,
                operation,
                notificationsSent: matchingSubscriptions.length,
            });
        }
        catch (error) {
            logger_1.default.error('Failed to process resource change:', {
                resourceType,
                resourceId,
                operation,
                error,
            });
        }
    }
    /**
     * Find subscriptions matching the resource change
     */
    findMatchingSubscriptions(resourcePath, operation) {
        const matchingSubscriptions = [];
        for (const [subscriptionId, subscription] of this.activeSubscriptions) {
            if (subscription.status !== 'active')
                continue;
            const pattern = this.subscriptionPatterns.get(subscriptionId);
            if (pattern && pattern.test(resourcePath)) {
                matchingSubscriptions.push(subscription);
            }
        }
        return matchingSubscriptions;
    }
    /**
     * Create notification bundle
     */
    async createNotificationBundle(resourceType, resourceId, operation, resource, subscriptions) {
        const bundle = {
            resourceType: 'Bundle',
            id: `notification-${Date.now()}`,
            type: 'history',
            timestamp: new Date().toISOString(),
            entry: [],
        };
        // Add the changed resource to the bundle
        if (resource && operation !== 'delete') {
            bundle.entry?.push({
                resource,
                request: {
                    method: operation === 'create' ? 'POST' : 'PUT',
                    url: `${resourceType}/${resourceId}`,
                },
                response: {
                    status: operation === 'create' ? '201' : '200',
                },
            });
        }
        else if (operation === 'delete') {
            bundle.entry?.push({
                request: {
                    method: 'DELETE',
                    url: `${resourceType}/${resourceId}`,
                },
                response: {
                    status: '204',
                },
            });
        }
        return bundle;
    }
    /**
     * Send notification to subscription
     */
    async sendNotification(subscription, bundle) {
        try {
            subscription.lastNotification = new Date();
            switch (subscription.channel.type) {
                case 'websocket':
                    await this.sendWebSocketNotification(subscription, bundle);
                    break;
                case 'rest-hook':
                    await this.sendRestHookNotification(subscription, bundle);
                    break;
                case 'email':
                    await this.sendEmailNotification(subscription, bundle);
                    break;
                default:
                    logger_1.default.warn('Unsupported subscription channel type', {
                        subscriptionId: subscription.id,
                        channelType: subscription.channel.type,
                    });
            }
            // Reset error count on successful notification
            subscription.errorCount = 0;
        }
        catch (error) {
            logger_1.default.error('Failed to send notification:', {
                subscriptionId: subscription.id,
                channelType: subscription.channel.type,
                error,
            });
            subscription.errorCount++;
            // Disable subscription after too many errors
            if (subscription.errorCount >= 5) {
                subscription.status = 'error';
                logger_1.default.error('Subscription disabled due to repeated errors', {
                    subscriptionId: subscription.id,
                });
            }
        }
    }
    /**
     * Send WebSocket notification
     */
    async sendWebSocketNotification(subscription, bundle) {
        if (!subscription.clientInfo?.connection) {
            throw new Error('WebSocket connection not available');
        }
        const ws = subscription.clientInfo.connection;
        if (ws.readyState !== ws_1.default.OPEN) {
            throw new Error('WebSocket connection not open');
        }
        const notification = {
            type: 'notification',
            subscriptionId: subscription.id,
            timestamp: new Date().toISOString(),
            bundle,
        };
        ws.send(JSON.stringify(notification));
        logger_1.default.debug('WebSocket notification sent', {
            subscriptionId: subscription.id,
            clientId: subscription.clientInfo.clientId,
        });
    }
    /**
     * Send REST hook notification
     */
    async sendRestHookNotification(subscription, bundle) {
        if (!subscription.channel.endpoint) {
            throw new Error('REST hook endpoint not configured');
        }
        const axios = (await Promise.resolve().then(() => __importStar(require('axios')))).default;
        const headers = {
            'Content-Type': subscription.channel.payload || 'application/fhir+json',
            'User-Agent': 'OmniCare-FHIR-Subscriptions/1.0',
        };
        // Add custom headers if configured
        if (subscription.channel.headers) {
            Object.assign(headers, subscription.channel.headers);
        }
        await axios.post(subscription.channel.endpoint, bundle, {
            headers,
            timeout: 30000,
        });
        logger_1.default.debug('REST hook notification sent', {
            subscriptionId: subscription.id,
            endpoint: subscription.channel.endpoint,
        });
    }
    /**
     * Send email notification (placeholder)
     */
    async sendEmailNotification(subscription, bundle) {
        // Placeholder for email notification implementation
        logger_1.default.info('Email notification would be sent', {
            subscriptionId: subscription.id,
        });
    }
    // ===============================
    // UTILITY METHODS
    // ===============================
    /**
     * Compile subscription criteria to regex pattern
     */
    compileSubscriptionPattern(subscriptionId, criteria) {
        try {
            // Simple criteria parsing - in practice, this would be more sophisticated
            // Example: "Patient?status=active" -> /^Patient\/.*$/
            const [resourceType] = criteria.split('?');
            const pattern = new RegExp(`^${resourceType}/.*$`);
            this.subscriptionPatterns.set(subscriptionId, pattern);
        }
        catch (error) {
            logger_1.default.error('Failed to compile subscription pattern:', {
                subscriptionId,
                criteria,
                error,
            });
        }
    }
    /**
     * Generate unique client ID
     */
    generateClientId() {
        return `ws-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
    }
    /**
     * Remove all subscriptions for a client
     */
    removeClientSubscriptions(clientId) {
        const subscriptionsToRemove = [];
        for (const [subscriptionId, subscription] of this.activeSubscriptions) {
            if (subscription.clientInfo?.clientId === clientId) {
                subscriptionsToRemove.push(subscriptionId);
            }
        }
        subscriptionsToRemove.forEach(subscriptionId => {
            this.removeSubscription(subscriptionId).catch(error => {
                logger_1.default.error('Failed to remove client subscription:', { subscriptionId, error });
            });
        });
        logger_1.default.info('Client subscriptions removed', {
            clientId,
            subscriptionsRemoved: subscriptionsToRemove.length,
        });
    }
    /**
     * Start health check for subscriptions
     */
    startHealthCheck() {
        this.healthCheckInterval = setInterval(() => {
            this.performHealthCheck();
        }, 60000); // Check every minute
    }
    /**
     * Perform health check on active subscriptions
     */
    performHealthCheck() {
        const now = new Date();
        let activeCount = 0;
        let errorCount = 0;
        for (const [subscriptionId, subscription] of this.activeSubscriptions) {
            if (subscription.status === 'active') {
                activeCount++;
            }
            else if (subscription.status === 'error') {
                errorCount++;
            }
            // Check for stale WebSocket connections
            if (subscription.channel.type === 'websocket' && subscription.clientInfo?.connection) {
                const ws = subscription.clientInfo.connection;
                if (ws.readyState !== ws_1.default.OPEN) {
                    logger_1.default.warn('Removing subscription with closed WebSocket connection', {
                        subscriptionId,
                    });
                    this.removeSubscription(subscriptionId).catch(console.error);
                }
            }
        }
        logger_1.default.debug('Subscription health check completed', {
            totalSubscriptions: this.activeSubscriptions.size,
            activeSubscriptions: activeCount,
            errorSubscriptions: errorCount,
            connectedClients: this.connectedClients.size,
        });
    }
    /**
     * Get health status
     */
    async getHealthStatus() {
        try {
            const details = {
                websocketServer: {
                    port: config_1.default.subscriptions.websocketPort,
                    connectedClients: this.connectedClients.size,
                    maxConnections: config_1.default.subscriptions.maxConnections,
                },
                subscriptions: {
                    total: this.activeSubscriptions.size,
                    active: Array.from(this.activeSubscriptions.values()).filter(s => s.status === 'active').length,
                    error: Array.from(this.activeSubscriptions.values()).filter(s => s.status === 'error').length,
                },
            };
            return { status: 'UP', details };
        }
        catch (error) {
            return {
                status: 'DOWN',
                details: { error: (0, error_utils_1.getErrorMessage)(error) },
            };
        }
    }
    /**
     * Shutdown subscriptions service
     */
    async shutdown() {
        logger_1.default.info('Shutting down subscriptions service...');
        // Clear health check interval
        if (this.healthCheckInterval) {
            clearInterval(this.healthCheckInterval);
        }
        // Close all WebSocket connections
        for (const [clientId, ws] of this.connectedClients) {
            ws.close(1001, 'Server shutting down');
        }
        this.connectedClients.clear();
        // Close WebSocket server
        if (this.wsServer) {
            this.wsServer.close();
        }
        // Clear active subscriptions
        this.activeSubscriptions.clear();
        this.subscriptionPatterns.clear();
        logger_1.default.info('Subscriptions service shutdown complete');
    }
}
exports.SubscriptionsService = SubscriptionsService;
// Export singleton instance
exports.subscriptionsService = new SubscriptionsService();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3JvZHJpZ28vY2xhdWRlLXByb2plY3RzL09tbmlDYXJlL2JhY2tlbmQvc3JjL3NlcnZpY2VzL3N1YnNjcmlwdGlvbnMuc2VydmljZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxtQ0FBc0M7QUFHdEMsNENBQTJCO0FBRTNCLHVEQUFtRDtBQUVuRCxzREFBOEI7QUFFOUIsNERBQW9DO0FBQ3BDLHFEQUFzRDtBQXNCdEQ7OztHQUdHO0FBQ0gsTUFBYSxvQkFBcUIsU0FBUSxxQkFBWTtJQUM1QyxtQkFBbUIsR0FBRyxJQUFJLEdBQUcsRUFBOEIsQ0FBQztJQUM1RCxRQUFRLENBQW9CO0lBQzVCLGdCQUFnQixHQUFHLElBQUksR0FBRyxFQUFxQixDQUFDO0lBQ2hELG9CQUFvQixHQUFHLElBQUksR0FBRyxFQUFrQixDQUFDO0lBQ2pELG1CQUFtQixDQUFrQjtJQUU3QztRQUNFLEtBQUssRUFBRSxDQUFDO1FBQ1IsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7UUFDNUIsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDMUIsQ0FBQztJQUVELGtDQUFrQztJQUNsQyx5QkFBeUI7SUFDekIsa0NBQWtDO0lBRWxDOztPQUVHO0lBQ0ssb0JBQW9CO1FBQzFCLElBQUksQ0FBQztZQUNILElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxZQUFTLENBQUMsTUFBTSxDQUFDO2dCQUNuQyxJQUFJLEVBQUUsZ0JBQU0sQ0FBQyxhQUFhLENBQUMsYUFBYTtnQkFDeEMsVUFBVSxFQUFFLElBQUksR0FBRyxJQUFJLEVBQUUsTUFBTTtnQkFDL0IsaUJBQWlCLEVBQUUsSUFBSTthQUN4QixDQUFDLENBQUM7WUFFSCxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxFQUFFLEVBQUUsT0FBTyxFQUFFLEVBQUU7Z0JBQzdDLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLENB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QUN6QyxDQUFDO1FBQ0QsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssRUFBRSxDQUFDO1FBRTlCLHlCQUF5QjtRQUN6QixJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNsQixJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3hCLENBQUM7UUFFRCw2QkFBNkI7UUFDN0IsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUVsQyxnQkFBTSxDQUFDLElBQUksQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDO0lBQ3pELENBQUM7Q0FDRjtBQXBzQkQsb0RBb3NCQztBQUVELDRCQUE0QjtBQUNmLFFBQUEsb0JBQW9CLEdBQUcsSUFBSSxvQkFBb0IsRUFBRSxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9yb2RyaWdvL2NsYXVkZS1wcm9qZWN0cy9PbW5pQ2FyZS9iYWNrZW5kL3NyYy9zZXJ2aWNlcy9zdWJzY3JpcHRpb25zLnNlcnZpY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnZXZlbnRzJztcblxuaW1wb3J0IHsgU3Vic2NyaXB0aW9uLCBCdW5kbGUgfSBmcm9tICdAbWVkcGx1bS9maGlydHlwZXMnO1xuaW1wb3J0IFdlYlNvY2tldCBmcm9tICd3cyc7XG5cbmltcG9ydCB7IG1lZHBsdW1TZXJ2aWNlIH0gZnJvbSAnLi9tZWRwbHVtLnNlcnZpY2UnO1xuXG5pbXBvcnQgY29uZmlnIGZyb20gJ0AvY29uZmlnJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbkNvbmZpZyB9IGZyb20gJ0AvdHlwZXMvZmhpcic7XG5pbXBvcnQgbG9nZ2VyIGZyb20gJ0AvdXRpbHMvbG9nZ2VyJztcbmltcG9ydCB7IGdldEVycm9yTWVzc2FnZSB9IGZyb20gJ0AvdXRpbHMvZXJyb3IudXRpbHMnO1xuXG5pbnRlcmZhY2UgQWN0aXZlU3Vic2NyaXB0aW9uIHtcbiAgaWQ6IHN0cmluZztcbiAgY3JpdGVyaWE6IHN0cmluZztcbiAgY2hhbm5lbDoge1xuICAgIHR5cGU6IHN0cmluZztcbiAgICBlbmRwb2ludD86IHN0cmluZztcbiAgICBwYXlsb2FkPzogc3RyaW5nO1xuICAgIGhlYWRlcnM/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+O1xuICB9O1xuICBzdGF0dXM6ICdhY3RpdmUnIHwgJ29mZicgfCAnZXJyb3InO1xuICBjbGllbnRJbmZvPzoge1xuICAgIHVzZXJJZD86IHN0cmluZztcbiAgICBjbGllbnRJZD86IHN0cmluZztcbiAgICBjb25uZWN0aW9uPzogV2ViU29ja2V0O1xuICB9O1xuICBsYXN0Tm90aWZpY2F0aW9uPzogRGF0ZTtcbiAgZXJyb3JDb3VudDogbnVtYmVyO1xuICBjcmVhdGVkQXQ6IERhdGU7XG59XG5cbi8qKlxuICogRkhJUiBTdWJzY3JpcHRpb25zIGFuZCBSZWFsLXRpbWUgVXBkYXRlcyBTZXJ2aWNlXG4gKiBJbXBsZW1lbnRzIEZISVIgUjQgU3Vic2NyaXB0aW9uIGZyYW1ld29yayB3aXRoIFdlYlNvY2tldCBhbmQgUkVTVC1ob29rIHN1cHBvcnRcbiAqL1xuZXhwb3J0IGNsYXNzIFN1YnNjcmlwdGlvbnNTZXJ2aWNlIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgcHJpdmF0ZSBhY3RpdmVTdWJzY3JpcHRpb25zID0gbmV3IE1hcDxzdHJpbmcsIEFjdGl2ZVN1YnNjcmlwdGlvbj4oKTtcbiAgcHJpdmF0ZSB3c1NlcnZlcj86IFdlYlNvY2tldC5TZXJ2ZXI7XG4gIHByaXZhdGUgY29ubmVjdGVkQ2xpZW50cyA9IG5ldyBNYXA8c3RyaW5nLCBXZWJTb2NrZXQ+KCk7XG4gIHByaXZhdGUgc3Vic2NyaXB0aW9uUGF0dGVybnMgPSBuZXcgTWFwPHN0cmluZywgUmVnRXhwPigpO1xuICBwcml2YXRlIGhlYWx0aENoZWNrSW50ZXJ2YWw/OiBOb2RlSlMuVGltZW91dDtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuc2V0dXBXZWJTb2NrZXRTZXJ2ZXIoKTtcbiAgICB0aGlzLnN0YXJ0SGVhbHRoQ2hlY2soKTtcbiAgfVxuXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgLy8gV0VCU09DS0VUIFNFUlZFUiBTRVRVUFxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgLyoqXG4gICAqIFNldHVwIFdlYlNvY2tldCBzZXJ2ZXIgZm9yIHJlYWwtdGltZSBzdWJzY3JpcHRpb25zXG4gICAqL1xuICBwcml2YXRlIHNldHVwV2ViU29ja2V0U2VydmVyKCk6IHZvaWQge1xuICAgIHRyeSB7XG4gICAgICB0aGlzLndzU2VydmVyID0gbmV3IFdlYlNvY2tldC5TZXJ2ZXIoe1xuICAgICAgICBwb3J0OiBjb25maWcuc3Vic2NyaXB0aW9ucy53ZWJzb2NrZXRQb3J0LFxuICAgICAgICBtYXhQYXlsb2FkOiAxMDI0ICogMTAyNCwgLy8gMU1CXG4gICAgICAgIHBlck1lc3NhZ2VEZWZsYXRlOiB0cnVlLFxuICAgICAgfSk7XG5cbiAgICAgIHRoaXMud3NTZXJ2ZXIub24oJ2Nvbm5lY3Rpb24nLCAod3MsIHJlcXVlc3QpID0+IHtcbiAgICAgICAgdGhpcy5oYW5kbGVXZWJTb2NrZXRDb25uZWN0aW9uKHdzLCByZXF1ZXN0KTtcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLndzU2VydmVyLm9uKCdlcnJvcicsIChlcnJvcikgPT4ge1xuICAgICAgICBsb2dnZXIuZXJyb3IoJ1dlYlNvY2tldCBzZXJ2ZXIgZXJyb3I6JywgZXJyb3IpO1xuICAgICAgfSk7XG5cbiAgICAgIGxvZ2dlci5pbmZvKGBXZWJTb2NrZXQgc2VydmVyIHN0YXJ0ZWQgb24gcG9ydCAke2NvbmZpZy5zdWJzY3JpcHRpb25zLndlYnNvY2tldFBvcnR9YCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGxvZ2dlci5lcnJvcignRmFpbGVkIHRvIHNldHVwIFdlYlNvY2tldCBzZXJ2ZXI6JywgZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZSBuZXcgV2ViU29ja2V0IGNvbm5lY3Rpb25cbiAgICovXG4gIHByaXZhdGUgaGFuZGxlV2ViU29ja2V0Q29ubmVjdGlvbih3czogV2ViU29ja2V0LCByZXF1ZXN0OiBhbnkpOiB2b2lkIHtcbiAgICBjb25zdCBjbGllbnRJZCA9IHRoaXMuZ2VuZXJhdGVDbGllbnRJZCgpO1xuICAgIGNvbnN0IGNsaWVudEluZm8gPSB7XG4gICAgICBpZDogY2xpZW50SWQsXG4gICAgICByZW1vdGVBZGRyZXNzOiByZXF1ZXN0LnNvY2tldC5yZW1vdGVBZGRyZXNzLFxuICAgICAgdXNlckFnZW50OiByZXF1ZXN0LmhlYWRlcnNbJ3VzZXItYWdlbnQnXSxcbiAgICAgIGNvbm5lY3RlZEF0OiBuZXcgRGF0ZSgpLFxuICAgIH07XG5cbiAgICBsb2dnZXIuaW5mbygnV2ViU29ja2V0IGNsaWVudCBjb25uZWN0ZWQnLCBjbGllbnRJbmZvKTtcblxuICAgIC8vIFN0b3JlIGNvbm5lY3Rpb25cbiAgICB0aGlzLmNvbm5lY3RlZENsaWVudHMuc2V0KGNsaWVudElkLCB3cyk7XG5cbiAgICAvLyBIYW5kbGUgbWVzc2FnZXMgZnJvbSBjbGllbnRcbiAgICB3cy5vbignbWVzc2FnZScsIChkYXRhKSA9PiB7XG4gICAgICB0aGlzLmhhbmRsZVdlYlNvY2tldE1lc3NhZ2UoY2xpZW50SWQsIGRhdGEpO1xuICAgIH0pO1xuXG4gICAgLy8gSGFuZGxlIGNvbm5lY3Rpb24gY2xvc2VcbiAgICB3cy5vbignY2xvc2UnLCAoY29kZSwgcmVhc29uKSA9PiB7XG4gICAgICBsb2dnZXIuaW5mbygnV2ViU29ja2V0IGNsaWVudCBkaXNjb25uZWN0ZWQnLCB7XG4gICAgICAgIGNsaWVudElkLFxuICAgICAgICBjb2RlLFxuICAgICAgICByZWFzb246IHJlYXNvbi50b1N0cmluZygpLFxuICAgICAgfSk7XG4gICAgICB0aGlzLmNvbm5lY3RlZENsaWVudHMuZGVsZXRlKGNsaWVudElkKTtcbiAgICAgIHRoaXMucmVtb3ZlQ2xpZW50U3Vic2NyaXB0aW9ucyhjbGllbnRJZCk7XG4gICAgfSk7XG5cbiAgICAvLyBIYW5kbGUgY29ubmVjdGlvbiBlcnJvcnNcbiAgICB3cy5vbignZXJyb3InLCAoZXJyb3IpID0+IHtcbiAgICAgIGxvZ2dlci5lcnJvcignV2ViU29ja2V0IGNsaWVudCBlcnJvcjonLCB7IGNsaWVudElkLCBlcnJvciB9KTtcbiAgICAgIHRoaXMuY29ubmVjdGVkQ2xpZW50cy5kZWxldGUoY2xpZW50SWQpO1xuICAgICAgdGhpcy5yZW1vdmVDbGllbnRTdWJzY3JpcHRpb25zKGNsaWVudElkKTtcbiAgICB9KTtcblxuICAgIC8vIFNlbmQgd2VsY29tZSBtZXNzYWdlXG4gICAgdGhpcy5zZW5kV2ViU29ja2V0TWVzc2FnZShjbGllbnRJZCwge1xuICAgICAgdHlwZTogJ3dlbGNvbWUnLFxuICAgICAgY2xpZW50SWQsXG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgIHN1cHBvcnRlZENoYW5uZWxzOiBbJ3dlYnNvY2tldCcsICdyZXN0LWhvb2snXSxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGUgV2ViU29ja2V0IG1lc3NhZ2VzIGZyb20gY2xpZW50c1xuICAgKi9cbiAgcHJpdmF0ZSBoYW5kbGVXZWJTb2NrZXRNZXNzYWdlKGNsaWVudElkOiBzdHJpbmcsIGRhdGE6IFdlYlNvY2tldC5SYXdEYXRhKTogdm9pZCB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSBKU09OLnBhcnNlKGRhdGEudG9TdHJpbmcoKSk7XG4gICAgICBsb2dnZXIuZGVidWcoJ1dlYlNvY2tldCBtZXNzYWdlIHJlY2VpdmVkJywgeyBjbGllbnRJZCwgdHlwZTogbWVzc2FnZS50eXBlIH0pO1xuXG4gICAgICBzd2l0Y2ggKG1lc3NhZ2UudHlwZSkge1xuICAgICAgICBjYXNlICdzdWJzY3JpYmUnOlxuICAgICAgICAgIHRoaXMuaGFuZGxlV2ViU29ja2V0U3Vic2NyaWJlKGNsaWVudElkLCBtZXNzYWdlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAndW5zdWJzY3JpYmUnOlxuICAgICAgICAgIHRoaXMuaGFuZGxlV2ViU29ja2V0VW5zdWJzY3JpYmUoY2xpZW50SWQsIG1lc3NhZ2UpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdwaW5nJzpcbiAgICAgICAgICB0aGlzLnNlbmRXZWJTb2NrZXRNZXNzYWdlKGNsaWVudElkLCB7IHR5cGU6ICdwb25nJywgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgbG9nZ2VyLndhcm4oJ1Vua25vd24gV2ViU29ja2V0IG1lc3NhZ2UgdHlwZScsIHsgY2xpZW50SWQsIHR5cGU6IG1lc3NhZ2UudHlwZSB9KTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgbG9nZ2VyLmVycm9yKCdGYWlsZWQgdG8gaGFuZGxlIFdlYlNvY2tldCBtZXNzYWdlOicsIHsgY2xpZW50SWQsIGVycm9yIH0pO1xuICAgICAgdGhpcy5zZW5kV2ViU29ja2V0TWVzc2FnZShjbGllbnRJZCwge1xuICAgICAgICB0eXBlOiAnZXJyb3InLFxuICAgICAgICBtZXNzYWdlOiAnSW52YWxpZCBtZXNzYWdlIGZvcm1hdCcsXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZSBXZWJTb2NrZXQgc3Vic2NyaXB0aW9uIHJlcXVlc3RcbiAgICovXG4gIHByaXZhdGUgYXN5bmMgaGFuZGxlV2ViU29ja2V0U3Vic2NyaWJlKGNsaWVudElkOiBzdHJpbmcsIG1lc3NhZ2U6IGFueSk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBzdWJzY3JpcHRpb25Db25maWc6IFN1YnNjcmlwdGlvbkNvbmZpZyA9IHtcbiAgICAgICAgY3JpdGVyaWE6IG1lc3NhZ2UuY3JpdGVyaWEsXG4gICAgICAgIGNoYW5uZWw6IHtcbiAgICAgICAgICB0eXBlOiAnd2Vic29ja2V0JyxcbiAgICAgICAgICBwYXlsb2FkOiBtZXNzYWdlLnBheWxvYWQgfHwgJ2FwcGxpY2F0aW9uL2ZoaXIranNvbicsXG4gICAgICAgIH0sXG4gICAgICAgIHJlYXNvbjogbWVzc2FnZS5yZWFzb24gfHwgJ1dlYlNvY2tldCBzdWJzY3JpcHRpb24nLFxuICAgICAgICBzdGF0dXM6ICdhY3RpdmUnLFxuICAgICAgfTtcblxuICAgICAgY29uc3Qgc3Vic2NyaXB0aW9uSWQgPSBhd2FpdCB0aGlzLmNyZWF0ZVN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb25Db25maWcsIHtcbiAgICAgICAgdXNlcklkOiBtZXNzYWdlLnVzZXJJZCxcbiAgICAgICAgY2xpZW50SWQsXG4gICAgICAgIGNvbm5lY3Rpb246IHRoaXMuY29ubmVjdGVkQ2xpZW50cy5nZXQoY2xpZW50SWQpLFxuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuc2VuZFdlYlNvY2tldE1lc3NhZ2UoY2xpZW50SWQsIHtcbiAgICAgICAgdHlwZTogJ3N1YnNjcmlwdGlvbi1jcmVhdGVkJyxcbiAgICAgICAgc3Vic2NyaXB0aW9uSWQsXG4gICAgICAgIGNyaXRlcmlhOiBtZXNzYWdlLmNyaXRlcmlhLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgIH0pO1xuXG4gICAgICBsb2dnZXIuaW5mbygnV2ViU29ja2V0IHN1YnNjcmlwdGlvbiBjcmVhdGVkJywgeyBjbGllbnRJZCwgc3Vic2NyaXB0aW9uSWQsIGNyaXRlcmlhOiBtZXNzYWdlLmNyaXRlcmlhIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBsb2dnZXIuZXJyb3IoJ0ZhaWxlZCB0byBjcmVhdGUgV2ViU29ja2V0IHN1YnNjcmlwdGlvbjonLCB7IGNsaWVudElkLCBlcnJvciB9KTtcbiAgICAgIHRoaXMuc2VuZFdlYlNvY2tldE1lc3NhZ2UoY2xpZW50SWQsIHtcbiAgICAgICAgdHlwZTogJ2Vycm9yJyxcbiAgICAgICAgbWVzc2FnZTogJ0ZhaWxlZCB0byBjcmVhdGUgc3Vic2NyaXB0aW9uJyxcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlIFdlYlNvY2tldCB1bnN1YnNjcmliZSByZXF1ZXN0XG4gICAqL1xuICBwcml2YXRlIGFzeW5jIGhhbmRsZVdlYlNvY2tldFVuc3Vic2NyaWJlKGNsaWVudElkOiBzdHJpbmcsIG1lc3NhZ2U6IGFueSk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCB0aGlzLnJlbW92ZVN1YnNjcmlwdGlvbihtZXNzYWdlLnN1YnNjcmlwdGlvbklkKTtcbiAgICAgIFxuICAgICAgdGhpcy5zZW5kV2ViU29ja2V0TWVzc2FnZShjbGllbnRJZCwge1xuICAgICAgICB0eXBlOiAnc3Vic2NyaXB0aW9uLXJlbW92ZWQnLFxuICAgICAgICBzdWJzY3JpcHRpb25JZDogbWVzc2FnZS5zdWJzY3JpcHRpb25JZCxcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICB9KTtcblxuICAgICAgbG9nZ2VyLmluZm8oJ1dlYlNvY2tldCBzdWJzY3JpcHRpb24gcmVtb3ZlZCcsIHsgY2xpZW50SWQsIHN1YnNjcmlwdGlvbklkOiBtZXNzYWdlLnN1YnNjcmlwdGlvbklkIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBsb2dnZXIuZXJyb3IoJ0ZhaWxlZCB0byByZW1vdmUgV2ViU29ja2V0IHN1YnNjcmlwdGlvbjonLCB7IGNsaWVudElkLCBlcnJvciB9KTtcbiAgICAgIHRoaXMuc2VuZFdlYlNvY2tldE1lc3NhZ2UoY2xpZW50SWQsIHtcbiAgICAgICAgdHlwZTogJ2Vycm9yJyxcbiAgICAgICAgbWVzc2FnZTogJ0ZhaWxlZCB0byByZW1vdmUgc3Vic2NyaXB0aW9uJyxcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2VuZCBXZWJTb2NrZXQgbWVzc2FnZSB0byBjbGllbnRcbiAgICovXG4gIHByaXZhdGUgc2VuZFdlYlNvY2tldE1lc3NhZ2UoY2xpZW50SWQ6IHN0cmluZywgbWVzc2FnZTogYW55KTogdm9pZCB7XG4gICAgY29uc3Qgd3MgPSB0aGlzLmNvbm5lY3RlZENsaWVudHMuZ2V0KGNsaWVudElkKTtcbiAgICBpZiAod3MgJiYgd3MucmVhZHlTdGF0ZSA9PT0gV2ViU29ja2V0Lk9QRU4pIHtcbiAgICAgIHdzLnNlbmQoSlNPTi5zdHJpbmdpZnkobWVzc2FnZSkpO1xuICAgIH1cbiAgfVxuXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgLy8gU1VCU0NSSVBUSU9OIE1BTkFHRU1FTlRcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgRkhJUiBzdWJzY3JpcHRpb25cbiAgICovXG4gIGFzeW5jIGNyZWF0ZVN1YnNjcmlwdGlvbihcbiAgICBzdWJzY3JpcHRpb25Db25maWc6IFN1YnNjcmlwdGlvbkNvbmZpZyxcbiAgICBjbGllbnRJbmZvPzogYW55XG4gICk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIENyZWF0ZSBGSElSIFN1YnNjcmlwdGlvbiByZXNvdXJjZVxuICAgICAgY29uc3Qgc3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb24gPSB7XG4gICAgICAgIHJlc291cmNlVHlwZTogJ1N1YnNjcmlwdGlvbicsXG4gICAgICAgIHN0YXR1czogc3Vic2NyaXB0aW9uQ29uZmlnLnN0YXR1cyxcbiAgICAgICAgcmVhc29uOiBzdWJzY3JpcHRpb25Db25maWcucmVhc29uLFxuICAgICAgICBjcml0ZXJpYTogc3Vic2NyaXB0aW9uQ29uZmlnLmNyaXRlcmlhLFxuICAgICAgICBjaGFubmVsOiB7XG4gICAgICAgICAgdHlwZTogc3Vic2NyaXB0aW9uQ29uZmlnLmNoYW5uZWwudHlwZSBhcyBhbnksXG4gICAgICAgICAgZW5kcG9pbnQ6IHN1YnNjcmlwdGlvbkNvbmZpZy5jaGFubmVsLmVuZHBvaW50LFxuICAgICAgICAgIHBheWxvYWQ6IHN1YnNjcmlwdGlvbkNvbmZpZy5jaGFubmVsLnBheWxvYWQsXG4gICAgICAgICAgaGVhZGVyOiBzdWJzY3JpcHRpb25Db25maWcuY2hhbm5lbC5oZWFkZXIsXG4gICAgICAgIH0sXG4gICAgICAgIGV4dGVuc2lvbjogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHVybDogJ2h0dHA6Ly9vbW5pY2FyZS5jb20vZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL3N1YnNjcmlwdGlvbi1tZXRhZGF0YScsXG4gICAgICAgICAgICB2YWx1ZVN0cmluZzogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICBjcmVhdGVkQnk6ICdPbW5pQ2FyZSBFTVInLFxuICAgICAgICAgICAgICBjbGllbnRJbmZvOiBjbGllbnRJbmZvID8ge1xuICAgICAgICAgICAgICAgIHVzZXJJZDogY2xpZW50SW5mby51c2VySWQsXG4gICAgICAgICAgICAgICAgY2xpZW50SWQ6IGNsaWVudEluZm8uY2xpZW50SWQsXG4gICAgICAgICAgICAgIH0gOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgfTtcblxuICAgICAgY29uc3QgY3JlYXRlZFN1YnNjcmlwdGlvbiA9IGF3YWl0IG1lZHBsdW1TZXJ2aWNlLmNyZWF0ZVJlc291cmNlKHN1YnNjcmlwdGlvbik7XG4gICAgICBcbiAgICAgIGlmICghY3JlYXRlZFN1YnNjcmlwdGlvbi5pZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBjcmVhdGUgc3Vic2NyaXB0aW9uIC0gbm8gSUQgcmV0dXJuZWQnKTtcbiAgICAgIH1cblxuICAgICAgLy8gU3RvcmUgYWN0aXZlIHN1YnNjcmlwdGlvblxuICAgICAgY29uc3QgYWN0aXZlU3Vic2NyaXB0aW9uOiBBY3RpdmVTdWJzY3JpcHRpb24gPSB7XG4gICAgICAgIGlkOiBjcmVhdGVkU3Vic2NyaXB0aW9uLmlkLFxuICAgICAgICBjcml0ZXJpYTogc3Vic2NyaXB0aW9uQ29uZmlnLmNyaXRlcmlhLFxuICAgICAgICBjaGFubmVsOiBzdWJzY3JpcHRpb25Db25maWcuY2hhbm5lbCxcbiAgICAgICAgc3RhdHVzOiAnYWN0aXZlJyxcbiAgICAgICAgY2xpZW50SW5mbyxcbiAgICAgICAgZXJyb3JDb3VudDogMCxcbiAgICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpLFxuICAgICAgfTtcblxuICAgICAgdGhpcy5hY3RpdmVTdWJzY3JpcHRpb25zLnNldChjcmVhdGVkU3Vic2NyaXB0aW9uLmlkLCBhY3RpdmVTdWJzY3JpcHRpb24pO1xuXG4gICAgICAvLyBDb21waWxlIGNyaXRlcmlhIHBhdHRlcm4gZm9yIGVmZmljaWVudCBtYXRjaGluZ1xuICAgICAgdGhpcy5jb21waWxlU3Vic2NyaXB0aW9uUGF0dGVybihjcmVhdGVkU3Vic2NyaXB0aW9uLmlkLCBzdWJzY3JpcHRpb25Db25maWcuY3JpdGVyaWEpO1xuXG4gICAgICBsb2dnZXIuaW5mbygnRkhJUiBzdWJzY3JpcHRpb24gY3JlYXRlZCcsIHtcbiAgICAgICAgc3Vic2NyaXB0aW9uSWQ6IGNyZWF0ZWRTdWJzY3JpcHRpb24uaWQsXG4gICAgICAgIGNyaXRlcmlhOiBzdWJzY3JpcHRpb25Db25maWcuY3JpdGVyaWEsXG4gICAgICAgIGNoYW5uZWxUeXBlOiBzdWJzY3JpcHRpb25Db25maWcuY2hhbm5lbC50eXBlLFxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBjcmVhdGVkU3Vic2NyaXB0aW9uLmlkO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBsb2dnZXIuZXJyb3IoJ0ZhaWxlZCB0byBjcmVhdGUgRkhJUiBzdWJzY3JpcHRpb246JywgZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhIHN1YnNjcmlwdGlvblxuICAgKi9cbiAgYXN5bmMgcmVtb3ZlU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbklkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0cnkge1xuICAgICAgLy8gVXBkYXRlIEZISVIgc3Vic2NyaXB0aW9uIHN0YXR1cyB0byAnb2ZmJ1xuICAgICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gYXdhaXQgbWVkcGx1bVNlcnZpY2UucmVhZFJlc291cmNlPFN1YnNjcmlwdGlvbj4oJ1N1YnNjcmlwdGlvbicsIHN1YnNjcmlwdGlvbklkKTtcbiAgICAgIHN1YnNjcmlwdGlvbi5zdGF0dXMgPSAnb2ZmJztcbiAgICAgIGF3YWl0IG1lZHBsdW1TZXJ2aWNlLnVwZGF0ZVJlc291cmNlKHN1YnNjcmlwdGlvbik7XG5cbiAgICAgIC8vIFJlbW92ZSBmcm9tIGFjdGl2ZSBzdWJzY3JpcHRpb25zXG4gICAgICB0aGlzLmFjdGl2ZVN1YnNjcmlwdGlvbnMuZGVsZXRlKHN1YnNjcmlwdGlvbklkKTtcbiAgICAgIHRoaXMuc3Vic2NyaXB0aW9uUGF0dGVybnMuZGVsZXRlKHN1YnNjcmlwdGlvbklkKTtcblxuICAgICAgbG9nZ2VyLmluZm8oJ1N1YnNjcmlwdGlvbiByZW1vdmVkJywgeyBzdWJzY3JpcHRpb25JZCB9KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgbG9nZ2VyLmVycm9yKCdGYWlsZWQgdG8gcmVtb3ZlIHN1YnNjcmlwdGlvbjonLCB7IHN1YnNjcmlwdGlvbklkLCBlcnJvciB9KTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBMaXN0IGFjdGl2ZSBzdWJzY3JpcHRpb25zXG4gICAqL1xuICBsaXN0QWN0aXZlU3Vic2NyaXB0aW9ucygpOiBBY3RpdmVTdWJzY3JpcHRpb25bXSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5hY3RpdmVTdWJzY3JpcHRpb25zLnZhbHVlcygpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgc3Vic2NyaXB0aW9uIGJ5IElEXG4gICAqL1xuICBnZXRTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uSWQ6IHN0cmluZyk6IEFjdGl2ZVN1YnNjcmlwdGlvbiB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuYWN0aXZlU3Vic2NyaXB0aW9ucy5nZXQoc3Vic2NyaXB0aW9uSWQpO1xuICB9XG5cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAvLyBOT1RJRklDQVRJT04gUFJPQ0VTU0lOR1xuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgLyoqXG4gICAqIFByb2Nlc3MgcmVzb3VyY2UgY2hhbmdlIGFuZCBzZW5kIG5vdGlmaWNhdGlvbnNcbiAgICovXG4gIGFzeW5jIHByb2Nlc3NSZXNvdXJjZUNoYW5nZShcbiAgICByZXNvdXJjZVR5cGU6IHN0cmluZyxcbiAgICByZXNvdXJjZUlkOiBzdHJpbmcsXG4gICAgb3BlcmF0aW9uOiAnY3JlYXRlJyB8ICd1cGRhdGUnIHwgJ2RlbGV0ZScsXG4gICAgcmVzb3VyY2U/OiBhbnlcbiAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc291cmNlUGF0aCA9IGAke3Jlc291cmNlVHlwZX0vJHtyZXNvdXJjZUlkfWA7XG4gICAgICBcbiAgICAgIGxvZ2dlci5kZWJ1ZygnUHJvY2Vzc2luZyByZXNvdXJjZSBjaGFuZ2UnLCB7XG4gICAgICAgIHJlc291cmNlVHlwZSxcbiAgICAgICAgcmVzb3VyY2VJZCxcbiAgICAgICAgb3BlcmF0aW9uLFxuICAgICAgfSk7XG5cbiAgICAgIC8vIEZpbmQgbWF0Y2hpbmcgc3Vic2NyaXB0aW9uc1xuICAgICAgY29uc3QgbWF0Y2hpbmdTdWJzY3JpcHRpb25zID0gdGhpcy5maW5kTWF0Y2hpbmdTdWJzY3JpcHRpb25zKHJlc291cmNlUGF0aCwgb3BlcmF0aW9uKTtcblxuICAgICAgaWYgKG1hdGNoaW5nU3Vic2NyaXB0aW9ucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdObyBtYXRjaGluZyBzdWJzY3JpcHRpb25zIGZvdW5kJywgeyByZXNvdXJjZVBhdGgsIG9wZXJhdGlvbiB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBDcmVhdGUgbm90aWZpY2F0aW9uIGJ1bmRsZVxuICAgICAgY29uc3QgYnVuZGxlID0gYXdhaXQgdGhpcy5jcmVhdGVOb3RpZmljYXRpb25CdW5kbGUoXG4gICAgICAgIHJlc291cmNlVHlwZSxcbiAgICAgICAgcmVzb3VyY2VJZCxcbiAgICAgICAgb3BlcmF0aW9uLFxuICAgICAgICByZXNvdXJjZSxcbiAgICAgICAgbWF0Y2hpbmdTdWJzY3JpcHRpb25zXG4gICAgICApO1xuXG4gICAgICAvLyBTZW5kIG5vdGlmaWNhdGlvbnMgdG8gZWFjaCBtYXRjaGluZyBzdWJzY3JpcHRpb25cbiAgICAgIGZvciAoY29uc3Qgc3Vic2NyaXB0aW9uIG9mIG1hdGNoaW5nU3Vic2NyaXB0aW9ucykge1xuICAgICAgICBhd2FpdCB0aGlzLnNlbmROb3RpZmljYXRpb24oc3Vic2NyaXB0aW9uLCBidW5kbGUpO1xuICAgICAgfVxuXG4gICAgICBsb2dnZXIuZGVidWcoJ1Jlc291cmNlIGNoYW5nZSBub3RpZmljYXRpb25zIHNlbnQnLCB7XG4gICAgICAgIHJlc291cmNlUGF0aCxcbiAgICAgICAgb3BlcmF0aW9uLFxuICAgICAgICBub3RpZmljYXRpb25zU2VudDogbWF0Y2hpbmdTdWJzY3JpcHRpb25zLmxlbmd0aCxcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBsb2dnZXIuZXJyb3IoJ0ZhaWxlZCB0byBwcm9jZXNzIHJlc291cmNlIGNoYW5nZTonLCB7XG4gICAgICAgIHJlc291cmNlVHlwZSxcbiAgICAgICAgcmVzb3VyY2VJZCxcbiAgICAgICAgb3BlcmF0aW9uLFxuICAgICAgICBlcnJvcixcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kIHN1YnNjcmlwdGlvbnMgbWF0Y2hpbmcgdGhlIHJlc291cmNlIGNoYW5nZVxuICAgKi9cbiAgcHJpdmF0ZSBmaW5kTWF0Y2hpbmdTdWJzY3JpcHRpb25zKFxuICAgIHJlc291cmNlUGF0aDogc3RyaW5nLFxuICAgIG9wZXJhdGlvbjogc3RyaW5nXG4gICk6IEFjdGl2ZVN1YnNjcmlwdGlvbltdIHtcbiAgICBjb25zdCBtYXRjaGluZ1N1YnNjcmlwdGlvbnM6IEFjdGl2ZVN1YnNjcmlwdGlvbltdID0gW107XG5cbiAgICBmb3IgKGNvbnN0IFtzdWJzY3JpcHRpb25JZCwgc3Vic2NyaXB0aW9uXSBvZiB0aGlzLmFjdGl2ZVN1YnNjcmlwdGlvbnMpIHtcbiAgICAgIGlmIChzdWJzY3JpcHRpb24uc3RhdHVzICE9PSAnYWN0aXZlJykgY29udGludWU7XG5cbiAgICAgIGNvbnN0IHBhdHRlcm4gPSB0aGlzLnN1YnNjcmlwdGlvblBhdHRlcm5zLmdldChzdWJzY3JpcHRpb25JZCk7XG4gICAgICBpZiAocGF0dGVybiAmJiBwYXR0ZXJuLnRlc3QocmVzb3VyY2VQYXRoKSkge1xuICAgICAgICBtYXRjaGluZ1N1YnNjcmlwdGlvbnMucHVzaChzdWJzY3JpcHRpb24pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBtYXRjaGluZ1N1YnNjcmlwdGlvbnM7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIG5vdGlmaWNhdGlvbiBidW5kbGVcbiAgICovXG4gIHByaXZhdGUgYXN5bmMgY3JlYXRlTm90aWZpY2F0aW9uQnVuZGxlKFxuICAgIHJlc291cmNlVHlwZTogc3RyaW5nLFxuICAgIHJlc291cmNlSWQ6IHN0cmluZyxcbiAgICBvcGVyYXRpb246IHN0cmluZyxcbiAgICByZXNvdXJjZTogYW55LFxuICAgIHN1YnNjcmlwdGlvbnM6IEFjdGl2ZVN1YnNjcmlwdGlvbltdXG4gICk6IFByb21pc2U8QnVuZGxlPiB7XG4gICAgY29uc3QgYnVuZGxlOiBCdW5kbGUgPSB7XG4gICAgICByZXNvdXJjZVR5cGU6ICdCdW5kbGUnLFxuICAgICAgaWQ6IGBub3RpZmljYXRpb24tJHtEYXRlLm5vdygpfWAsXG4gICAgICB0eXBlOiAnaGlzdG9yeScsXG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgIGVudHJ5OiBbXSxcbiAgICB9O1xuXG4gICAgLy8gQWRkIHRoZSBjaGFuZ2VkIHJlc291cmNlIHRvIHRoZSBidW5kbGVcbiAgICBpZiAocmVzb3VyY2UgJiYgb3BlcmF0aW9uICE9PSAnZGVsZXRlJykge1xuICAgICAgYnVuZGxlLmVudHJ5Py5wdXNoKHtcbiAgICAgICAgcmVzb3VyY2UsXG4gICAgICAgIHJlcXVlc3Q6IHtcbiAgICAgICAgICBtZXRob2Q6IG9wZXJhdGlvbiA9PT0gJ2NyZWF0ZScgPyAnUE9TVCcgOiAnUFVUJyxcbiAgICAgICAgICB1cmw6IGAke3Jlc291cmNlVHlwZX0vJHtyZXNvdXJjZUlkfWAsXG4gICAgICAgIH0sXG4gICAgICAgIHJlc3BvbnNlOiB7XG4gICAgICAgICAgc3RhdHVzOiBvcGVyYXRpb24gPT09ICdjcmVhdGUnID8gJzIwMScgOiAnMjAwJyxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAob3BlcmF0aW9uID09PSAnZGVsZXRlJykge1xuICAgICAgYnVuZGxlLmVudHJ5Py5wdXNoKHtcbiAgICAgICAgcmVxdWVzdDoge1xuICAgICAgICAgIG1ldGhvZDogJ0RFTEVURScsXG4gICAgICAgICAgdXJsOiBgJHtyZXNvdXJjZVR5cGV9LyR7cmVzb3VyY2VJZH1gLFxuICAgICAgICB9LFxuICAgICAgICByZXNwb25zZToge1xuICAgICAgICAgIHN0YXR1czogJzIwNCcsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gYnVuZGxlO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlbmQgbm90aWZpY2F0aW9uIHRvIHN1YnNjcmlwdGlvblxuICAgKi9cbiAgcHJpdmF0ZSBhc3luYyBzZW5kTm90aWZpY2F0aW9uKFxuICAgIHN1YnNjcmlwdGlvbjogQWN0aXZlU3Vic2NyaXB0aW9uLFxuICAgIGJ1bmRsZTogQnVuZGxlXG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRyeSB7XG4gICAgICBzdWJzY3JpcHRpb24ubGFzdE5vdGlmaWNhdGlvbiA9IG5ldyBEYXRlKCk7XG5cbiAgICAgIHN3aXRjaCAoc3Vic2NyaXB0aW9uLmNoYW5uZWwudHlwZSkge1xuICAgICAgICBjYXNlICd3ZWJzb2NrZXQnOlxuICAgICAgICAgIGF3YWl0IHRoaXMuc2VuZFdlYlNvY2tldE5vdGlmaWNhdGlvbihzdWJzY3JpcHRpb24sIGJ1bmRsZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3Jlc3QtaG9vayc6XG4gICAgICAgICAgYXdhaXQgdGhpcy5zZW5kUmVzdEhvb2tOb3RpZmljYXRpb24oc3Vic2NyaXB0aW9uLCBidW5kbGUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdlbWFpbCc6XG4gICAgICAgICAgYXdhaXQgdGhpcy5zZW5kRW1haWxOb3RpZmljYXRpb24oc3Vic2NyaXB0aW9uLCBidW5kbGUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGxvZ2dlci53YXJuKCdVbnN1cHBvcnRlZCBzdWJzY3JpcHRpb24gY2hhbm5lbCB0eXBlJywge1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uSWQ6IHN1YnNjcmlwdGlvbi5pZCxcbiAgICAgICAgICAgIGNoYW5uZWxUeXBlOiBzdWJzY3JpcHRpb24uY2hhbm5lbC50eXBlLFxuICAgICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBSZXNldCBlcnJvciBjb3VudCBvbiBzdWNjZXNzZnVsIG5vdGlmaWNhdGlvblxuICAgICAgc3Vic2NyaXB0aW9uLmVycm9yQ291bnQgPSAwO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBsb2dnZXIuZXJyb3IoJ0ZhaWxlZCB0byBzZW5kIG5vdGlmaWNhdGlvbjonLCB7XG4gICAgICAgIHN1YnNjcmlwdGlvbklkOiBzdWJzY3JpcHRpb24uaWQsXG4gICAgICAgIGNoYW5uZWxUeXBlOiBzdWJzY3JpcHRpb24uY2hhbm5lbC50eXBlLFxuICAgICAgICBlcnJvcixcbiAgICAgIH0pO1xuXG4gICAgICBzdWJzY3JpcHRpb24uZXJyb3JDb3VudCsrO1xuICAgICAgXG4gICAgICAvLyBEaXNhYmxlIHN1YnNjcmlwdGlvbiBhZnRlciB0b28gbWFueSBlcnJvcnNcbiAgICAgIGlmIChzdWJzY3JpcHRpb24uZXJyb3JDb3VudCA+PSA1KSB7XG4gICAgICAgIHN1YnNjcmlwdGlvbi5zdGF0dXMgPSAnZXJyb3InO1xuICAgICAgICBsb2dnZXIuZXJyb3IoJ1N1YnNjcmlwdGlvbiBkaXNhYmxlZCBkdWUgdG8gcmVwZWF0ZWQgZXJyb3JzJywge1xuICAgICAgICAgIHN1YnNjcmlwdGlvbklkOiBzdWJzY3JpcHRpb24uaWQsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZW5kIFdlYlNvY2tldCBub3RpZmljYXRpb25cbiAgICovXG4gIHByaXZhdGUgYXN5bmMgc2VuZFdlYlNvY2tldE5vdGlmaWNhdGlvbihcbiAgICBzdWJzY3JpcHRpb246IEFjdGl2ZVN1YnNjcmlwdGlvbixcbiAgICBidW5kbGU6IEJ1bmRsZVxuICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBpZiAoIXN1YnNjcmlwdGlvbi5jbGllbnRJbmZvPy5jb25uZWN0aW9uKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1dlYlNvY2tldCBjb25uZWN0aW9uIG5vdCBhdmFpbGFibGUnKTtcbiAgICB9XG5cbiAgICBjb25zdCB3cyA9IHN1YnNjcmlwdGlvbi5jbGllbnRJbmZvLmNvbm5lY3Rpb247XG4gICAgaWYgKHdzLnJlYWR5U3RhdGUgIT09IFdlYlNvY2tldC5PUEVOKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1dlYlNvY2tldCBjb25uZWN0aW9uIG5vdCBvcGVuJyk7XG4gICAgfVxuXG4gICAgY29uc3Qgbm90aWZpY2F0aW9uID0ge1xuICAgICAgdHlwZTogJ25vdGlmaWNhdGlvbicsXG4gICAgICBzdWJzY3JpcHRpb25JZDogc3Vic2NyaXB0aW9uLmlkLFxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICBidW5kbGUsXG4gICAgfTtcblxuICAgIHdzLnNlbmQoSlNPTi5zdHJpbmdpZnkobm90aWZpY2F0aW9uKSk7XG4gICAgXG4gICAgbG9nZ2VyLmRlYnVnKCdXZWJTb2NrZXQgbm90aWZpY2F0aW9uIHNlbnQnLCB7XG4gICAgICBzdWJzY3JpcHRpb25JZDogc3Vic2NyaXB0aW9uLmlkLFxuICAgICAgY2xpZW50SWQ6IHN1YnNjcmlwdGlvbi5jbGllbnRJbmZvLmNsaWVudElkLFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlbmQgUkVTVCBob29rIG5vdGlmaWNhdGlvblxuICAgKi9cbiAgcHJpdmF0ZSBhc3luYyBzZW5kUmVzdEhvb2tOb3RpZmljYXRpb24oXG4gICAgc3Vic2NyaXB0aW9uOiBBY3RpdmVTdWJzY3JpcHRpb24sXG4gICAgYnVuZGxlOiBCdW5kbGVcbiAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgaWYgKCFzdWJzY3JpcHRpb24uY2hhbm5lbC5lbmRwb2ludCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSRVNUIGhvb2sgZW5kcG9pbnQgbm90IGNvbmZpZ3VyZWQnKTtcbiAgICB9XG5cbiAgICBjb25zdCBheGlvcyA9IChhd2FpdCBpbXBvcnQoJ2F4aW9zJykpLmRlZmF1bHQ7XG4gICAgXG4gICAgY29uc3QgaGVhZGVyczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHtcbiAgICAgICdDb250ZW50LVR5cGUnOiBzdWJzY3JpcHRpb24uY2hhbm5lbC5wYXlsb2FkIHx8ICdhcHBsaWNhdGlvbi9maGlyK2pzb24nLFxuICAgICAgJ1VzZXItQWdlbnQnOiAnT21uaUNhcmUtRkhJUi1TdWJzY3JpcHRpb25zLzEuMCcsXG4gICAgfTtcblxuICAgIC8vIEFkZCBjdXN0b20gaGVhZGVycyBpZiBjb25maWd1cmVkXG4gICAgaWYgKHN1YnNjcmlwdGlvbi5jaGFubmVsLmhlYWRlcnMpIHtcbiAgICAgIE9iamVjdC5hc3NpZ24oaGVhZGVycywgc3Vic2NyaXB0aW9uLmNoYW5uZWwuaGVhZGVycyk7XG4gICAgfVxuXG4gICAgYXdhaXQgYXhpb3MucG9zdChzdWJzY3JpcHRpb24uY2hhbm5lbC5lbmRwb2ludCwgYnVuZGxlLCB7XG4gICAgICBoZWFkZXJzLFxuICAgICAgdGltZW91dDogMzAwMDAsXG4gICAgfSk7XG5cbiAgICBsb2dnZXIuZGVidWcoJ1JFU1QgaG9vayBub3RpZmljYXRpb24gc2VudCcsIHtcbiAgICAgIHN1YnNjcmlwdGlvbklkOiBzdWJzY3JpcHRpb24uaWQsXG4gICAgICBlbmRwb2ludDogc3Vic2NyaXB0aW9uLmNoYW5uZWwuZW5kcG9pbnQsXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogU2VuZCBlbWFpbCBub3RpZmljYXRpb24gKHBsYWNlaG9sZGVyKVxuICAgKi9cbiAgcHJpdmF0ZSBhc3luYyBzZW5kRW1haWxOb3RpZmljYXRpb24oXG4gICAgc3Vic2NyaXB0aW9uOiBBY3RpdmVTdWJzY3JpcHRpb24sXG4gICAgYnVuZGxlOiBCdW5kbGVcbiAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgLy8gUGxhY2Vob2xkZXIgZm9yIGVtYWlsIG5vdGlmaWNhdGlvbiBpbXBsZW1lbnRhdGlvblxuICAgIGxvZ2dlci5pbmZvKCdFbWFpbCBub3RpZmljYXRpb24gd291bGQgYmUgc2VudCcsIHtcbiAgICAgIHN1YnNjcmlwdGlvbklkOiBzdWJzY3JpcHRpb24uaWQsXG4gICAgfSk7XG4gIH1cblxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIC8vIFVUSUxJVFkgTUVUSE9EU1xuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgLyoqXG4gICAqIENvbXBpbGUgc3Vic2NyaXB0aW9uIGNyaXRlcmlhIHRvIHJlZ2V4IHBhdHRlcm5cbiAgICovXG4gIHByaXZhdGUgY29tcGlsZVN1YnNjcmlwdGlvblBhdHRlcm4oc3Vic2NyaXB0aW9uSWQ6IHN0cmluZywgY3JpdGVyaWE6IHN0cmluZyk6IHZvaWQge1xuICAgIHRyeSB7XG4gICAgICAvLyBTaW1wbGUgY3JpdGVyaWEgcGFyc2luZyAtIGluIHByYWN0aWNlLCB0aGlzIHdvdWxkIGJlIG1vcmUgc29waGlzdGljYXRlZFxuICAgICAgLy8gRXhhbXBsZTogXCJQYXRpZW50P3N0YXR1cz1hY3RpdmVcIiAtPiAvXlBhdGllbnRcXC8uKiQvXG4gICAgICBjb25zdCBbcmVzb3VyY2VUeXBlXSA9IGNyaXRlcmlhLnNwbGl0KCc/Jyk7XG4gICAgICBjb25zdCBwYXR0ZXJuID0gbmV3IFJlZ0V4cChgXiR7cmVzb3VyY2VUeXBlfS8uKiRgKTtcbiAgICAgIHRoaXMuc3Vic2NyaXB0aW9uUGF0dGVybnMuc2V0KHN1YnNjcmlwdGlvbklkLCBwYXR0ZXJuKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgbG9nZ2VyLmVycm9yKCdGYWlsZWQgdG8gY29tcGlsZSBzdWJzY3JpcHRpb24gcGF0dGVybjonLCB7XG4gICAgICAgIHN1YnNjcmlwdGlvbklkLFxuICAgICAgICBjcml0ZXJpYSxcbiAgICAgICAgZXJyb3IsXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGUgdW5pcXVlIGNsaWVudCBJRFxuICAgKi9cbiAgcHJpdmF0ZSBnZW5lcmF0ZUNsaWVudElkKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGB3cy0ke0RhdGUubm93KCl9LSR7TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDkpfWA7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGFsbCBzdWJzY3JpcHRpb25zIGZvciBhIGNsaWVudFxuICAgKi9cbiAgcHJpdmF0ZSByZW1vdmVDbGllbnRTdWJzY3JpcHRpb25zKGNsaWVudElkOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBjb25zdCBzdWJzY3JpcHRpb25zVG9SZW1vdmU6IHN0cmluZ1tdID0gW107XG5cbiAgICBmb3IgKGNvbnN0IFtzdWJzY3JpcHRpb25JZCwgc3Vic2NyaXB0aW9uXSBvZiB0aGlzLmFjdGl2ZVN1YnNjcmlwdGlvbnMpIHtcbiAgICAgIGlmIChzdWJzY3JpcHRpb24uY2xpZW50SW5mbz8uY2xpZW50SWQgPT09IGNsaWVudElkKSB7XG4gICAgICAgIHN1YnNjcmlwdGlvbnNUb1JlbW92ZS5wdXNoKHN1YnNjcmlwdGlvbklkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzdWJzY3JpcHRpb25zVG9SZW1vdmUuZm9yRWFjaChzdWJzY3JpcHRpb25JZCA9PiB7XG4gICAgICB0aGlzLnJlbW92ZVN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb25JZCkuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICBsb2dnZXIuZXJyb3IoJ0ZhaWxlZCB0byByZW1vdmUgY2xpZW50IHN1YnNjcmlwdGlvbjonLCB7IHN1YnNjcmlwdGlvbklkLCBlcnJvciB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgbG9nZ2VyLmluZm8oJ0NsaWVudCBzdWJzY3JpcHRpb25zIHJlbW92ZWQnLCB7XG4gICAgICBjbGllbnRJZCxcbiAgICAgIHN1YnNjcmlwdGlvbnNSZW1vdmVkOiBzdWJzY3JpcHRpb25zVG9SZW1vdmUubGVuZ3RoLFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0IGhlYWx0aCBjaGVjayBmb3Igc3Vic2NyaXB0aW9uc1xuICAgKi9cbiAgcHJpdmF0ZSBzdGFydEhlYWx0aENoZWNrKCk6IHZvaWQge1xuICAgIHRoaXMuaGVhbHRoQ2hlY2tJbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgIHRoaXMucGVyZm9ybUhlYWx0aENoZWNrKCk7XG4gICAgfSwgNjAwMDApOyAvLyBDaGVjayBldmVyeSBtaW51dGVcbiAgfVxuXG4gIC8qKlxuICAgKiBQZXJmb3JtIGhlYWx0aCBjaGVjayBvbiBhY3RpdmUgc3Vic2NyaXB0aW9uc1xuICAgKi9cbiAgcHJpdmF0ZSBwZXJmb3JtSGVhbHRoQ2hlY2soKTogdm9pZCB7XG4gICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgICBsZXQgYWN0aXZlQ291bnQgPSAwO1xuICAgIGxldCBlcnJvckNvdW50ID0gMDtcblxuICAgIGZvciAoY29uc3QgW3N1YnNjcmlwdGlvbklkLCBzdWJzY3JpcHRpb25dIG9mIHRoaXMuYWN0aXZlU3Vic2NyaXB0aW9ucykge1xuICAgICAgaWYgKHN1YnNjcmlwdGlvbi5zdGF0dXMgPT09ICdhY3RpdmUnKSB7XG4gICAgICAgIGFjdGl2ZUNvdW50Kys7XG4gICAgICB9IGVsc2UgaWYgKHN1YnNjcmlwdGlvbi5zdGF0dXMgPT09ICdlcnJvcicpIHtcbiAgICAgICAgZXJyb3JDb3VudCsrO1xuICAgICAgfVxuXG4gICAgICAvLyBDaGVjayBmb3Igc3RhbGUgV2ViU29ja2V0IGNvbm5lY3Rpb25zXG4gICAgICBpZiAoc3Vic2NyaXB0aW9uLmNoYW5uZWwudHlwZSA9PT0gJ3dlYnNvY2tldCcgJiYgc3Vic2NyaXB0aW9uLmNsaWVudEluZm8/LmNvbm5lY3Rpb24pIHtcbiAgICAgICAgY29uc3Qgd3MgPSBzdWJzY3JpcHRpb24uY2xpZW50SW5mby5jb25uZWN0aW9uO1xuICAgICAgICBpZiAod3MucmVhZHlTdGF0ZSAhPT0gV2ViU29ja2V0Lk9QRU4pIHtcbiAgICAgICAgICBsb2dnZXIud2FybignUmVtb3Zpbmcgc3Vic2NyaXB0aW9uIHdpdGggY2xvc2VkIFdlYlNvY2tldCBjb25uZWN0aW9uJywge1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uSWQsXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdGhpcy5yZW1vdmVTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uSWQpLmNhdGNoKGNvbnNvbGUuZXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgbG9nZ2VyLmRlYnVnKCdTdWJzY3JpcHRpb24gaGVhbHRoIGNoZWNrIGNvbXBsZXRlZCcsIHtcbiAgICAgIHRvdGFsU3Vic2NyaXB0aW9uczogdGhpcy5hY3RpdmVTdWJzY3JpcHRpb25zLnNpemUsXG4gICAgICBhY3RpdmVTdWJzY3JpcHRpb25zOiBhY3RpdmVDb3VudCxcbiAgICAgIGVycm9yU3Vic2NyaXB0aW9uczogZXJyb3JDb3VudCxcbiAgICAgIGNvbm5lY3RlZENsaWVudHM6IHRoaXMuY29ubmVjdGVkQ2xpZW50cy5zaXplLFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBoZWFsdGggc3RhdHVzXG4gICAqL1xuICBhc3luYyBnZXRIZWFsdGhTdGF0dXMoKTogUHJvbWlzZTx7IHN0YXR1czogc3RyaW5nOyBkZXRhaWxzOiBhbnkgfT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBkZXRhaWxzID0ge1xuICAgICAgICB3ZWJzb2NrZXRTZXJ2ZXI6IHtcbiAgICAgICAgICBwb3J0OiBjb25maWcuc3Vic2NyaXB0aW9ucy53ZWJzb2NrZXRQb3J0LFxuICAgICAgICAgIGNvbm5lY3RlZENsaWVudHM6IHRoaXMuY29ubmVjdGVkQ2xpZW50cy5zaXplLFxuICAgICAgICAgIG1heENvbm5lY3Rpb25zOiBjb25maWcuc3Vic2NyaXB0aW9ucy5tYXhDb25uZWN0aW9ucyxcbiAgICAgICAgfSxcbiAgICAgICAgc3Vic2NyaXB0aW9uczoge1xuICAgICAgICAgIHRvdGFsOiB0aGlzLmFjdGl2ZVN1YnNjcmlwdGlvbnMuc2l6ZSxcbiAgICAgICAgICBhY3RpdmU6IEFycmF5LmZyb20odGhpcy5hY3RpdmVTdWJzY3JpcHRpb25zLnZhbHVlcygpKS5maWx0ZXIocyA9PiBzLnN0YXR1cyA9PT0gJ2FjdGl2ZScpLmxlbmd0aCxcbiAgICAgICAgICBlcnJvcjogQXJyYXkuZnJvbSh0aGlzLmFjdGl2ZVN1YnNjcmlwdGlvbnMudmFsdWVzKCkpLmZpbHRlcihzID0+IHMuc3RhdHVzID09PSAnZXJyb3InKS5sZW5ndGgsXG4gICAgICAgIH0sXG4gICAgICB9O1xuXG4gICAgICByZXR1cm4geyBzdGF0dXM6ICdVUCcsIGRldGFpbHMgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3RhdHVzOiAnRE9XTicsXG4gICAgICAgIGRldGFpbHM6IHsgZXJyb3I6IGdldEVycm9yTWVzc2FnZShlcnJvcikgfSxcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNodXRkb3duIHN1YnNjcmlwdGlvbnMgc2VydmljZVxuICAgKi9cbiAgYXN5bmMgc2h1dGRvd24oKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgbG9nZ2VyLmluZm8oJ1NodXR0aW5nIGRvd24gc3Vic2NyaXB0aW9ucyBzZXJ2aWNlLi4uJyk7XG5cbiAgICAvLyBDbGVhciBoZWFsdGggY2hlY2sgaW50ZXJ2YWxcbiAgICBpZiAodGhpcy5oZWFsdGhDaGVja0ludGVydmFsKSB7XG4gICAgICBjbGVhckludGVydmFsKHRoaXMuaGVhbHRoQ2hlY2tJbnRlcnZhbCk7XG4gICAgfVxuXG4gICAgLy8gQ2xvc2UgYWxsIFdlYlNvY2tldCBjb25uZWN0aW9uc1xuICAgIGZvciAoY29uc3QgW2NsaWVudElkLCB3c10gb2YgdGhpcy5jb25uZWN0ZWRDbGllbnRzKSB7XG4gICAgICB3cy5jbG9zZSgxMDAxLCAnU2VydmVyIHNodXR0aW5nIGRvd24nKTtcbiAgICB9XG4gICAgdGhpcy5jb25uZWN0ZWRDbGllbnRzLmNsZWFyKCk7XG5cbiAgICAvLyBDbG9zZSBXZWJTb2NrZXQgc2VydmVyXG4gICAgaWYgKHRoaXMud3NTZXJ2ZXIpIHtcbiAgICAgIHRoaXMud3NTZXJ2ZXIuY2xvc2UoKTtcbiAgICB9XG5cbiAgICAvLyBDbGVhciBhY3RpdmUgc3Vic2NyaXB0aW9uc1xuICAgIHRoaXMuYWN0aXZlU3Vic2NyaXB0aW9ucy5jbGVhcigpO1xuICAgIHRoaXMuc3Vic2NyaXB0aW9uUGF0dGVybnMuY2xlYXIoKTtcblxuICAgIGxvZ2dlci5pbmZvKCdTdWJzY3JpcHRpb25zIHNlcnZpY2Ugc2h1dGRvd24gY29tcGxldGUnKTtcbiAgfVxufVxuXG4vLyBFeHBvcnQgc2luZ2xldG9uIGluc3RhbmNlXG5leHBvcnQgY29uc3Qgc3Vic2NyaXB0aW9uc1NlcnZpY2UgPSBuZXcgU3Vic2NyaXB0aW9uc1NlcnZpY2UoKTsiXSwidmVyc2lvbiI6M30=