{"file":"/Users/rodrigo/claude-projects/OmniCare/backend/src/services/integration/types/direct.types.ts","mappings":";AAAA;;;GAGG;;;AA0EH,uBAAuB;AACvB,IAAY,iBAcX;AAdD,WAAY,iBAAiB;IAC3B,0DAAqC,CAAA;IACrC,0CAAqB,CAAA;IACrB,kDAA6B,CAAA;IAC7B,8CAAyB,CAAA;IACzB,sDAAiC,CAAA;IACjC,4DAAuC,CAAA;IACvC,4EAAuD,CAAA;IACvD,4CAAuB,CAAA;IACvB,kEAA6C,CAAA;IAC7C,sDAAiC,CAAA;IACjC,kDAA6B,CAAA;IAC7B,sDAAiC,CAAA;IACjC,8DAAyC,CAAA;AAC3C,CAAC,EAdW,iBAAiB,iCAAjB,iBAAiB,QAc5B;AAED,0BAA0B;AAC1B,IAAY,qBAKX;AALD,WAAY,qBAAqB;IAC/B,oCAAW,CAAA;IACX,0CAAiB,CAAA;IACjB,sCAAa,CAAA;IACb,0CAAiB,CAAA;AACnB,CAAC,EALW,qBAAqB,qCAArB,qBAAqB,QAKhC;AAED,6BAA6B;AAC7B,IAAY,wBAKX;AALD,WAAY,wBAAwB;IAClC,6CAAiB,CAAA;IACjB,yDAA6B,CAAA;IAC7B,qDAAyB,CAAA;IACzB,+DAAmC,CAAA;AACrC,CAAC,EALW,wBAAwB,wCAAxB,wBAAwB,QAKnC;AAED,wBAAwB;AACxB,IAAY,mBAaX;AAbD,WAAY,mBAAmB;IAC7B,sCAAe,CAAA;IACf,0CAAmB,CAAA;IACnB,gDAAyB,CAAA;IACzB,0CAAmB,CAAA;IACnB,0CAAmB,CAAA;IACnB,oCAAa,CAAA;IACb,8CAAuB,CAAA;IACvB,oCAAa,CAAA;IACb,oDAA6B,CAAA;IAC7B,wCAAiB,CAAA;IACjB,4CAAqB,CAAA;IACrB,0CAAmB,CAAA;AACrB,CAAC,EAbW,mBAAmB,mCAAnB,mBAAmB,QAa9B;AA4DD,8BAA8B;AAC9B,IAAY,wBAKX;AALD,WAAY,wBAAwB;IAClC,iDAAqB,CAAA;IACrB,yCAAa,CAAA;IACb,mDAAuB,CAAA;IACvB,2CAAe,CAAA;AACjB,CAAC,EALW,wBAAwB,wCAAxB,wBAAwB,QAKnC;AAqMD,IAAY,oBAeX;AAfD,WAAY,oBAAoB;IAC9B,qDAA6B,CAAA;IAC7B,6DAAqC,CAAA;IACrC,+DAAuC,CAAA;IACvC,yDAAiC,CAAA;IACjC,mEAA2C,CAAA;IAC3C,uEAA+C,CAAA;IAC/C,iEAAyC,CAAA;IACzC,qEAA6C,CAAA;IAC7C,qEAA6C,CAAA;IAC7C,+DAAuC,CAAA;IACvC,iEAAyC,CAAA;IACzC,qEAA6C,CAAA;IAC7C,yEAAiD,CAAA;IACjD,+DAAuC,CAAA;AACzC,CAAC,EAfW,oBAAoB,oCAApB,oBAAoB,QAe/B","names":[],"sources":["/Users/rodrigo/claude-projects/OmniCare/backend/src/services/integration/types/direct.types.ts"],"sourcesContent":["/**\n * Direct Trust Integration Types\n * Types and interfaces for Direct Trust secure messaging\n */\n\n// Direct Trust Message\nexport interface DirectMessage {\n  id: string;\n  messageId: string;\n  sender: DirectAddress;\n  recipients: DirectAddress[];\n  subject: string;\n  body?: string;\n  attachments: DirectAttachment[];\n  messageType: DirectMessageType;\n  priority: DirectMessagePriority;\n  sensitivity: DirectMessageSensitivity;\n  created: Date;\n  sent?: Date;\n  delivered?: Date;\n  status: DirectMessageStatus;\n  statusHistory: DirectMessageStatusHistory[];\n  metadata: DirectMessageMetadata;\n  encryption: DirectEncryptionInfo;\n  signature: DirectSignatureInfo;\n  acknowledgmentRequested: boolean;\n  acknowledgment?: DirectAcknowledgment;\n  originalMessageId?: string;\n  threadId?: string;\n}\n\n// Direct Trust Address\nexport interface DirectAddress {\n  address: string; // user@domain.direct\n  displayName?: string;\n  organization?: string;\n  type: 'provider' | 'patient' | 'organization' | 'system';\n  verified: boolean;\n  certificate?: DirectCertificate;\n  trustBundle?: string;\n}\n\n// Direct Trust Certificate\nexport interface DirectCertificate {\n  id: string;\n  subject: string;\n  issuer: string;\n  serialNumber: string;\n  notBefore: Date;\n  notAfter: Date;\n  keyUsage: string[];\n  extendedKeyUsage: string[];\n  subjectAltName?: string[];\n  certificateData: string; // PEM format\n  fingerprint: string;\n  status: 'valid' | 'expired' | 'revoked' | 'suspended';\n  trustAnchor: boolean;\n  ocspUrl?: string;\n  crlUrl?: string;\n}\n\n// Direct Trust Attachment\nexport interface DirectAttachment {\n  id: string;\n  filename: string;\n  contentType: string;\n  size: number;\n  content: Buffer | string; // Base64 encoded\n  checksum: string;\n  checksumAlgorithm: string;\n  encrypted: boolean;\n  encryptionKeyId?: string;\n  signed: boolean;\n  signatureKeyId?: string;\n  metadata?: Record<string, any>;\n}\n\n// Direct Message Types\nexport enum DirectMessageType {\n  CLINICAL_SUMMARY = 'clinical-summary',\n  REFERRAL = 'referral',\n  CONSULTATION = 'consultation',\n  LAB_RESULT = 'lab-result',\n  IMAGING_RESULT = 'imaging-result',\n  DISCHARGE_SUMMARY = 'discharge-summary',\n  MEDICATION_RECONCILIATION = 'medication-reconciliation',\n  CARE_PLAN = 'care-plan',\n  APPOINTMENT_REMINDER = 'appointment-reminder',\n  SECURE_MESSAGE = 'secure-message',\n  NOTIFICATION = 'notification',\n  ACKNOWLEDGMENT = 'acknowledgment',\n  ERROR_NOTIFICATION = 'error-notification'\n}\n\n// Direct Message Priority\nexport enum DirectMessagePriority {\n  LOW = 'low',\n  NORMAL = 'normal',\n  HIGH = 'high',\n  URGENT = 'urgent'\n}\n\n// Direct Message Sensitivity\nexport enum DirectMessageSensitivity {\n  NORMAL = 'normal',\n  CONFIDENTIAL = 'confidential',\n  RESTRICTED = 'restricted',\n  VERY_RESTRICTED = 'very-restricted'\n}\n\n// Direct Message Status\nexport enum DirectMessageStatus {\n  DRAFT = 'draft',\n  PENDING = 'pending',\n  ENCRYPTING = 'encrypting',\n  SIGNING = 'signing',\n  SENDING = 'sending',\n  SENT = 'sent',\n  DELIVERED = 'delivered',\n  READ = 'read',\n  ACKNOWLEDGED = 'acknowledged',\n  FAILED = 'failed',\n  REJECTED = 'rejected',\n  EXPIRED = 'expired'\n}\n\n// Direct Message Status History\nexport interface DirectMessageStatusHistory {\n  status: DirectMessageStatus;\n  timestamp: Date;\n  description?: string;\n  errorCode?: string;\n  errorMessage?: string;\n}\n\n// Direct Message Metadata\nexport interface DirectMessageMetadata {\n  patientId?: string;\n  encounterId?: string;\n  organizationId?: string;\n  providerId?: string;\n  specialtyCode?: string;\n  purposeOfUse: string;\n  confidentialityCode: string;\n  documentType?: string;\n  documentId?: string;\n  workflowInstanceId?: string;\n  correlationId?: string;\n  customHeaders?: Record<string, string>;\n}\n\n// Direct Encryption Info\nexport interface DirectEncryptionInfo {\n  algorithm: string;\n  keySize: number;\n  certificateId: string;\n  encrypted: boolean;\n  encryptedAt?: Date;\n  symmetricKey?: string; // Encrypted symmetric key\n  iv?: string; // Initialization vector\n}\n\n// Direct Signature Info\nexport interface DirectSignatureInfo {\n  algorithm: string;\n  certificateId: string;\n  signed: boolean;\n  signedAt?: Date;\n  signature?: string;\n  signatureValid?: boolean;\n  signatureValidatedAt?: Date;\n}\n\n// Direct Acknowledgment\nexport interface DirectAcknowledgment {\n  id: string;\n  originalMessageId: string;\n  acknowledgmentType: DirectAcknowledgmentType;\n  status: 'success' | 'failure' | 'warning';\n  message?: string;\n  timestamp: Date;\n  sender: DirectAddress;\n}\n\n// Direct Acknowledgment Types\nexport enum DirectAcknowledgmentType {\n  DELIVERY = 'delivery',\n  READ = 'read',\n  PROCESSED = 'processed',\n  ERROR = 'error'\n}\n\n// Direct Trust Configuration\nexport interface DirectTrustConfig {\n  enabled: boolean;\n  domain: string;\n  smtpServer: {\n    host: string;\n    port: number;\n    secure: boolean;\n    username: string;\n    password: string;\n    pool: boolean;\n    maxConnections: number;\n    maxMessages: number;\n  };\n  pop3Server?: {\n    host: string;\n    port: number;\n    secure: boolean;\n    username: string;\n    password: string;\n    pollingInterval: number;\n  };\n  imapServer?: {\n    host: string;\n    port: number;\n    secure: boolean;\n    username: string;\n    password: string;\n    pollingInterval: number;\n    mailbox: string;\n  };\n  certificates: {\n    signingCertPath: string;\n    signingKeyPath: string;\n    encryptionCertPath: string;\n    encryptionKeyPath: string;\n    trustedAnchorsPath: string;\n    crlPath?: string;\n    ocspUrl?: string;\n  };\n  security: {\n    enforceEncryption: boolean;\n    enforceSignature: boolean;\n    validateCertificates: boolean;\n    checkRevocation: boolean;\n    trustAnchorValidation: boolean;\n    allowedCipherSuites: string[];\n    minTlsVersion: string;\n  };\n  policies: {\n    maxMessageSize: number;\n    maxAttachmentSize: number;\n    allowedAttachmentTypes: string[];\n    messageRetentionDays: number;\n    quarantineUnencrypted: boolean;\n    quarantineUnsigned: boolean;\n    autoAcknowledge: boolean;\n    requireDeliveryNotification: boolean;\n  };\n}\n\n// Direct Trust Connection Status\nexport interface DirectConnectionStatus {\n  smtpConnected: boolean;\n  pop3Connected?: boolean;\n  imapConnected?: boolean;\n  lastSmtpCheck: Date;\n  lastPop3Check?: Date;\n  lastImapCheck?: Date;\n  certificatesValid: boolean;\n  certificateExpiry: Date;\n  trustBundleValid: boolean;\n  trustBundleLastUpdate: Date;\n  errors: string[];\n}\n\n// Direct Trust Statistics\nexport interface DirectTrustStatistics {\n  messagesSent: number;\n  messagesReceived: number;\n  messagesDelivered: number;\n  messagesFailed: number;\n  messagesQuarantined: number;\n  averageDeliveryTime: number;\n  certificateValidationFailures: number;\n  encryptionFailures: number;\n  signatureValidationFailures: number;\n  lastActivity: Date;\n  connectionStatus: DirectConnectionStatus;\n}\n\n// Direct Trust Certificate Store\nexport interface DirectCertificateStore {\n  certificates: Map<string, DirectCertificate>;\n  trustAnchors: Map<string, DirectCertificate>;\n  revokedCertificates: Set<string>;\n  lastUpdate: Date;\n  \n  addCertificate(certificate: DirectCertificate): void;\n  getCertificate(address: string): DirectCertificate | undefined;\n  validateCertificate(certificate: DirectCertificate): Promise<boolean>;\n  checkRevocation(certificate: DirectCertificate): Promise<boolean>;\n  updateTrustBundle(bundleData: string): Promise<void>;\n  cleanup(): void;\n}\n\n// Direct Trust Message Processor\nexport interface DirectMessageProcessor {\n  processInbound(rawMessage: string): Promise<DirectMessage>;\n  processOutbound(message: DirectMessage): Promise<string>;\n  encrypt(content: string, recipients: DirectAddress[]): Promise<string>;\n  decrypt(encryptedContent: string, certificate: DirectCertificate): Promise<string>;\n  sign(content: string, certificate: DirectCertificate): Promise<string>;\n  verifySignature(signedContent: string, certificate: DirectCertificate): Promise<boolean>;\n  validateMessage(message: DirectMessage): Promise<DirectValidationResult>;\n}\n\n// Direct Trust Validation Result\nexport interface DirectValidationResult {\n  valid: boolean;\n  errors: DirectValidationError[];\n  warnings: DirectValidationWarning[];\n  securityLevel: 'low' | 'medium' | 'high';\n  trustLevel: 'untrusted' | 'low' | 'medium' | 'high';\n  validatedAt: Date;\n}\n\nexport interface DirectValidationError {\n  code: string;\n  message: string;\n  severity: 'error' | 'fatal';\n  field?: string;\n}\n\nexport interface DirectValidationWarning {\n  code: string;\n  message: string;\n  severity: 'warning' | 'info';\n  field?: string;\n}\n\n// Direct Trust Message Router\nexport interface DirectMessageRouter {\n  routeInbound(message: DirectMessage): Promise<DirectRoutingResult>;\n  routeOutbound(message: DirectMessage): Promise<DirectRoutingResult>;\n  addRoute(rule: DirectRoutingRule): void;\n  removeRoute(ruleId: string): void;\n  getRoutes(): DirectRoutingRule[];\n}\n\n// Direct Routing Rule\nexport interface DirectRoutingRule {\n  id: string;\n  name: string;\n  priority: number;\n  conditions: DirectRoutingCondition[];\n  actions: DirectRoutingAction[];\n  active: boolean;\n}\n\nexport interface DirectRoutingCondition {\n  field: string;\n  operator: 'equals' | 'contains' | 'regex' | 'in' | 'exists';\n  value: any;\n}\n\nexport interface DirectRoutingAction {\n  type: 'forward' | 'copy' | 'quarantine' | 'reject' | 'transform' | 'notify';\n  parameters: Record<string, any>;\n}\n\nexport interface DirectRoutingResult {\n  success: boolean;\n  actionsExecuted: string[];\n  errors: string[];\n  warnings: string[];\n  destination?: string;\n  transformedMessage?: DirectMessage;\n}\n\n// Direct Trust Audit Event\nexport interface DirectAuditEvent {\n  id: string;\n  eventType: DirectAuditEventType;\n  messageId?: string;\n  sender?: string;\n  recipient?: string;\n  outcome: 'success' | 'failure' | 'warning';\n  description: string;\n  details?: Record<string, any>;\n  timestamp: Date;\n  sourceIp?: string;\n  userAgent?: string;\n}\n\nexport enum DirectAuditEventType {\n  MESSAGE_SENT = 'message-sent',\n  MESSAGE_RECEIVED = 'message-received',\n  MESSAGE_DELIVERED = 'message-delivered',\n  MESSAGE_FAILED = 'message-failed',\n  MESSAGE_QUARANTINED = 'message-quarantined',\n  CERTIFICATE_VALIDATED = 'certificate-validated',\n  CERTIFICATE_FAILED = 'certificate-failed',\n  ENCRYPTION_PERFORMED = 'encryption-performed',\n  DECRYPTION_PERFORMED = 'decryption-performed',\n  SIGNATURE_CREATED = 'signature-created',\n  SIGNATURE_VERIFIED = 'signature-verified',\n  TRUST_BUNDLE_UPDATED = 'trust-bundle-updated',\n  CONNECTION_ESTABLISHED = 'connection-established',\n  CONNECTION_FAILED = 'connection-failed'\n}\n\n// Direct Trust Health Check\nexport interface DirectHealthCheck {\n  status: 'healthy' | 'degraded' | 'unhealthy';\n  lastCheck: Date;\n  smtpConnection: boolean;\n  certificateValid: boolean;\n  trustBundleValid: boolean;\n  messageProcessing: boolean;\n  details: Record<string, any>;\n  errors: string[];\n}"],"version":3}