{"file":"/Users/rodrigo/claude-projects/OmniCare/backend/tests/setup.ts","mappings":"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","names":[],"sources":["/Users/rodrigo/claude-projects/OmniCare/backend/tests/setup.ts"],"sourcesContent":["import { jest } from '@jest/globals';\nimport dotenv from 'dotenv';\n\n// Load test environment variables\ndotenv.config({ path: '.env.test' });\n\n// Mock console methods for cleaner test output\nglobal.console = {\n  ...console,\n  log: jest.fn(),\n  warn: jest.fn(),\n  error: jest.fn(),\n};\n\n// Mock external dependencies\njest.mock('@medplum/core', () => ({\n  createReference: jest.fn((resource: any) => ({\n    reference: `${resource.resourceType}/${resource.id}`,\n  })),\n  getReferenceString: jest.fn((ref: any) => ref.reference),\n  normalizeOperationOutcome: jest.fn((outcome: any) => outcome),\n}));\n\n// Note: @medplum/client package doesn't exist, using @medplum/core for client functionality\n\n// Mock Redis\njest.mock('redis', () => ({\n  createClient: jest.fn(() => ({\n    connect: jest.fn(),\n    disconnect: jest.fn(),\n    get: jest.fn(),\n    set: jest.fn(),\n    del: jest.fn(),\n    flushall: jest.fn(),\n    on: jest.fn(),\n  })),\n}));\n\n// Mock PostgreSQL\njest.mock('pg', () => ({\n  Pool: jest.fn(() => ({\n    connect: jest.fn(),\n    query: jest.fn(),\n    end: jest.fn(),\n  })),\n  Client: jest.fn(() => ({\n    connect: jest.fn(),\n    query: jest.fn(),\n    end: jest.fn(),\n  })),\n}));\n\n// Mock Winston logger\njest.mock('winston', () => ({\n  createLogger: jest.fn(() => ({\n    info: jest.fn(),\n    warn: jest.fn(),\n    error: jest.fn(),\n    debug: jest.fn(),\n  })),\n  format: {\n    combine: jest.fn(),\n    timestamp: jest.fn(),\n    errors: jest.fn(),\n    json: jest.fn(),\n    colorize: jest.fn(),\n    simple: jest.fn(),\n  },\n  transports: {\n    Console: jest.fn(),\n    File: jest.fn(),\n  },\n}));\n\n// Set up test database connection\nprocess.env.NODE_ENV = 'test';\nprocess.env.DB_HOST = 'localhost';\nprocess.env.DB_PORT = '5432';\nprocess.env.DB_NAME = 'omnicare_test';\nprocess.env.DB_USER = 'test_user';\nprocess.env.DB_PASSWORD = 'test_password';\nprocess.env.REDIS_URL = 'redis://localhost:6379/1';\nprocess.env.JWT_SECRET = 'test_jwt_secret_key_for_testing_only';\nprocess.env.MEDPLUM_CLIENT_ID = 'test_client_id';\nprocess.env.MEDPLUM_CLIENT_SECRET = 'test_client_secret';\n\n// Global test helpers\n(global as any).mockConsole = {\n  log: jest.fn(),\n  warn: jest.fn(),\n  error: jest.fn(),\n};\n\n// Test data factories\n(global as any).createMockPatient = () => ({\n  resourceType: 'Patient',\n  id: 'test-patient-1',\n  identifier: [\n    {\n      system: 'http://hospital.smarthealthit.org',\n      value: 'MRN123456',\n    },\n  ],\n  name: [\n    {\n      family: 'Doe',\n      given: ['John'],\n    },\n  ],\n  gender: 'male',\n  birthDate: '1990-01-01',\n  telecom: [\n    {\n      system: 'phone',\n      value: '555-0123',\n      use: 'mobile',\n    },\n    {\n      system: 'email',\n      value: 'john.doe@example.com',\n      use: 'home',\n    },\n  ],\n  address: [\n    {\n      use: 'home',\n      line: ['123 Main St'],\n      city: 'Anytown',\n      state: 'NY',\n      postalCode: '12345',\n      country: 'US',\n    },\n  ],\n});\n\n(global as any).createMockPractitioner = () => ({\n  resourceType: 'Practitioner',\n  id: 'test-practitioner-1',\n  identifier: [\n    {\n      system: 'http://hl7.org/fhir/sid/us-npi',\n      value: '1234567890',\n    },\n  ],\n  name: [\n    {\n      family: 'Smith',\n      given: ['Jane'],\n      prefix: ['Dr.'],\n    },\n  ],\n  telecom: [\n    {\n      system: 'phone',\n      value: '555-0456',\n      use: 'work',\n    },\n    {\n      system: 'email',\n      value: 'dr.smith@hospital.com',\n      use: 'work',\n    },\n  ],\n  qualification: [\n    {\n      code: {\n        coding: [\n          {\n            system: 'http://terminology.hl7.org/CodeSystem/v2-0360',\n            code: 'MD',\n            display: 'Doctor of Medicine',\n          },\n        ],\n      },\n    },\n  ],\n});\n\n(global as any).createMockEncounter = () => ({\n  resourceType: 'Encounter',\n  id: 'test-encounter-1',\n  status: 'in-progress',\n  class: {\n    system: 'http://terminology.hl7.org/CodeSystem/v3-ActCode',\n    code: 'AMB',\n    display: 'ambulatory',\n  },\n  subject: {\n    reference: 'Patient/test-patient-1',\n  },\n  participant: [\n    {\n      individual: {\n        reference: 'Practitioner/test-practitioner-1',\n      },\n    },\n  ],\n  period: {\n    start: new Date().toISOString(),\n  },\n  serviceProvider: {\n    reference: 'Organization/test-organization-1',\n  },\n});\n\n// Clean up after each test\nafterEach(() => {\n  jest.clearAllMocks();\n});\n\n// Clean up after all tests\nafterAll(async () => {\n  // Clean up any persistent connections\n  jest.restoreAllMocks();\n});"],"version":3}