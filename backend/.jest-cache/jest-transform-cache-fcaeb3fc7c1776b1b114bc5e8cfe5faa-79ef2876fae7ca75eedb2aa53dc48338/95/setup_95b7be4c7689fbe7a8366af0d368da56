d1b56249d55e6464de7ae3d797279baa
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// Mock external dependencies
globals_1.jest.mock('@medplum/core', () => ({
    createReference: globals_1.jest.fn((resource) => ({
        reference: `${resource.resourceType}/${resource.id}`,
    })),
    getReferenceString: globals_1.jest.fn((ref) => ref.reference),
    normalizeOperationOutcome: globals_1.jest.fn((outcome) => outcome),
}));
// Note: @medplum/client package doesn't exist, using @medplum/core for client functionality
// Mock Redis
globals_1.jest.mock('redis', () => ({
    createClient: globals_1.jest.fn(() => ({
        connect: globals_1.jest.fn(),
        disconnect: globals_1.jest.fn(),
        get: globals_1.jest.fn(),
        set: globals_1.jest.fn(),
        del: globals_1.jest.fn(),
        flushall: globals_1.jest.fn(),
        on: globals_1.jest.fn(),
    })),
}));
// Mock PostgreSQL
globals_1.jest.mock('pg', () => ({
    Pool: globals_1.jest.fn(() => ({
        connect: globals_1.jest.fn(),
        query: globals_1.jest.fn(),
        end: globals_1.jest.fn(),
    })),
    Client: globals_1.jest.fn(() => ({
        connect: globals_1.jest.fn(),
        query: globals_1.jest.fn(),
        end: globals_1.jest.fn(),
    })),
}));
// Mock Winston logger
globals_1.jest.mock('winston', () => ({
    createLogger: globals_1.jest.fn(() => ({
        info: globals_1.jest.fn(),
        warn: globals_1.jest.fn(),
        error: globals_1.jest.fn(),
        debug: globals_1.jest.fn(),
    })),
    format: {
        combine: globals_1.jest.fn(),
        timestamp: globals_1.jest.fn(),
        errors: globals_1.jest.fn(),
        json: globals_1.jest.fn(),
        colorize: globals_1.jest.fn(),
        simple: globals_1.jest.fn(),
    },
    transports: {
        Console: globals_1.jest.fn(),
        File: globals_1.jest.fn(),
    },
}));
const dotenv_1 = __importDefault(require("dotenv"));
// Load test environment variables
dotenv_1.default.config({ path: '.env.test' });
// Mock console methods for cleaner test output
global.console = {
    ...console,
    log: globals_1.jest.fn(),
    warn: globals_1.jest.fn(),
    error: globals_1.jest.fn(),
};
// Set up test database connection
process.env.NODE_ENV = 'test';
process.env.DB_HOST = 'localhost';
process.env.DB_PORT = '5432';
process.env.DB_NAME = 'omnicare_test';
process.env.DB_USER = 'test_user';
process.env.DB_PASSWORD = 'test_password';
process.env.REDIS_URL = 'redis://localhost:6379/1';
process.env.JWT_SECRET = 'test_jwt_secret_key_for_testing_only';
process.env.MEDPLUM_CLIENT_ID = 'test_client_id';
process.env.MEDPLUM_CLIENT_SECRET = 'test_client_secret';
// Global test helpers
global.mockConsole = {
    log: globals_1.jest.fn(),
    warn: globals_1.jest.fn(),
    error: globals_1.jest.fn(),
};
// Test data factories
global.createMockPatient = () => ({
    resourceType: 'Patient',
    id: 'test-patient-1',
    identifier: [
        {
            system: 'http://hospital.smarthealthit.org',
            value: 'MRN123456',
        },
    ],
    name: [
        {
            family: 'Doe',
            given: ['John'],
        },
    ],
    gender: 'male',
    birthDate: '1990-01-01',
    telecom: [
        {
            system: 'phone',
            value: '555-0123',
            use: 'mobile',
        },
        {
            system: 'email',
            value: 'john.doe@example.com',
            use: 'home',
        },
    ],
    address: [
        {
            use: 'home',
            line: ['123 Main St'],
            city: 'Anytown',
            state: 'NY',
            postalCode: '12345',
            country: 'US',
        },
    ],
});
global.createMockPractitioner = () => ({
    resourceType: 'Practitioner',
    id: 'test-practitioner-1',
    identifier: [
        {
            system: 'http://hl7.org/fhir/sid/us-npi',
            value: '1234567890',
        },
    ],
    name: [
        {
            family: 'Smith',
            given: ['Jane'],
            prefix: ['Dr.'],
        },
    ],
    telecom: [
        {
            system: 'phone',
            value: '555-0456',
            use: 'work',
        },
        {
            system: 'email',
            value: 'dr.smith@hospital.com',
            use: 'work',
        },
    ],
    qualification: [
        {
            code: {
                coding: [
                    {
                        system: 'http://terminology.hl7.org/CodeSystem/v2-0360',
                        code: 'MD',
                        display: 'Doctor of Medicine',
                    },
                ],
            },
        },
    ],
});
global.createMockEncounter = () => ({
    resourceType: 'Encounter',
    id: 'test-encounter-1',
    status: 'in-progress',
    class: {
        system: 'http://terminology.hl7.org/CodeSystem/v3-ActCode',
        code: 'AMB',
        display: 'ambulatory',
    },
    subject: {
        reference: 'Patient/test-patient-1',
    },
    participant: [
        {
            individual: {
                reference: 'Practitioner/test-practitioner-1',
            },
        },
    ],
    period: {
        start: new Date().toISOString(),
    },
    serviceProvider: {
        reference: 'Organization/test-organization-1',
    },
});
// Clean up after each test
afterEach(() => {
    globals_1.jest.clearAllMocks();
});
// Clean up after all tests
afterAll(async () => {
    // Clean up any persistent connections
    globals_1.jest.restoreAllMocks();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,