31e0101e9912dcf422e80463ebe5fddf
"use strict";
/**
 * OmniCare EMR Backend - JWT Authentication Service
 * HIPAA-Compliant Token Management
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.JWTAuthService = void 0;
const crypto_1 = __importDefault(require("crypto"));
const bcrypt_1 = __importDefault(require("bcrypt"));
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
const otplib_1 = require("otplib");
const uuid_1 = require("uuid");
const auth_types_1 = require("@/types/auth.types");
const AUTH_CONFIG = {
    jwt: {
        accessTokenSecret: process.env.JWT_ACCESS_SECRET || 'access-secret-change-in-production',
        refreshTokenSecret: process.env.JWT_REFRESH_SECRET || 'refresh-secret-change-in-production',
        accessTokenExpiry: '15m',
        refreshTokenExpiry: '7d',
        issuer: 'omnicare-emr',
        audience: 'omnicare-app',
        algorithm: 'HS256'
    },
    security: {
        saltRounds: 12,
        sessionTimeout: 15 * 60 * 1000 // 15 minutes
    },
    mfa: {
        window: 1,
        digits: 6,
        period: 30,
        issuer: 'OmniCare EMR',
        backupCodesCount: 10
    },
    encryption: {
        ivLength: 16,
        encoding: 'hex'
    }
};
const PASSWORD_POLICY = {
    minLength: 8,
    requireUppercase: true,
    requireLowercase: true,
    requireNumbers: true,
    requireSpecialChars: true
};
const MFA_REQUIRED_ROLES = [auth_types_1.UserRoles.PHYSICIAN, auth_types_1.UserRoles.SYSTEM_ADMINISTRATOR];
class JWTAuthService {
    accessTokenSecret;
    refreshTokenSecret;
    constructor() {
        this.accessTokenSecret = AUTH_CONFIG.jwt.accessTokenSecret;
        this.refreshTokenSecret = AUTH_CONFIG.jwt.refreshTokenSecret;
        // Configure OTP library  
        otplib_1.authenticator.options = {
            window: AUTH_CONFIG.mfa.window,
            digits: AUTH_CONFIG.mfa.digits,
            step: AUTH_CONFIG.mfa.period
        };
    }
    /**
     * Generate JWT access and refresh tokens
     */
    generateTokens(user) {
        const sessionId = (0, uuid_1.v4)();
        const permissions = this.getRolePermissions(user.role);
        const payload = {
            userId: user.id,
            username: user.username,
            role: user.role,
            permissions,
            sessionId
        };
        const accessToken = jsonwebtoken_1.default.sign(payload, this.accessTokenSecret, {
            expiresIn: AUTH_CONFIG.jwt.accessTokenExpiry,
            issuer: AUTH_CONFIG.jwt.issuer,
            audience: AUTH_CONFIG.jwt.audience,
            algorithm: AUTH_CONFIG.jwt.algorithm
        });
        const refreshToken = jsonwebtoken_1.default.sign({ userId: user.id, sessionId }, this.refreshTokenSecret, {
            expiresIn: AUTH_CONFIG.jwt.refreshTokenExpiry,
            issuer: AUTH_CONFIG.jwt.issuer,
            audience: AUTH_CONFIG.jwt.audience,
            algorithm: AUTH_CONFIG.jwt.algorithm
        });
        return {
            accessToken,
            refreshToken,
            expiresIn: this.getTokenExpiryTime(AUTH_CONFIG.jwt.accessTokenExpiry),
            tokenType: 'Bearer'
        };
    }
    /**
     * Verify and decode JWT access token
     */
    verifyAccessToken(token) {
        try {
            const decoded = jsonwebtoken_1.default.verify(token, this.accessTokenSecret, {
                issuer: AUTH_CONFIG.jwt.issuer,
                audience: AUTH_CONFIG.jwt.audience,
                algorithms: [AUTH_CONFIG.jwt.algorithm]
            });
            return decoded;
        }
        catch {
            throw new Error('Invalid or expired access token');
        }
    }
    /**
     * Verify and decode JWT refresh token
     */
    verifyRefreshToken(token) {
        try {
            const decoded = jsonwebtoken_1.default.verify(token, this.refreshTokenSecret, {
                issuer: AUTH_CONFIG.jwt.issuer,
                audience: AUTH_CONFIG.jwt.audience,
                algorithms: [AUTH_CONFIG.jwt.algorithm]
            });
            return decoded;
        }
        catch {
            throw new Error('Invalid or expired refresh token');
        }
    }
    /**
     * Refresh access token using valid refresh token
     */
    refreshAccessToken(refreshToken, user) {
        const decoded = this.verifyRefreshToken(refreshToken);
        if (decoded.userId !== user.id) {
            throw new Error('Token user mismatch');
        }
        return this.generateTokens(user);
    }
    /**
     * Hash password using bcrypt
     */
    async hashPassword(password) {
        return bcrypt_1.default.hash(password, AUTH_CONFIG.security.saltRounds);
    }
    /**
     * Verify password against hash
     */
    async verifyPassword(password, hashedPassword) {
        return bcrypt_1.default.compare(password, hashedPassword);
    }
    /**
     * Validate password against policy
     */
    validatePassword(password) {
        const errors = [];
        if (password.length < PASSWORD_POLICY.minLength) {
            errors.push(`Password must be at least ${PASSWORD_POLICY.minLength} characters long`);
        }
        if (PASSWORD_POLICY.requireUppercase && !/[A-Z]/.test(password)) {
            errors.push('Password must contain at least one uppercase letter');
        }
        if (PASSWORD_POLICY.requireLowercase && !/[a-z]/.test(password)) {
            errors.push('Password must contain at least one lowercase letter');
        }
        if (PASSWORD_POLICY.requireNumbers && !/\d/.test(password)) {
            errors.push('Password must contain at least one number');
        }
        if (PASSWORD_POLICY.requireSpecialChars && !/[!@#$%^&*()_+\-=[\]{};':"\\|,.<>/?]/.test(password)) {
            errors.push('Password must contain at least one special character');
        }
        return {
            isValid: errors.length === 0,
            errors
        };
    }
    /**
     * Generate MFA secret for user
     */
    async generateMfaSecret(user) {
        const secret = otplib_1.authenticator.generateSecret();
        const keyuri = otplib_1.authenticator.keyuri(user.username, AUTH_CONFIG.mfa.issuer, secret);
        // Simplified QR code generation (would use proper library in production)
        const qrCode = `data:image/svg+xml;base64,${Buffer.from(keyuri).toString('base64')}`;
        const backupCodes = this.generateBackupCodes();
        return {
            secret,
            qrCode,
            backupCodes
        };
    }
    /**
     * Verify MFA token
     */
    verifyMfaToken(token, secret) {
        return otplib_1.authenticator.check(token, secret);
    }
    /**
     * Check if MFA is required for user role
     */
    isMfaRequired(role) {
        return MFA_REQUIRED_ROLES.includes(role);
    }
    /**
     * Extract token from Authorization header
     */
    extractTokenFromHeader(authHeader) {
        if (!authHeader || !authHeader.startsWith('Bearer ')) {
            return null;
        }
        return authHeader.substring(7);
    }
    /**
     * Get role permissions (simplified)
     */
    getRolePermissions(role) {
        // Simplified permission mapping using role strings
        const rolePermissions = {
            [auth_types_1.UserRoles.PHYSICIAN]: [auth_types_1.Permission.CREATE_CLINICAL_NOTES, auth_types_1.Permission.VIEW_PATIENT_RECORDS, auth_types_1.Permission.CREATE_PRESCRIPTIONS],
            [auth_types_1.UserRoles.NURSING_STAFF]: [auth_types_1.Permission.CREATE_CLINICAL_NOTES, auth_types_1.Permission.VIEW_PATIENT_RECORDS, auth_types_1.Permission.DOCUMENT_VITAL_SIGNS],
            [auth_types_1.UserRoles.ADMINISTRATIVE_STAFF]: [auth_types_1.Permission.SCHEDULE_APPOINTMENTS, auth_types_1.Permission.MANAGE_BILLING, auth_types_1.Permission.VIEW_PATIENT_DEMOGRAPHICS],
            [auth_types_1.UserRoles.SYSTEM_ADMINISTRATOR]: [auth_types_1.Permission.MANAGE_USERS, auth_types_1.Permission.CONFIGURE_SYSTEM, auth_types_1.Permission.VIEW_AUDIT_LOGS],
            [auth_types_1.UserRoles.PHARMACIST]: [auth_types_1.Permission.VIEW_PRESCRIPTIONS, auth_types_1.Permission.VERIFY_PRESCRIPTIONS, auth_types_1.Permission.DISPENSE_MEDICATIONS],
            [auth_types_1.UserRoles.LABORATORY_TECHNICIAN]: [auth_types_1.Permission.VIEW_LAB_RESULTS, auth_types_1.Permission.ENTER_LAB_RESULTS],
            [auth_types_1.UserRoles.RADIOLOGY_TECHNICIAN]: [auth_types_1.Permission.PERFORM_IMAGING_STUDIES, auth_types_1.Permission.VIEW_IMAGING_RESULTS],
            [auth_types_1.UserRoles.PATIENT]: [auth_types_1.Permission.VIEW_OWN_RECORDS, auth_types_1.Permission.REQUEST_APPOINTMENTS]
        };
        return rolePermissions[role] || [];
    }
    /**
     * Generate backup codes for MFA
     */
    generateBackupCodes() {
        const codes = [];
        for (let i = 0; i < AUTH_CONFIG.mfa.backupCodesCount; i++) {
            const code = crypto_1.default.randomBytes(4).toString('hex').toUpperCase();
            codes.push(code);
        }
        return codes;
    }
    /**
     * Convert JWT expiry string to seconds
     */
    getTokenExpiryTime(expiry) {
        const unit = expiry.slice(-1);
        const value = parseInt(expiry.slice(0, -1));
        switch (unit) {
            case 's': return value;
            case 'm': return value * 60;
            case 'h': return value * 60 * 60;
            case 'd': return value * 24 * 60 * 60;
            default: return 15 * 60; // Default 15 minutes
        }
    }
    /**
     * Generate secure random token for password reset
     */
    generateSecureToken() {
        return crypto_1.default.randomBytes(32).toString('hex');
    }
}
exports.JWTAuthService = JWTAuthService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,