{"file":"/Users/rodrigo/claude-projects/OmniCare/backend/src/auth/jwt.service.ts","mappings":"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","names":[],"sources":["/Users/rodrigo/claude-projects/OmniCare/backend/src/auth/jwt.service.ts"],"sourcesContent":["/**\n * OmniCare EMR Backend - JWT Authentication Service\n * HIPAA-Compliant Token Management\n */\n\nimport crypto from 'crypto';\nimport bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\nimport { authenticator } from 'otplib';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { \n  User, \n  UserRole, \n  UserRoles,\n  AuthToken, \n  MfaSetup,\n  SessionInfo,\n  Permission\n} from '@/types/auth.types';\n\nexport interface TokenPayload {\n  userId: string;\n  username: string;\n  role: UserRole;\n  permissions: Permission[];\n  sessionId: string;\n  iat?: number;\n  exp?: number;\n  iss?: string;\n  aud?: string;\n}\n\nconst AUTH_CONFIG = {\n  jwt: {\n    accessTokenSecret: process.env.JWT_ACCESS_SECRET || 'access-secret-change-in-production',\n    refreshTokenSecret: process.env.JWT_REFRESH_SECRET || 'refresh-secret-change-in-production',\n    accessTokenExpiry: '15m',\n    refreshTokenExpiry: '7d',\n    issuer: 'omnicare-emr',\n    audience: 'omnicare-app',\n    algorithm: 'HS256' as const\n  },\n  security: {\n    saltRounds: 12,\n    sessionTimeout: 15 * 60 * 1000 // 15 minutes\n  },\n  mfa: {\n    window: 1,\n    digits: 6,\n    period: 30,\n    issuer: 'OmniCare EMR',\n    backupCodesCount: 10\n  },\n  encryption: {\n    ivLength: 16,\n    encoding: 'hex' as const\n  }\n};\n\nconst PASSWORD_POLICY = {\n  minLength: 8,\n  requireUppercase: true,\n  requireLowercase: true,\n  requireNumbers: true,\n  requireSpecialChars: true\n};\n\nconst MFA_REQUIRED_ROLES: UserRole[] = [UserRoles.PHYSICIAN, UserRoles.SYSTEM_ADMINISTRATOR];\n\nexport class JWTAuthService {\n  private readonly accessTokenSecret: string;\n  private readonly refreshTokenSecret: string;\n\n  constructor() {\n    this.accessTokenSecret = AUTH_CONFIG.jwt.accessTokenSecret;\n    this.refreshTokenSecret = AUTH_CONFIG.jwt.refreshTokenSecret;\n    \n    // Configure OTP library  \n    authenticator.options = {\n      window: AUTH_CONFIG.mfa.window,\n      digits: AUTH_CONFIG.mfa.digits,\n      step: AUTH_CONFIG.mfa.period\n    };\n  }\n\n  /**\n   * Generate JWT access and refresh tokens\n   */\n  generateTokens(user: User): AuthToken {\n    const sessionId = uuidv4();\n    const permissions = this.getRolePermissions(user.role);\n\n    const payload: TokenPayload = {\n      userId: user.id,\n      username: user.username,\n      role: user.role,\n      permissions,\n      sessionId\n    };\n\n    const accessToken = jwt.sign(\n      payload, \n      this.accessTokenSecret, \n      {\n        expiresIn: AUTH_CONFIG.jwt.accessTokenExpiry,\n        issuer: AUTH_CONFIG.jwt.issuer,\n        audience: AUTH_CONFIG.jwt.audience,\n        algorithm: AUTH_CONFIG.jwt.algorithm\n      } as jwt.SignOptions\n    );\n\n    const refreshToken = jwt.sign(\n      { userId: user.id, sessionId },\n      this.refreshTokenSecret,\n      {\n        expiresIn: AUTH_CONFIG.jwt.refreshTokenExpiry,\n        issuer: AUTH_CONFIG.jwt.issuer,\n        audience: AUTH_CONFIG.jwt.audience,\n        algorithm: AUTH_CONFIG.jwt.algorithm\n      } as jwt.SignOptions\n    );\n\n    return {\n      accessToken,\n      refreshToken,\n      expiresIn: this.getTokenExpiryTime(AUTH_CONFIG.jwt.accessTokenExpiry),\n      tokenType: 'Bearer'\n    };\n  }\n\n  /**\n   * Verify and decode JWT access token\n   */\n  verifyAccessToken(token: string): TokenPayload {\n    try {\n      const decoded = jwt.verify(token, this.accessTokenSecret, {\n        issuer: AUTH_CONFIG.jwt.issuer,\n        audience: AUTH_CONFIG.jwt.audience,\n        algorithms: [AUTH_CONFIG.jwt.algorithm]\n      }) as TokenPayload;\n\n      return decoded;\n    } catch {\n      throw new Error('Invalid or expired access token');\n    }\n  }\n\n  /**\n   * Verify and decode JWT refresh token\n   */\n  verifyRefreshToken(token: string): { userId: string; sessionId: string } {\n    try {\n      const decoded = jwt.verify(token, this.refreshTokenSecret, {\n        issuer: AUTH_CONFIG.jwt.issuer,\n        audience: AUTH_CONFIG.jwt.audience,\n        algorithms: [AUTH_CONFIG.jwt.algorithm]\n      }) as { userId: string; sessionId: string };\n\n      return decoded;\n    } catch {\n      throw new Error('Invalid or expired refresh token');\n    }\n  }\n\n  /**\n   * Refresh access token using valid refresh token\n   */\n  refreshAccessToken(refreshToken: string, user: User): AuthToken {\n    const decoded = this.verifyRefreshToken(refreshToken);\n    if (decoded.userId !== user.id) {\n      throw new Error('Token user mismatch');\n    }\n\n    return this.generateTokens(user);\n  }\n\n  /**\n   * Hash password using bcrypt\n   */\n  async hashPassword(password: string): Promise<string> {\n    return bcrypt.hash(password, AUTH_CONFIG.security.saltRounds);\n  }\n\n  /**\n   * Verify password against hash\n   */\n  async verifyPassword(password: string, hashedPassword: string): Promise<boolean> {\n    return bcrypt.compare(password, hashedPassword);\n  }\n\n  /**\n   * Validate password against policy\n   */\n  validatePassword(password: string): { isValid: boolean; errors: string[] } {\n    const errors: string[] = [];\n\n    if (password.length < PASSWORD_POLICY.minLength) {\n      errors.push(`Password must be at least ${PASSWORD_POLICY.minLength} characters long`);\n    }\n\n    if (PASSWORD_POLICY.requireUppercase && !/[A-Z]/.test(password)) {\n      errors.push('Password must contain at least one uppercase letter');\n    }\n\n    if (PASSWORD_POLICY.requireLowercase && !/[a-z]/.test(password)) {\n      errors.push('Password must contain at least one lowercase letter');\n    }\n\n    if (PASSWORD_POLICY.requireNumbers && !/\\d/.test(password)) {\n      errors.push('Password must contain at least one number');\n    }\n\n    if (PASSWORD_POLICY.requireSpecialChars && !/[!@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?]/.test(password)) {\n      errors.push('Password must contain at least one special character');\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n\n  /**\n   * Generate MFA secret for user\n   */\n  async generateMfaSecret(user: User): Promise<MfaSetup> {\n    const secret = authenticator.generateSecret();\n    const keyuri = authenticator.keyuri(\n      user.username,\n      AUTH_CONFIG.mfa.issuer,\n      secret\n    );\n\n    // Simplified QR code generation (would use proper library in production)\n    const qrCode = `data:image/svg+xml;base64,${Buffer.from(keyuri).toString('base64')}`;\n    const backupCodes = this.generateBackupCodes();\n\n    return {\n      secret,\n      qrCode,\n      backupCodes\n    };\n  }\n\n  /**\n   * Verify MFA token\n   */\n  verifyMfaToken(token: string, secret: string): boolean {\n    return authenticator.check(token, secret);\n  }\n\n  /**\n   * Check if MFA is required for user role\n   */\n  isMfaRequired(role: UserRole): boolean {\n    return MFA_REQUIRED_ROLES.includes(role);\n  }\n\n  /**\n   * Extract token from Authorization header\n   */\n  extractTokenFromHeader(authHeader: string | undefined): string | null {\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return null;\n    }\n    return authHeader.substring(7);\n  }\n\n  /**\n   * Get role permissions (simplified)\n   */\n  private getRolePermissions(role: UserRole): Permission[] {\n    // Simplified permission mapping using role strings\n    const rolePermissions: Record<string, Permission[]> = {\n      [UserRoles.PHYSICIAN]: [Permission.CREATE_CLINICAL_NOTES, Permission.VIEW_PATIENT_RECORDS, Permission.CREATE_PRESCRIPTIONS],\n      [UserRoles.NURSING_STAFF]: [Permission.CREATE_CLINICAL_NOTES, Permission.VIEW_PATIENT_RECORDS, Permission.DOCUMENT_VITAL_SIGNS],\n      [UserRoles.ADMINISTRATIVE_STAFF]: [Permission.SCHEDULE_APPOINTMENTS, Permission.MANAGE_BILLING, Permission.VIEW_PATIENT_DEMOGRAPHICS],\n      [UserRoles.SYSTEM_ADMINISTRATOR]: [Permission.MANAGE_USERS, Permission.CONFIGURE_SYSTEM, Permission.VIEW_AUDIT_LOGS],\n      [UserRoles.PHARMACIST]: [Permission.VIEW_PRESCRIPTIONS, Permission.VERIFY_PRESCRIPTIONS, Permission.DISPENSE_MEDICATIONS],\n      [UserRoles.LABORATORY_TECHNICIAN]: [Permission.VIEW_LAB_RESULTS, Permission.ENTER_LAB_RESULTS],\n      [UserRoles.RADIOLOGY_TECHNICIAN]: [Permission.PERFORM_IMAGING_STUDIES, Permission.VIEW_IMAGING_RESULTS],\n      [UserRoles.PATIENT]: [Permission.VIEW_OWN_RECORDS, Permission.REQUEST_APPOINTMENTS]\n    };\n    \n    return rolePermissions[role] || [];\n  }\n\n  /**\n   * Generate backup codes for MFA\n   */\n  private generateBackupCodes(): string[] {\n    const codes: string[] = [];\n    for (let i = 0; i < AUTH_CONFIG.mfa.backupCodesCount; i++) {\n      const code = crypto.randomBytes(4).toString('hex').toUpperCase();\n      codes.push(code);\n    }\n    return codes;\n  }\n\n  /**\n   * Convert JWT expiry string to seconds\n   */\n  private getTokenExpiryTime(expiry: string): number {\n    const unit = expiry.slice(-1);\n    const value = parseInt(expiry.slice(0, -1));\n\n    switch (unit) {\n      case 's': return value;\n      case 'm': return value * 60;\n      case 'h': return value * 60 * 60;\n      case 'd': return value * 24 * 60 * 60;\n      default: return 15 * 60; // Default 15 minutes\n    }\n  }\n\n  /**\n   * Generate secure random token for password reset\n   */\n  generateSecureToken(): string {\n    return crypto.randomBytes(32).toString('hex');\n  }\n}\n"],"version":3}