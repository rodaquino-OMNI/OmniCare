{"file":"/Users/rodrigo/claude-projects/OmniCare/backend/src/controllers/analytics.controller.ts","mappings":"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","names":[],"sources":["/Users/rodrigo/claude-projects/OmniCare/backend/src/controllers/analytics.controller.ts"],"sourcesContent":["/**\n * Analytics Controller\n * \n * Express-based controller for analytics and reporting endpoints\n */\n\nimport { Request, Response } from 'express';\nimport logger from '../utils/logger';\n\n/**\n * Analytics Controller\n * Handles analytics and reporting endpoints for OmniCare EMR\n */\nexport class AnalyticsController {\n  constructor() {\n    // Initialize any dependencies here\n  }\n\n  // Clinical Quality Measures Endpoint\n  getClinicalQualityMeasures(req: Request, res: Response) {\n    try {\n      const { facilityId } = req.params;\n      const { startDate, endDate } = req.query;\n\n      // Mock implementation for build compatibility\n      const mockData = {\n        facilityId,\n        measures: [],\n        period: { startDate, endDate },\n        timestamp: new Date()\n      };\n\n      res.json({\n        success: true,\n        data: mockData\n      });\n    } catch (error: unknown) {\n      logger.error('Error fetching clinical quality measures:', error);\n      res.status(500).json({\n        success: false,\n        error: 'Failed to fetch clinical quality measures'\n      });\n    }\n  }\n\n  // Financial Analytics Endpoint\n  async getFinancialAnalytics(req: Request, res: Response) {\n    try {\n      const { facilityId } = req.params;\n      const { startDate, endDate } = req.query;\n\n      // Mock implementation for build compatibility\n      const mockData = {\n        facilityId,\n        revenue: 0,\n        expenses: 0,\n        period: { startDate, endDate },\n        timestamp: new Date()\n      };\n\n      res.json({\n        success: true,\n        data: mockData\n      });\n    } catch (error: any) {\n      logger.error('Error fetching financial analytics:', error);\n      res.status(500).json({\n        success: false,\n        error: 'Failed to fetch financial analytics'\n      });\n    }\n  }\n\n  // Operational Metrics Endpoint\n  async getOperationalMetrics(req: Request, res: Response) {\n    try {\n      const { facilityId } = req.params;\n\n      // Mock implementation for build compatibility\n      const mockData = {\n        facilityId,\n        patientFlow: {},\n        staffUtilization: {},\n        appointments: {},\n        timestamp: new Date()\n      };\n\n      res.json({\n        success: true,\n        data: mockData\n      });\n    } catch (error: any) {\n      logger.error('Error fetching operational metrics:', error);\n      res.status(500).json({\n        success: false,\n        error: 'Failed to fetch operational metrics'\n      });\n    }\n  }\n\n  // Population Health Analytics Endpoint\n  async getPopulationHealthAnalytics(req: Request, res: Response) {\n    try {\n      const { facilityId } = req.params;\n      const { startDate, endDate } = req.query;\n\n      // Mock implementation for build compatibility\n      const mockData = {\n        facilityId,\n        populationMetrics: {},\n        riskStratification: {},\n        period: { startDate, endDate },\n        timestamp: new Date()\n      };\n\n      res.json({\n        success: true,\n        data: mockData\n      });\n    } catch (error: any) {\n      logger.error('Error fetching population health analytics:', error);\n      res.status(500).json({\n        success: false,\n        error: 'Failed to fetch population health analytics'\n      });\n    }\n  }\n\n  // Reports Endpoint\n  async getReports(req: Request, res: Response) {\n    try {\n      const { facilityId, type, status } = req.query;\n\n      // Mock implementation for build compatibility\n      const mockData = {\n        reports: [],\n        filters: { facilityId, type, status },\n        timestamp: new Date()\n      };\n\n      res.json({\n        success: true,\n        data: mockData\n      });\n    } catch (error: any) {\n      logger.error('Error fetching reports:', error);\n      res.status(500).json({\n        success: false,\n        error: 'Failed to fetch reports'\n      });\n    }\n  }\n\n  // Create Custom Report Endpoint\n  async createCustomReport(req: Request, res: Response) {\n    try {\n      const reportConfig = req.body;\n\n      // Mock implementation for build compatibility\n      const mockReport = {\n        id: `report-${Date.now()}`,\n        config: reportConfig,\n        status: 'created',\n        timestamp: new Date()\n      };\n\n      res.json({\n        success: true,\n        data: mockReport\n      });\n    } catch (error: any) {\n      logger.error('Error creating custom report:', error);\n      res.status(500).json({\n        success: false,\n        error: 'Failed to create custom report'\n      });\n    }\n  }\n\n  // Real-time Metrics Endpoint\n  async getRealTimeMetrics(req: Request, res: Response) {\n    try {\n      const { facilityId } = req.params;\n\n      // Mock implementation for build compatibility\n      const mockData = {\n        facilityId,\n        realTimeMetrics: {\n          activePatients: 0,\n          waitingPatients: 0,\n          availableProviders: 0\n        },\n        timestamp: new Date()\n      };\n\n      res.json({\n        success: true,\n        data: mockData\n      });\n    } catch (error: any) {\n      logger.error('Error fetching real-time metrics:', error);\n      res.status(500).json({\n        success: false,\n        error: 'Failed to fetch real-time metrics'\n      });\n    }\n  }\n\n  // Analytics Alerts Endpoint\n  async getAnalyticsAlerts(req: Request, res: Response) {\n    try {\n      const { facilityId } = req.params;\n\n      // Mock implementation for build compatibility\n      const mockData = {\n        facilityId,\n        alerts: [],\n        timestamp: new Date()\n      };\n\n      res.json({\n        success: true,\n        data: mockData\n      });\n    } catch (error: any) {\n      logger.error('Error fetching analytics alerts:', error);\n      res.status(500).json({\n        success: false,\n        error: 'Failed to fetch analytics alerts'\n      });\n    }\n  }\n\n  // Benchmark Comparisons Endpoint\n  async getBenchmarkComparisons(req: Request, res: Response) {\n    try {\n      const { facilityId } = req.params;\n      const { category } = req.query;\n\n      // Mock benchmark data for build compatibility\n      const benchmarks = {\n        clinical: {\n          diabetesControl: { current: 73.5, benchmark: 75.0, percentile: 45 },\n          hypertensionControl: { current: 68.2, benchmark: 70.0, percentile: 42 },\n          patientSatisfaction: { current: 4.2, benchmark: 4.5, percentile: 38 }\n        },\n        financial: {\n          collectionRate: { current: 92.5, benchmark: 95.0, percentile: 48 },\n          daysInAR: { current: 45, benchmark: 35, percentile: 25 },\n          denialRate: { current: 8.5, benchmark: 5.0, percentile: 20 }\n        },\n        operational: {\n          waitTime: { current: 18, benchmark: 15, percentile: 35 },\n          patientThroughput: { current: 85, benchmark: 95, percentile: 40 },\n          staffUtilization: { current: 87.5, benchmark: 85.0, percentile: 65 }\n        }\n      };\n\n      const result = category ? benchmarks[category as keyof typeof benchmarks] : benchmarks;\n\n      res.json({\n        success: true,\n        data: result\n      });\n    } catch (error: any) {\n      logger.error('Error fetching benchmark comparisons:', error);\n      res.status(500).json({\n        success: false,\n        error: 'Failed to fetch benchmark comparisons'\n      });\n    }\n  }\n}\n\nconst analyticsControllerInstance = new AnalyticsController();\n\nexport default analyticsControllerInstance;\nexport const analyticsController = analyticsControllerInstance;"],"version":3}