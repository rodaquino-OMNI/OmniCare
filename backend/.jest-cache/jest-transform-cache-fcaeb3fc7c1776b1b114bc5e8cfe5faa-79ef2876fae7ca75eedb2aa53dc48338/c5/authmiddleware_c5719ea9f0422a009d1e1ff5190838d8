5f1bb988e9678d7d161060f8cf0a7368
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.requireScope = exports.auditLog = exports.requireAdmin = exports.requireResourceAccess = exports.requirePatientAccess = exports.requireMinimumRole = exports.requireRole = exports.requirePermission = exports.optionalAuthenticate = exports.smartAuthenticate = exports.authenticateToken = exports.authenticate = exports.AuthMiddleware = void 0;
const jwt_service_1 = require("@/auth/jwt.service");
const role_permissions_1 = require("@/auth/role-permissions");
const audit_service_1 = require("@/services/audit.service");
const session_service_1 = require("@/services/session.service");
const smart_fhir_service_1 = require("@/services/smart-fhir.service");
const auth_types_1 = require("@/types/auth.types");
const logger_1 = __importDefault(require("@/utils/logger"));
const error_utils_1 = require("@/utils/error.utils");
/**
 * Authentication middleware for SMART on FHIR and OmniCare JWT authentication
 */
class AuthMiddleware {
    static jwtService = new jwt_service_1.JWTAuthService();
    static sessionManager = new session_service_1.SessionManager();
    static auditService = new audit_service_1.AuditService();
    /**
     * OmniCare JWT Authentication middleware
     */
    static async authenticate(req, res, next) {
        try {
            const authHeader = req.headers.authorization;
            if (!authHeader) {
                await AuthMiddleware.auditService.logSecurityEvent({
                    type: 'LOGIN_FAILURE',
                    severity: 'LOW',
                    description: 'Missing authorization header',
                    metadata: {
                        path: req.path,
                        method: req.method,
                        ip: req.ip,
                    }
                });
                res.status(401).json({
                    success: false,
                    error: 'MISSING_AUTHORIZATION',
                    message: 'Authorization header is required'
                });
                return;
            }
            const token = AuthMiddleware.jwtService.extractTokenFromHeader(authHeader);
            if (!token) {
                res.status(401).json({
                    success: false,
                    error: 'INVALID_TOKEN_FORMAT',
                    message: 'Invalid authorization header format. Expected: Bearer <token>'
                });
                return;
            }
            req.token = token;
            // Verify JWT token
            const tokenPayload = await AuthMiddleware.jwtService.verifyAccessToken(token);
            // Get and validate session
            const session = await AuthMiddleware.sessionManager.getSession(tokenPayload.sessionId);
            if (!session) {
                res.status(401).json({
                    success: false,
                    error: 'SESSION_EXPIRED',
                    message: 'Your session has expired. Please log in again.'
                });
                return;
            }
            // Validate session security
            const securityValidation = await AuthMiddleware.sessionManager.validateSessionSecurity(session, req.ip || 'unknown', req.get('User-Agent') || 'unknown');
            if (!securityValidation.isValid) {
                await AuthMiddleware.auditService.logSecurityEvent({
                    type: 'UNAUTHORIZED_ACCESS',
                    userId: session.userId,
                    severity: 'HIGH',
                    description: 'Session security validation failed',
                    metadata: {
                        sessionId: session.sessionId,
                        securityIssues: securityValidation.securityIssues,
                        ipAddress: req.ip,
                        userAgent: req.get('User-Agent')
                    }
                });
                // Destroy compromised session
                await AuthMiddleware.sessionManager.destroySession(session.sessionId);
                res.status(401).json({
                    success: false,
                    error: 'SECURITY_VIOLATION',
                    message: 'Session security validation failed. Please log in again.'
                });
                return;
            }
            // Update session activity
            const updatedSession = await AuthMiddleware.sessionManager.updateSessionActivity(session.sessionId);
            if (updatedSession) {
                req.session = updatedSession;
            }
            // Mock user lookup - replace with actual database query
            const user = await AuthMiddleware.getUserById(tokenPayload.userId);
            if (!user || !user.isActive) {
                res.status(401).json({
                    success: false,
                    error: 'USER_INACTIVE',
                    message: 'User account is not active'
                });
                return;
            }
            req.user = user;
            // Log successful authentication
            await AuthMiddleware.auditService.logUserAction(user.id, 'authenticate', req.path, undefined, req.ip || 'unknown', req.get('User-Agent') || 'unknown', true);
            next();
        }
        catch (error) {
            await AuthMiddleware.auditService.logSecurityEvent({
                type: 'LOGIN_FAILURE',
                severity: 'MEDIUM',
                description: 'Authentication failed',
                metadata: {
                    error: (0, error_utils_1.getErrorMessage)(error),
                    ipAddress: req.ip,
                    userAgent: req.get('User-Agent'),
                    path: req.path
                }
            });
            res.status(401).json({
                success: false,
                error: 'AUTHENTICATION_FAILED',
                message: 'Invalid or expired authentication token'
            });
        }
    }
    /**
     * SMART on FHIR Authentication (for external systems)
     */
    static async smartAuthenticate(req, res, next) {
        try {
            const authHeader = req.headers.authorization;
            if (!authHeader) {
                res.status(401).json({
                    resourceType: 'OperationOutcome',
                    issue: [{
                            severity: 'error',
                            code: 'login',
                            diagnostics: 'Authorization header is required',
                        }],
                });
                return;
            }
            const parts = authHeader.split(' ');
            if (parts.length !== 2 || parts[0] !== 'Bearer') {
                res.status(401).json({
                    resourceType: 'OperationOutcome',
                    issue: [{
                            severity: 'error',
                            code: 'login',
                            diagnostics: 'Invalid authorization header format. Expected: Bearer <token>',
                        }],
                });
                return;
            }
            const token = parts[1];
            if (!token) {
                res.status(401).json({
                    success: false,
                    error: 'MISSING_TOKEN',
                    message: 'No token provided'
                });
                return;
            }
            req.token = token;
            // Try SMART token introspection
            const introspectionResult = await smart_fhir_service_1.smartFHIRService.introspectToken(token);
            if (!introspectionResult.active) {
                res.status(401).json({
                    resourceType: 'OperationOutcome',
                    issue: [{
                            severity: 'error',
                            code: 'login',
                            diagnostics: 'Token is not active',
                        }],
                });
                return;
            }
            req.smartAuth = {
                id: introspectionResult.sub || introspectionResult.patient,
                sub: introspectionResult.sub,
                scope: introspectionResult.scope ? introspectionResult.scope.split(' ') : [],
                patient: introspectionResult.patient,
                encounter: introspectionResult.encounter,
                fhirUser: introspectionResult.fhirUser,
                iss: introspectionResult.iss,
                aud: introspectionResult.aud,
                clientId: introspectionResult.client_id,
                tokenType: 'smart',
            };
            logger_1.default.security('SMART token authentication successful', {
                userId: req.smartAuth.id,
                clientId: req.smartAuth.clientId,
                path: req.path,
                method: req.method,
            });
            next();
        }
        catch (error) {
            logger_1.default.error('SMART authentication failed:', error);
            res.status(401).json({
                resourceType: 'OperationOutcome',
                issue: [{
                        severity: 'error',
                        code: 'login',
                        diagnostics: 'Invalid or expired token',
                    }],
            });
        }
    }
    /**
     * Optional authentication - allows both authenticated and unauthenticated requests
     */
    static async optionalAuthenticate(req, res, next) {
        const authHeader = req.headers.authorization;
        if (!authHeader) {
            // No authentication provided, continue without user context
            next();
            return;
        }
        // Authentication provided, validate it
        await AuthMiddleware.authenticate(req, res, next);
    }
    /**
     * Permission-based authorization middleware
     */
    static requirePermission(...requiredPermissions) {
        return async (req, res, next) => {
            if (!req.user) {
                res.status(401).json({
                    success: false,
                    error: 'AUTHENTICATION_REQUIRED',
                    message: 'Authentication required'
                });
                return;
            }
            const { user } = req;
            // Check if user has all required permissions
            const hasAllPermissions = requiredPermissions.every(permission => (0, role_permissions_1.hasPermission)(user.role, permission));
            if (!hasAllPermissions) {
                await AuthMiddleware.auditService.logUserAction(user.id, 'unauthorized_access_attempt', req.path, undefined, req.ip || 'unknown', req.get('User-Agent') || 'unknown', false, `Missing required permissions: ${requiredPermissions.join(', ')}`);
                res.status(403).json({
                    success: false,
                    error: 'INSUFFICIENT_PERMISSIONS',
                    message: 'You do not have permission to access this resource'
                });
                return;
            }
            next();
        };
    }
    /**
     * Role-based authorization middleware
     */
    static requireRole(...allowedRoles) {
        return async (req, res, next) => {
            if (!req.user) {
                res.status(401).json({
                    success: false,
                    error: 'AUTHENTICATION_REQUIRED',
                    message: 'Authentication required'
                });
                return;
            }
            const { user } = req;
            if (!allowedRoles.includes(user.role)) {
                await AuthMiddleware.auditService.logUserAction(user.id, 'unauthorized_role_access', req.path, undefined, req.ip || 'unknown', req.get('User-Agent') || 'unknown', false, `User role ${user.role} not in allowed roles: ${allowedRoles.join(', ')}`);
                res.status(403).json({
                    success: false,
                    error: 'INSUFFICIENT_PRIVILEGES',
                    message: 'Your role does not have access to this resource'
                });
                return;
            }
            next();
        };
    }
    /**
     * Hierarchical role authorization (user must have higher or equal role)
     */
    static requireMinimumRole(minimumRole) {
        return async (req, res, next) => {
            if (!req.user) {
                res.status(401).json({
                    success: false,
                    error: 'AUTHENTICATION_REQUIRED',
                    message: 'Authentication required'
                });
                return;
            }
            const { user } = req;
            if (!(0, role_permissions_1.hasHigherRole)(user.role, minimumRole) && user.role !== minimumRole) {
                await AuthMiddleware.auditService.logUserAction(user.id, 'insufficient_role_level', req.path, undefined, req.ip || 'unknown', req.get('User-Agent') || 'unknown', false, `User role ${user.role} below minimum required role: ${minimumRole}`);
                res.status(403).json({
                    success: false,
                    error: 'INSUFFICIENT_ROLE_LEVEL',
                    message: 'Your role level is insufficient for this resource'
                });
                return;
            }
            next();
        };
    }
    /**
     * Patient-specific authorization - ensure user can access specific patient data
     */
    static requirePatientAccess(req, res, next) {
        if (!req.user) {
            res.status(401).json({
                resourceType: 'OperationOutcome',
                issue: [{
                        severity: 'error',
                        code: 'login',
                        diagnostics: 'Authentication required',
                    }],
            });
            return;
        }
        const requestedPatientId = req.params.patientId || req.params.id;
        const authorizedPatientId = req.user.patient;
        // Check if user has system-level access
        const hasSystemAccess = req.user.scope?.some(scope => scope.includes('system/') || scope === '*');
        if (hasSystemAccess) {
            // System-level access allows access to any patient
            next();
            return;
        }
        // For patient-level access, verify patient ID matches
        if (!authorizedPatientId) {
            logger_1.default.security('Patient access denied - no patient context', {
                userId: req.user.id,
                requestedPatientId,
                path: req.path,
                method: req.method,
            });
            res.status(403).json({
                resourceType: 'OperationOutcome',
                issue: [{
                        severity: 'error',
                        code: 'forbidden',
                        diagnostics: 'No patient context available',
                    }],
            });
            return;
        }
        if (requestedPatientId && authorizedPatientId !== requestedPatientId) {
            logger_1.default.security('Patient access denied - patient ID mismatch', {
                userId: req.user.id,
                authorizedPatientId,
                requestedPatientId,
                path: req.path,
                method: req.method,
            });
            res.status(403).json({
                resourceType: 'OperationOutcome',
                issue: [{
                        severity: 'error',
                        code: 'forbidden',
                        diagnostics: 'Access denied to requested patient',
                    }],
            });
            return;
        }
        next();
    }
    /**
     * Resource-specific authorization middleware
     */
    static requireResourceAccess(resourceType, operation) {
        return (req, res, next) => {
            if (!req.user) {
                res.status(401).json({
                    resourceType: 'OperationOutcome',
                    issue: [{
                            severity: 'error',
                            code: 'login',
                            diagnostics: 'Authentication required',
                        }],
                });
                return;
            }
            const userScopes = req.user.scope || [];
            // Check for specific resource access
            const resourceScopes = [
                `system/${resourceType}.${operation}`,
                `system/${resourceType}.*`,
                `user/${resourceType}.${operation}`,
                `user/${resourceType}.*`,
                `patient/${resourceType}.${operation}`,
                `patient/${resourceType}.*`,
                operation === 'read' ? `system/${resourceType}.read` : null,
                operation === 'write' ? `system/${resourceType}.write` : null,
                '*',
            ].filter(Boolean);
            const hasAccess = resourceScopes.some(scope => userScopes.includes(scope));
            if (!hasAccess) {
                logger_1.default.security('Resource access denied', {
                    userId: req.user.id,
                    resourceType,
                    operation,
                    userScopes,
                    path: req.path,
                    method: req.method,
                });
                res.status(403).json({
                    resourceType: 'OperationOutcome',
                    issue: [{
                            severity: 'error',
                            code: 'forbidden',
                            diagnostics: `Insufficient permissions for ${resourceType} ${operation}`,
                        }],
                });
                return;
            }
            next();
        };
    }
    /**
     * SMART on FHIR scope authorization middleware
     */
    static requireScope(requiredScopes) {
        return (req, res, next) => {
            if (!req.user && !req.smartAuth) {
                res.status(401).json({
                    resourceType: 'OperationOutcome',
                    issue: [{
                            severity: 'error',
                            code: 'login',
                            diagnostics: 'Authentication required',
                        }],
                });
                return;
            }
            const userScopes = req.user?.scope || req.smartAuth?.scope || [];
            // Check if user has any of the required scopes
            const hasRequiredScope = requiredScopes.some(requiredScope => {
                // Check for exact match
                if (userScopes.includes(requiredScope)) {
                    return true;
                }
                // Check for wildcard matches
                if (userScopes.includes('*')) {
                    return true;
                }
                // Check for partial wildcard matches (e.g., system/* matches system/*.read)
                const scopeParts = requiredScope.split('/');
                const resourcePart = scopeParts[0];
                const permissionPart = scopeParts[1];
                return userScopes.some(userScope => {
                    if (userScope === `${resourcePart}/*`) {
                        return true;
                    }
                    if (permissionPart && userScope === `${resourcePart}/${permissionPart.split('.')[0]}.*`) {
                        return true;
                    }
                    return false;
                });
            });
            if (!hasRequiredScope) {
                logger_1.default.security('Scope access denied', {
                    userId: req.user?.id || req.smartAuth?.id,
                    requiredScopes,
                    userScopes,
                    path: req.path,
                    method: req.method,
                });
                res.status(403).json({
                    resourceType: 'OperationOutcome',
                    issue: [{
                            severity: 'error',
                            code: 'forbidden',
                            diagnostics: `Insufficient scopes. Required: ${requiredScopes.join(' or ')}`,
                        }],
                });
                return;
            }
            next();
        };
    }
    /**
     * Admin role authorization
     */
    static requireAdmin(req, res, next) {
        if (!req.user) {
            res.status(401).json({
                resourceType: 'OperationOutcome',
                issue: [{
                        severity: 'error',
                        code: 'login',
                        diagnostics: 'Authentication required',
                    }],
            });
            return;
        }
        const isAdmin = req.user.scope?.includes('admin') ||
            req.user.scope?.includes('*') ||
            req.user.scope?.includes('system/*.*');
        if (!isAdmin) {
            logger_1.default.security('Admin access denied', {
                userId: req.user.id,
                userScopes: req.user.scope,
                path: req.path,
                method: req.method,
            });
            res.status(403).json({
                resourceType: 'OperationOutcome',
                issue: [{
                        severity: 'error',
                        code: 'forbidden',
                        diagnostics: 'Administrator privileges required',
                    }],
            });
            return;
        }
        next();
    }
    /**
     * Mock user lookup - replace with actual database query
     */
    static async getUserById(userId) {
        try {
            // Mock implementation - replace with actual database query
            const mockUsers = {
                'user-1': {
                    id: 'user-1',
                    username: 'admin@omnicare.com',
                    email: 'admin@omnicare.com',
                    firstName: 'System',
                    lastName: 'Administrator',
                    role: auth_types_1.UserRoles.SYSTEM_ADMINISTRATOR,
                    department: 'IT',
                    isActive: true,
                    isMfaEnabled: true,
                    passwordChangedAt: new Date(),
                    failedLoginAttempts: 0,
                    createdAt: new Date(),
                    updatedAt: new Date()
                },
                'user-2': {
                    id: 'user-2',
                    username: 'doctor@omnicare.com',
                    email: 'doctor@omnicare.com',
                    firstName: 'Dr. Jane',
                    lastName: 'Smith',
                    role: auth_types_1.UserRoles.PHYSICIAN,
                    department: 'Cardiology',
                    licenseNumber: 'MD123456',
                    npiNumber: '1234567890',
                    isActive: true,
                    isMfaEnabled: true,
                    passwordChangedAt: new Date(),
                    failedLoginAttempts: 0,
                    createdAt: new Date(),
                    updatedAt: new Date()
                },
                'user-3': {
                    id: 'user-3',
                    username: 'nurse@omnicare.com',
                    email: 'nurse@omnicare.com',
                    firstName: 'Sarah',
                    lastName: 'Johnson',
                    role: auth_types_1.UserRoles.NURSING_STAFF,
                    department: 'Emergency',
                    licenseNumber: 'RN789012',
                    isActive: true,
                    isMfaEnabled: false,
                    passwordChangedAt: new Date(),
                    failedLoginAttempts: 0,
                    createdAt: new Date(),
                    updatedAt: new Date()
                }
            };
            return mockUsers[userId] || null;
        }
        catch (error) {
            logger_1.default.error('Get user by ID failed:', error);
            return null;
        }
    }
    /**
     * Rate limiting based on user or client
     */
    static createRateLimiter(windowMs = 15 * 60 * 1000, max = 100) {
        const rateLimitStore = new Map();
        return (req, res, next) => {
            const key = req.user?.id || req.user?.clientId || req.ip || 'unknown';
            const now = Date.now();
            const userLimit = rateLimitStore.get(key);
            if (!userLimit || now > userLimit.resetTime) {
                // Reset or create new limit
                rateLimitStore.set(key, {
                    count: 1,
                    resetTime: now + windowMs,
                });
                res.setHeader('X-RateLimit-Limit', max);
                res.setHeader('X-RateLimit-Remaining', max - 1);
                res.setHeader('X-RateLimit-Reset', new Date(now + windowMs).toISOString());
                next();
                return;
            }
            if (userLimit.count >= max) {
                logger_1.default.security('Rate limit exceeded', {
                    key,
                    userId: req.user?.id,
                    clientId: req.user?.clientId,
                    path: req.path,
                    method: req.method,
                    count: userLimit.count,
                    limit: max,
                });
                res.status(429).json({
                    resourceType: 'OperationOutcome',
                    issue: [{
                            severity: 'error',
                            code: 'throttled',
                            diagnostics: 'Rate limit exceeded. Please try again later.',
                        }],
                });
                return;
            }
            userLimit.count++;
            rateLimitStore.set(key, userLimit);
            res.setHeader('X-RateLimit-Limit', max);
            res.setHeader('X-RateLimit-Remaining', max - userLimit.count);
            res.setHeader('X-RateLimit-Reset', new Date(userLimit.resetTime).toISOString());
            next();
        };
    }
    /**
     * Audit logging middleware
     */
    static auditLog(req, res, next) {
        const startTime = Date.now();
        // Log request
        logger_1.default.audit('API request initiated', {
            userId: req.user?.id,
            clientId: req.user?.clientId,
            method: req.method,
            path: req.path,
            query: req.query,
            userAgent: req.get('User-Agent'),
            ip: req.ip,
            timestamp: new Date().toISOString(),
        });
        // Override res.json to log response
        const originalJson = res.json;
        res.json = function (body) {
            const duration = Date.now() - startTime;
            logger_1.default.audit('API request completed', {
                userId: req.user?.id,
                clientId: req.user?.clientId,
                method: req.method,
                path: req.path,
                statusCode: res.statusCode,
                duration: `${duration}ms`,
                timestamp: new Date().toISOString(),
            });
            return originalJson.call(this, body);
        };
        next();
    }
}
exports.AuthMiddleware = AuthMiddleware;
// Convenience exports for OmniCare authentication
exports.authenticate = AuthMiddleware.authenticate;
exports.authenticateToken = AuthMiddleware.authenticate; // Alias for backward compatibility
exports.smartAuthenticate = AuthMiddleware.smartAuthenticate;
exports.optionalAuthenticate = AuthMiddleware.optionalAuthenticate;
exports.requirePermission = AuthMiddleware.requirePermission;
exports.requireRole = AuthMiddleware.requireRole;
exports.requireMinimumRole = AuthMiddleware.requireMinimumRole;
exports.requirePatientAccess = AuthMiddleware.requirePatientAccess;
exports.requireResourceAccess = AuthMiddleware.requireResourceAccess;
exports.requireAdmin = AuthMiddleware.requireAdmin;
exports.auditLog = AuthMiddleware.auditLog;
exports.requireScope = AuthMiddleware.requireScope;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,