{"file":"/Users/rodrigo/claude-projects/OmniCare/backend/src/middleware/auth.middleware.ts","mappings":"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","names":[],"sources":["/Users/rodrigo/claude-projects/OmniCare/backend/src/middleware/auth.middleware.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport jwt from 'jsonwebtoken';\n\nimport { JWTAuthService } from '@/auth/jwt.service';\nimport { hasPermission, hasHigherRole } from '@/auth/role-permissions';\nimport config from '@/config';\nimport { AuditService } from '@/services/audit.service';\nimport { SessionManager } from '@/services/session.service';\nimport { smartFHIRService } from '@/services/smart-fhir.service';\nimport { User, UserRole, UserRoles, Permission, SessionInfo } from '@/types/auth.types';\nimport logger from '@/utils/logger';\nimport { getErrorMessage } from '@/utils/error.utils';\n\n// Extended Request interface to include authentication data\ndeclare global {\n  namespace Express {\n    interface Request {\n      user?: User;\n      session?: SessionInfo;\n      token?: string;\n      requestId?: string;\n      smartAuth?: {\n        id: string;\n        sub: string;\n        scope: string[];\n        patient?: string;\n        encounter?: string;\n        fhirUser?: string;\n        iss?: string;\n        aud?: string;\n        clientId?: string;\n        tokenType?: string;\n      };\n    }\n  }\n}\n\n/**\n * Authentication middleware for SMART on FHIR and OmniCare JWT authentication\n */\nexport class AuthMiddleware {\n  private static jwtService = new JWTAuthService();\n  private static sessionManager = new SessionManager();\n  private static auditService = new AuditService();\n\n  /**\n   * OmniCare JWT Authentication middleware\n   */\n  static async authenticate(req: Request, res: Response, next: NextFunction): Promise<void> {\n    try {\n      const authHeader = req.headers.authorization;\n      if (!authHeader) {\n        await AuthMiddleware.auditService.logSecurityEvent({\n          type: 'LOGIN_FAILURE',\n          severity: 'LOW',\n          description: 'Missing authorization header',\n          metadata: { \n            path: req.path,\n            method: req.method,\n            ip: req.ip,\n          }\n        });\n        \n        res.status(401).json({\n          success: false,\n          error: 'MISSING_AUTHORIZATION',\n          message: 'Authorization header is required'\n        });\n        return;\n      }\n\n      const token = AuthMiddleware.jwtService.extractTokenFromHeader(authHeader);\n      if (!token) {\n        res.status(401).json({\n          success: false,\n          error: 'INVALID_TOKEN_FORMAT',\n          message: 'Invalid authorization header format. Expected: Bearer <token>'\n        });\n        return;\n      }\n\n      req.token = token;\n\n      // Verify JWT token\n      const tokenPayload = await AuthMiddleware.jwtService.verifyAccessToken(token);\n      \n      // Get and validate session\n      const session = await AuthMiddleware.sessionManager.getSession(tokenPayload.sessionId);\n      if (!session) {\n        res.status(401).json({\n          success: false,\n          error: 'SESSION_EXPIRED',\n          message: 'Your session has expired. Please log in again.'\n        });\n        return;\n      }\n\n      // Validate session security\n      const securityValidation = await AuthMiddleware.sessionManager.validateSessionSecurity(\n        session,\n        req.ip || 'unknown',\n        req.get('User-Agent') || 'unknown'\n      );\n\n      if (!securityValidation.isValid) {\n        await AuthMiddleware.auditService.logSecurityEvent({\n          type: 'UNAUTHORIZED_ACCESS',\n          userId: session.userId,\n          severity: 'HIGH',\n          description: 'Session security validation failed',\n          metadata: {\n            sessionId: session.sessionId,\n            securityIssues: securityValidation.securityIssues,\n            ipAddress: req.ip,\n            userAgent: req.get('User-Agent')\n          }\n        });\n\n        // Destroy compromised session\n        await AuthMiddleware.sessionManager.destroySession(session.sessionId);\n\n        res.status(401).json({\n          success: false,\n          error: 'SECURITY_VIOLATION',\n          message: 'Session security validation failed. Please log in again.'\n        });\n        return;\n      }\n\n      // Update session activity\n      const updatedSession = await AuthMiddleware.sessionManager.updateSessionActivity(session.sessionId);\n      if (updatedSession) {\n        req.session = updatedSession;\n      }\n\n      // Mock user lookup - replace with actual database query\n      const user = await AuthMiddleware.getUserById(tokenPayload.userId);\n      if (!user || !user.isActive) {\n        res.status(401).json({\n          success: false,\n          error: 'USER_INACTIVE',\n          message: 'User account is not active'\n        });\n        return;\n      }\n\n      req.user = user;\n\n      // Log successful authentication\n      await AuthMiddleware.auditService.logUserAction(\n        user.id,\n        'authenticate',\n        req.path,\n        undefined,\n        req.ip || 'unknown',\n        req.get('User-Agent') || 'unknown',\n        true\n      );\n\n      next();\n    } catch (error) {\n      await AuthMiddleware.auditService.logSecurityEvent({\n        type: 'LOGIN_FAILURE',\n        severity: 'MEDIUM',\n        description: 'Authentication failed',\n        metadata: {\n          error: getErrorMessage(error),\n          ipAddress: req.ip,\n          userAgent: req.get('User-Agent'),\n          path: req.path\n        }\n      });\n\n      res.status(401).json({\n        success: false,\n        error: 'AUTHENTICATION_FAILED',\n        message: 'Invalid or expired authentication token'\n      });\n    }\n  }\n\n  /**\n   * SMART on FHIR Authentication (for external systems)\n   */\n  static async smartAuthenticate(req: Request, res: Response, next: NextFunction): Promise<void> {\n    try {\n      const authHeader = req.headers.authorization;\n      if (!authHeader) {\n        res.status(401).json({\n          resourceType: 'OperationOutcome',\n          issue: [{\n            severity: 'error',\n            code: 'login',\n            diagnostics: 'Authorization header is required',\n          }],\n        });\n        return;\n      }\n\n      const parts = authHeader.split(' ');\n      if (parts.length !== 2 || parts[0] !== 'Bearer') {\n        res.status(401).json({\n          resourceType: 'OperationOutcome',\n          issue: [{\n            severity: 'error',\n            code: 'login',\n            diagnostics: 'Invalid authorization header format. Expected: Bearer <token>',\n          }],\n        });\n        return;\n      }\n\n      const token = parts[1];\n      if (!token) {\n        res.status(401).json({\n          success: false,\n          error: 'MISSING_TOKEN',\n          message: 'No token provided'\n        });\n        return;\n      }\n      \n      req.token = token;\n\n      // Try SMART token introspection\n      const introspectionResult = await smartFHIRService.introspectToken(token);\n      \n      if (!introspectionResult.active) {\n        res.status(401).json({\n          resourceType: 'OperationOutcome',\n          issue: [{\n            severity: 'error',\n            code: 'login',\n            diagnostics: 'Token is not active',\n          }],\n        });\n        return;\n      }\n\n      req.smartAuth = {\n        id: introspectionResult.sub || introspectionResult.patient,\n        sub: introspectionResult.sub,\n        scope: introspectionResult.scope ? introspectionResult.scope.split(' ') : [],\n        patient: introspectionResult.patient,\n        encounter: introspectionResult.encounter,\n        fhirUser: introspectionResult.fhirUser,\n        iss: introspectionResult.iss,\n        aud: introspectionResult.aud,\n        clientId: introspectionResult.client_id,\n        tokenType: 'smart',\n      };\n\n      logger.security('SMART token authentication successful', {\n        userId: req.smartAuth.id,\n        clientId: req.smartAuth.clientId,\n        path: req.path,\n        method: req.method,\n      });\n\n      next();\n    } catch (error) {\n      logger.error('SMART authentication failed:', error);\n      res.status(401).json({\n        resourceType: 'OperationOutcome',\n        issue: [{\n          severity: 'error',\n          code: 'login',\n          diagnostics: 'Invalid or expired token',\n        }],\n      });\n    }\n  }\n\n  /**\n   * Optional authentication - allows both authenticated and unauthenticated requests\n   */\n  static async optionalAuthenticate(req: Request, res: Response, next: NextFunction): Promise<void> {\n    const authHeader = req.headers.authorization;\n    \n    if (!authHeader) {\n      // No authentication provided, continue without user context\n      next();\n      return;\n    }\n\n    // Authentication provided, validate it\n    await AuthMiddleware.authenticate(req, res, next);\n  }\n\n  /**\n   * Permission-based authorization middleware\n   */\n  static requirePermission(...requiredPermissions: Permission[]) {\n    return async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n      if (!req.user) {\n        res.status(401).json({\n          success: false,\n          error: 'AUTHENTICATION_REQUIRED',\n          message: 'Authentication required'\n        });\n        return;\n      }\n\n      const { user } = req;\n      \n      // Check if user has all required permissions\n      const hasAllPermissions = requiredPermissions.every(permission => \n        hasPermission(user.role, permission)\n      );\n\n      if (!hasAllPermissions) {\n        await AuthMiddleware.auditService.logUserAction(\n          user.id,\n          'unauthorized_access_attempt',\n          req.path,\n          undefined,\n          req.ip || 'unknown',\n          req.get('User-Agent') || 'unknown',\n          false,\n          `Missing required permissions: ${requiredPermissions.join(', ')}`\n        );\n\n        res.status(403).json({\n          success: false,\n          error: 'INSUFFICIENT_PERMISSIONS',\n          message: 'You do not have permission to access this resource'\n        });\n        return;\n      }\n\n      next();\n    };\n  }\n\n  /**\n   * Role-based authorization middleware\n   */\n  static requireRole(...allowedRoles: UserRole[]) {\n    return async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n      if (!req.user) {\n        res.status(401).json({\n          success: false,\n          error: 'AUTHENTICATION_REQUIRED',\n          message: 'Authentication required'\n        });\n        return;\n      }\n\n      const { user } = req;\n      \n      if (!allowedRoles.includes(user.role)) {\n        await AuthMiddleware.auditService.logUserAction(\n          user.id,\n          'unauthorized_role_access',\n          req.path,\n          undefined,\n          req.ip || 'unknown',\n          req.get('User-Agent') || 'unknown',\n          false,\n          `User role ${user.role} not in allowed roles: ${allowedRoles.join(', ')}`\n        );\n\n        res.status(403).json({\n          success: false,\n          error: 'INSUFFICIENT_PRIVILEGES',\n          message: 'Your role does not have access to this resource'\n        });\n        return;\n      }\n\n      next();\n    };\n  }\n\n  /**\n   * Hierarchical role authorization (user must have higher or equal role)\n   */\n  static requireMinimumRole(minimumRole: UserRole) {\n    return async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n      if (!req.user) {\n        res.status(401).json({\n          success: false,\n          error: 'AUTHENTICATION_REQUIRED',\n          message: 'Authentication required'\n        });\n        return;\n      }\n\n      const { user } = req;\n      \n      if (!hasHigherRole(user.role, minimumRole) && user.role !== minimumRole) {\n        await AuthMiddleware.auditService.logUserAction(\n          user.id,\n          'insufficient_role_level',\n          req.path,\n          undefined,\n          req.ip || 'unknown',\n          req.get('User-Agent') || 'unknown',\n          false,\n          `User role ${user.role} below minimum required role: ${minimumRole}`\n        );\n\n        res.status(403).json({\n          success: false,\n          error: 'INSUFFICIENT_ROLE_LEVEL',\n          message: 'Your role level is insufficient for this resource'\n        });\n        return;\n      }\n\n      next();\n    };\n  }\n\n  /**\n   * Patient-specific authorization - ensure user can access specific patient data\n   */\n  static requirePatientAccess(req: Request, res: Response, next: NextFunction): void {\n    if (!req.user) {\n      res.status(401).json({\n        resourceType: 'OperationOutcome',\n        issue: [{\n          severity: 'error',\n          code: 'login',\n          diagnostics: 'Authentication required',\n        }],\n      });\n      return;\n    }\n\n    const requestedPatientId = req.params.patientId || req.params.id;\n    const authorizedPatientId = req.user.patient;\n\n    // Check if user has system-level access\n    const hasSystemAccess = req.user.scope?.some(scope => \n      scope.includes('system/') || scope === '*'\n    );\n\n    if (hasSystemAccess) {\n      // System-level access allows access to any patient\n      next();\n      return;\n    }\n\n    // For patient-level access, verify patient ID matches\n    if (!authorizedPatientId) {\n      logger.security('Patient access denied - no patient context', {\n        userId: req.user.id,\n        requestedPatientId,\n        path: req.path,\n        method: req.method,\n      });\n      res.status(403).json({\n        resourceType: 'OperationOutcome',\n        issue: [{\n          severity: 'error',\n          code: 'forbidden',\n          diagnostics: 'No patient context available',\n        }],\n      });\n      return;\n    }\n\n    if (requestedPatientId && authorizedPatientId !== requestedPatientId) {\n      logger.security('Patient access denied - patient ID mismatch', {\n        userId: req.user.id,\n        authorizedPatientId,\n        requestedPatientId,\n        path: req.path,\n        method: req.method,\n      });\n      res.status(403).json({\n        resourceType: 'OperationOutcome',\n        issue: [{\n          severity: 'error',\n          code: 'forbidden',\n          diagnostics: 'Access denied to requested patient',\n        }],\n      });\n      return;\n    }\n\n    next();\n  }\n\n  /**\n   * Resource-specific authorization middleware\n   */\n  static requireResourceAccess(resourceType: string, operation: 'read' | 'write' | 'create' | 'delete' | '*') {\n    return (req: Request, res: Response, next: NextFunction): void => {\n      if (!req.user) {\n        res.status(401).json({\n          resourceType: 'OperationOutcome',\n          issue: [{\n            severity: 'error',\n            code: 'login',\n            diagnostics: 'Authentication required',\n          }],\n        });\n        return;\n      }\n\n      const userScopes = req.user.scope || [];\n      \n      // Check for specific resource access\n      const resourceScopes = [\n        `system/${resourceType}.${operation}`,\n        `system/${resourceType}.*`,\n        `user/${resourceType}.${operation}`,\n        `user/${resourceType}.*`,\n        `patient/${resourceType}.${operation}`,\n        `patient/${resourceType}.*`,\n        operation === 'read' ? `system/${resourceType}.read` : null,\n        operation === 'write' ? `system/${resourceType}.write` : null,\n        '*',\n      ].filter(Boolean) as string[];\n\n      const hasAccess = resourceScopes.some(scope => userScopes.includes(scope));\n\n      if (!hasAccess) {\n        logger.security('Resource access denied', {\n          userId: req.user.id,\n          resourceType,\n          operation,\n          userScopes,\n          path: req.path,\n          method: req.method,\n        });\n        res.status(403).json({\n          resourceType: 'OperationOutcome',\n          issue: [{\n            severity: 'error',\n            code: 'forbidden',\n            diagnostics: `Insufficient permissions for ${resourceType} ${operation}`,\n          }],\n        });\n        return;\n      }\n\n      next();\n    };\n  }\n\n  /**\n   * SMART on FHIR scope authorization middleware\n   */\n  static requireScope(requiredScopes: string[]) {\n    return (req: Request, res: Response, next: NextFunction): void => {\n      if (!req.user && !req.smartAuth) {\n        res.status(401).json({\n          resourceType: 'OperationOutcome',\n          issue: [{\n            severity: 'error',\n            code: 'login',\n            diagnostics: 'Authentication required',\n          }],\n        });\n        return;\n      }\n\n      const userScopes = req.user?.scope || req.smartAuth?.scope || [];\n      \n      // Check if user has any of the required scopes\n      const hasRequiredScope = requiredScopes.some(requiredScope => {\n        // Check for exact match\n        if (userScopes.includes(requiredScope)) {\n          return true;\n        }\n        \n        // Check for wildcard matches\n        if (userScopes.includes('*')) {\n          return true;\n        }\n        \n        // Check for partial wildcard matches (e.g., system/* matches system/*.read)\n        const scopeParts = requiredScope.split('/');\n        const resourcePart = scopeParts[0];\n        const permissionPart = scopeParts[1];\n        \n        return userScopes.some(userScope => {\n          if (userScope === `${resourcePart}/*`) {\n            return true;\n          }\n          if (permissionPart && userScope === `${resourcePart}/${permissionPart.split('.')[0]}.*`) {\n            return true;\n          }\n          return false;\n        });\n      });\n\n      if (!hasRequiredScope) {\n        logger.security('Scope access denied', {\n          userId: req.user?.id || req.smartAuth?.id,\n          requiredScopes,\n          userScopes,\n          path: req.path,\n          method: req.method,\n        });\n        res.status(403).json({\n          resourceType: 'OperationOutcome',\n          issue: [{\n            severity: 'error',\n            code: 'forbidden',\n            diagnostics: `Insufficient scopes. Required: ${requiredScopes.join(' or ')}`,\n          }],\n        });\n        return;\n      }\n\n      next();\n    };\n  }\n\n  /**\n   * Admin role authorization\n   */\n  static requireAdmin(req: Request, res: Response, next: NextFunction): void {\n    if (!req.user) {\n      res.status(401).json({\n        resourceType: 'OperationOutcome',\n        issue: [{\n          severity: 'error',\n          code: 'login',\n          diagnostics: 'Authentication required',\n        }],\n      });\n      return;\n    }\n\n    const isAdmin = req.user.scope?.includes('admin') || \n                   req.user.scope?.includes('*') ||\n                   req.user.scope?.includes('system/*.*');\n\n    if (!isAdmin) {\n      logger.security('Admin access denied', {\n        userId: req.user.id,\n        userScopes: req.user.scope,\n        path: req.path,\n        method: req.method,\n      });\n      res.status(403).json({\n        resourceType: 'OperationOutcome',\n        issue: [{\n          severity: 'error',\n          code: 'forbidden',\n          diagnostics: 'Administrator privileges required',\n        }],\n      });\n      return;\n    }\n\n    next();\n  }\n\n  /**\n   * Mock user lookup - replace with actual database query\n   */\n  private static async getUserById(userId: string): Promise<User | null> {\n    try {\n      // Mock implementation - replace with actual database query\n      const mockUsers: Record<string, User> = {\n        'user-1': {\n          id: 'user-1',\n          username: 'admin@omnicare.com',\n          email: 'admin@omnicare.com',\n          firstName: 'System',\n          lastName: 'Administrator',\n          role: UserRoles.SYSTEM_ADMINISTRATOR,\n          department: 'IT',\n          isActive: true,\n          isMfaEnabled: true,\n          passwordChangedAt: new Date(),\n          failedLoginAttempts: 0,\n          createdAt: new Date(),\n          updatedAt: new Date()\n        },\n        'user-2': {\n          id: 'user-2',\n          username: 'doctor@omnicare.com',\n          email: 'doctor@omnicare.com',\n          firstName: 'Dr. Jane',\n          lastName: 'Smith',\n          role: UserRoles.PHYSICIAN,\n          department: 'Cardiology',\n          licenseNumber: 'MD123456',\n          npiNumber: '1234567890',\n          isActive: true,\n          isMfaEnabled: true,\n          passwordChangedAt: new Date(),\n          failedLoginAttempts: 0,\n          createdAt: new Date(),\n          updatedAt: new Date()\n        },\n        'user-3': {\n          id: 'user-3',\n          username: 'nurse@omnicare.com',\n          email: 'nurse@omnicare.com',\n          firstName: 'Sarah',\n          lastName: 'Johnson',\n          role: UserRoles.NURSING_STAFF,\n          department: 'Emergency',\n          licenseNumber: 'RN789012',\n          isActive: true,\n          isMfaEnabled: false,\n          passwordChangedAt: new Date(),\n          failedLoginAttempts: 0,\n          createdAt: new Date(),\n          updatedAt: new Date()\n        }\n      };\n\n      return mockUsers[userId] || null;\n    } catch (error) {\n      logger.error('Get user by ID failed:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Rate limiting based on user or client\n   */\n  static createRateLimiter(windowMs: number = 15 * 60 * 1000, max: number = 100) {\n    const rateLimitStore = new Map<string, { count: number; resetTime: number }>();\n    \n    return (req: Request, res: Response, next: NextFunction): void => {\n      const key = req.user?.id || req.user?.clientId || req.ip || 'unknown';\n      const now = Date.now();\n      \n      const userLimit = rateLimitStore.get(key);\n      \n      if (!userLimit || now > userLimit.resetTime) {\n        // Reset or create new limit\n        rateLimitStore.set(key, {\n          count: 1,\n          resetTime: now + windowMs,\n        });\n        \n        res.setHeader('X-RateLimit-Limit', max);\n        res.setHeader('X-RateLimit-Remaining', max - 1);\n        res.setHeader('X-RateLimit-Reset', new Date(now + windowMs).toISOString());\n        \n        next();\n        return;\n      }\n      \n      if (userLimit.count >= max) {\n        logger.security('Rate limit exceeded', {\n          key,\n          userId: req.user?.id,\n          clientId: req.user?.clientId,\n          path: req.path,\n          method: req.method,\n          count: userLimit.count,\n          limit: max,\n        });\n        \n        res.status(429).json({\n          resourceType: 'OperationOutcome',\n          issue: [{\n            severity: 'error',\n            code: 'throttled',\n            diagnostics: 'Rate limit exceeded. Please try again later.',\n          }],\n        });\n        return;\n      }\n      \n      userLimit.count++;\n      rateLimitStore.set(key, userLimit);\n      \n      res.setHeader('X-RateLimit-Limit', max);\n      res.setHeader('X-RateLimit-Remaining', max - userLimit.count);\n      res.setHeader('X-RateLimit-Reset', new Date(userLimit.resetTime).toISOString());\n      \n      next();\n    };\n  }\n\n  /**\n   * Audit logging middleware\n   */\n  static auditLog(req: Request, res: Response, next: NextFunction): void {\n    const startTime = Date.now();\n    \n    // Log request\n    logger.audit('API request initiated', {\n      userId: req.user?.id,\n      clientId: req.user?.clientId,\n      method: req.method,\n      path: req.path,\n      query: req.query,\n      userAgent: req.get('User-Agent'),\n      ip: req.ip,\n      timestamp: new Date().toISOString(),\n    });\n\n    // Override res.json to log response\n    const originalJson = res.json;\n    res.json = function(body: any) {\n      const duration = Date.now() - startTime;\n      \n      logger.audit('API request completed', {\n        userId: req.user?.id,\n        clientId: req.user?.clientId,\n        method: req.method,\n        path: req.path,\n        statusCode: res.statusCode,\n        duration: `${duration}ms`,\n        timestamp: new Date().toISOString(),\n      });\n      \n      return originalJson.call(this, body);\n    };\n\n    next();\n  }\n}\n\n// Convenience exports for OmniCare authentication\nexport const authenticate = AuthMiddleware.authenticate;\nexport const authenticateToken = AuthMiddleware.authenticate; // Alias for backward compatibility\nexport const smartAuthenticate = AuthMiddleware.smartAuthenticate;\nexport const optionalAuthenticate = AuthMiddleware.optionalAuthenticate;\nexport const requirePermission = AuthMiddleware.requirePermission;\nexport const requireRole = AuthMiddleware.requireRole;\nexport const requireMinimumRole = AuthMiddleware.requireMinimumRole;\nexport const requirePatientAccess = AuthMiddleware.requirePatientAccess;\nexport const requireResourceAccess = AuthMiddleware.requireResourceAccess;\nexport const requireAdmin = AuthMiddleware.requireAdmin;\nexport const auditLog = AuthMiddleware.auditLog;\nexport const requireScope = AuthMiddleware.requireScope;"],"version":3}