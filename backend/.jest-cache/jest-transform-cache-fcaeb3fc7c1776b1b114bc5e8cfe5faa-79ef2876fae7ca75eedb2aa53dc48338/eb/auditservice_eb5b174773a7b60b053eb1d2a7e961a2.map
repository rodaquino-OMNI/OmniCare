{"file":"/Users/rodrigo/claude-projects/OmniCare/backend/src/services/audit.service.ts","mappings":"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","names":[],"sources":["/Users/rodrigo/claude-projects/OmniCare/backend/src/services/audit.service.ts"],"sourcesContent":["/**\n * OmniCare EMR Backend - Audit Logging Service\n * HIPAA-Compliant Audit Trail\n */\n\nimport crypto from 'crypto';\nimport { EventEmitter } from 'events';\n\nimport { AuditLogEntry, SecurityEvent, ComplianceReport } from '@/types/auth.types';\n\nexport interface AuditFilters {\n  userId?: string;\n  action?: string;\n  resource?: string;\n  startDate?: Date;\n  endDate?: Date;\n  success?: boolean;\n  ipAddress?: string;\n  limit?: number;\n  offset?: number;\n}\n\nexport interface AuditStatistics {\n  totalEvents: number;\n  successfulEvents: number;\n  failedEvents: number;\n  uniqueUsers: number;\n  eventsByType: Record<string, number>;\n  eventsByUser: Record<string, number>;\n  topResources: Array<{ resource: string; count: number }>;\n  securityIncidents: number;\n}\n\nexport class AuditService extends EventEmitter {\n  private encryptionKey: string;\n  private auditEntries: AuditLogEntry[] = [];\n\n  constructor() {\n    super();\n    this.encryptionKey = process.env.AUDIT_ENCRYPTION_KEY || 'default-audit-key-change-in-production';\n  }\n\n  /**\n   * Log a user action audit entry\n   */\n  async logUserAction(\n    userId: string,\n    action: string,\n    resource: string,\n    resourceId: string | undefined,\n    ipAddress: string,\n    userAgent: string,\n    success: boolean = true,\n    errorMessage?: string,\n    additionalData?: Record<string, any>\n  ): Promise<void> {\n    const entry: AuditLogEntry = {\n      id: this.generateAuditId(),\n      userId,\n      action,\n      resource,\n      resourceId,\n      ipAddress,\n      userAgent,\n      timestamp: new Date(),\n      success,\n      errorMessage,\n      additionalData: additionalData ? this.encryptSensitiveData(additionalData) : undefined\n    };\n\n    // Store in memory (in production, this would go to a database)\n    this.auditEntries.push(entry);\n\n    // Console log for development\n    console.log('Audit Entry:', JSON.stringify(entry, null, 2));\n\n    // Emit event for additional processing\n    this.emit('auditEntry', entry);\n\n    // Check if this action requires security monitoring\n    if (this.isSecurityRelevantAction(action)) {\n      const securityEvent: SecurityEvent = {\n        type: this.mapActionToSecurityEventType(action),\n        userId,\n        severity: this.determineSeverity(action, success),\n        description: `User action: ${action} on ${resource}`,\n        metadata: { action, resource, resourceId, success, ipAddress }\n      };\n\n      await this.logSecurityEvent(securityEvent);\n    }\n  }\n\n  /**\n   * Log a security event\n   */\n  async logSecurityEvent(event: SecurityEvent): Promise<void> {\n    const logEntry = {\n      ...event,\n      timestamp: new Date(),\n      id: this.generateAuditId()\n    };\n\n    // Console log for development\n    console.log('Security Event:', JSON.stringify(logEntry, null, 2));\n\n    // Emit event for additional processing\n    this.emit('securityEvent', event);\n\n    // Handle critical events immediately\n    if (event.severity === 'CRITICAL' || event.severity === 'HIGH') {\n      await this.handleCriticalSecurityEvent(event);\n    }\n  }\n\n  /**\n   * Generate HIPAA compliance report\n   */\n  async generateHipaaComplianceReport(\n    startDate: Date,\n    endDate: Date,\n    generatedBy: string\n  ): Promise<ComplianceReport> {\n    const reportId = this.generateAuditId();\n    \n    // Filter audit entries by date range\n    const data = this.auditEntries.filter(entry => \n      entry.timestamp >= startDate && entry.timestamp <= endDate\n    );\n\n    const summary = {\n      totalAccesses: data.length,\n      uniqueUsers: new Set(data.map(entry => entry.userId)).size,\n      failedAttempts: data.filter(entry => !entry.success).length,\n      securityIncidents: data.filter(entry => \n        this.isSecurityRelevantAction(entry.action) && !entry.success\n      ).length\n    };\n\n    const report: ComplianceReport = {\n      reportId,\n      reportType: 'HIPAA_ACCESS_LOG',\n      generatedBy,\n      dateRange: { start: startDate, end: endDate },\n      data,\n      summary,\n      createdAt: new Date()\n    };\n\n    // Log report generation\n    await this.logSecurityEvent({\n      type: 'SYSTEM_CONFIGURATION_CHANGE',\n      userId: generatedBy,\n      severity: 'MEDIUM',\n      description: `HIPAA compliance report generated for period ${startDate.toISOString()} to ${endDate.toISOString()}`,\n      metadata: { reportId, reportType: 'HIPAA_ACCESS_LOG' }\n    });\n\n    return report;\n  }\n\n  /**\n   * Search audit logs\n   */\n  async searchAuditLogs(\n    query: string,\n    filters?: AuditFilters\n  ): Promise<AuditLogEntry[]> {\n    let results = this.auditEntries;\n\n    // Apply filters\n    if (filters) {\n      if (filters.userId) {\n        results = results.filter(entry => entry.userId === filters.userId);\n      }\n      if (filters.action) {\n        results = results.filter(entry => entry.action.includes(filters.action!));\n      }\n      if (filters.resource) {\n        results = results.filter(entry => entry.resource === filters.resource);\n      }\n      if (filters.startDate) {\n        results = results.filter(entry => entry.timestamp >= filters.startDate!);\n      }\n      if (filters.endDate) {\n        results = results.filter(entry => entry.timestamp <= filters.endDate!);\n      }\n      if (filters.success !== undefined) {\n        results = results.filter(entry => entry.success === filters.success);\n      }\n      if (filters.ipAddress) {\n        results = results.filter(entry => entry.ipAddress === filters.ipAddress);\n      }\n    }\n\n    // Apply text search\n    if (query) {\n      results = results.filter(entry => \n        JSON.stringify(entry).toLowerCase().includes(query.toLowerCase())\n      );\n    }\n\n    // Apply pagination\n    if (filters?.limit) {\n      const offset = filters.offset || 0;\n      results = results.slice(offset, offset + filters.limit);\n    }\n\n    return results;\n  }\n\n  /**\n   * Get audit statistics\n   */\n  async getAuditStatistics(\n    timeframe: 'daily' | 'weekly' | 'monthly' = 'daily'\n  ): Promise<AuditStatistics> {\n    const now = new Date();\n    let startDate: Date;\n\n    switch (timeframe) {\n      case 'daily':\n        startDate = new Date(now.getTime() - 24 * 60 * 60 * 1000);\n        break;\n      case 'weekly':\n        startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n        break;\n      case 'monthly':\n        startDate = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n        break;\n    }\n\n    const relevantEntries = this.auditEntries.filter(entry => entry.timestamp >= startDate);\n\n    const eventsByType: Record<string, number> = {};\n    const eventsByUser: Record<string, number> = {};\n    const resourceCounts: Record<string, number> = {};\n\n    relevantEntries.forEach(entry => {\n      eventsByType[entry.action] = (eventsByType[entry.action] || 0) + 1;\n      eventsByUser[entry.userId] = (eventsByUser[entry.userId] || 0) + 1;\n      resourceCounts[entry.resource] = (resourceCounts[entry.resource] || 0) + 1;\n    });\n\n    const topResources = Object.entries(resourceCounts)\n      .map(([resource, count]) => ({ resource, count }))\n      .sort((a, b) => b.count - a.count)\n      .slice(0, 10);\n\n    return {\n      totalEvents: relevantEntries.length,\n      successfulEvents: relevantEntries.filter(entry => entry.success).length,\n      failedEvents: relevantEntries.filter(entry => !entry.success).length,\n      uniqueUsers: new Set(relevantEntries.map(entry => entry.userId)).size,\n      eventsByType,\n      eventsByUser,\n      topResources,\n      securityIncidents: relevantEntries.filter(entry => \n        this.isSecurityRelevantAction(entry.action) && !entry.success\n      ).length\n    };\n  }\n\n  /**\n   * Handle critical security events\n   */\n  private async handleCriticalSecurityEvent(event: SecurityEvent): Promise<void> {\n    console.error(`CRITICAL SECURITY EVENT: ${event.type} - ${event.description}`);\n    \n    // Emit critical event for external handling\n    this.emit('criticalSecurityEvent', event);\n  }\n\n  /**\n   * Generate cryptographically secure audit ID\n   */\n  private generateAuditId(): string {\n    const timestamp = Date.now().toString(36);\n    const random = crypto.randomBytes(8).toString('hex');\n    return `audit_${timestamp}_${random}`;\n  }\n\n  /**\n   * Encrypt sensitive data in audit logs\n   */\n  private encryptSensitiveData(data: Record<string, any>): Record<string, any> {\n    const encrypted: Record<string, any> = {};\n    \n    for (const [key, value] of Object.entries(data)) {\n      if (this.isSensitiveField(key)) {\n        encrypted[key] = `encrypted:${crypto.createHash('sha256').update(JSON.stringify(value) + this.encryptionKey).digest('hex')}`;\n      } else {\n        encrypted[key] = value;\n      }\n    }\n    \n    return encrypted;\n  }\n\n  /**\n   * Check if field contains sensitive data\n   */\n  private isSensitiveField(fieldName: string): boolean {\n    const sensitiveFields = [\n      'password', 'ssn', 'dob', 'phone', 'email',\n      'address', 'medicalRecord', 'diagnosis',\n      'treatment', 'medication', 'notes'\n    ];\n    \n    return sensitiveFields.some(field => \n      fieldName.toLowerCase().includes(field)\n    );\n  }\n\n  /**\n   * Check if action is security relevant\n   */\n  private isSecurityRelevantAction(action: string): boolean {\n    const securityActions = [\n      'login', 'logout', 'password_change', 'mfa_setup',\n      'user_creation', 'user_modification', 'permission_change',\n      'data_access', 'data_modification', 'data_deletion',\n      'system_configuration', 'backup', 'restore'\n    ];\n    \n    return securityActions.some(secAction => \n      action.toLowerCase().includes(secAction)\n    );\n  }\n\n  /**\n   * Map action to security event type\n   */\n  private mapActionToSecurityEventType(action: string): SecurityEvent['type'] {\n    const actionLower = action.toLowerCase();\n    \n    if (actionLower.includes('login')) return 'LOGIN_SUCCESS';\n    if (actionLower.includes('logout')) return 'LOGOUT';\n    if (actionLower.includes('password')) return 'PASSWORD_CHANGE';\n    if (actionLower.includes('data_access')) return 'DATA_ACCESS';\n    if (actionLower.includes('data_modification')) return 'DATA_MODIFICATION';\n    if (actionLower.includes('unauthorized')) return 'UNAUTHORIZED_ACCESS';\n    \n    return 'DATA_ACCESS'; // Default\n  }\n\n  /**\n   * Determine event severity\n   */\n  private determineSeverity(action: string, success: boolean): SecurityEvent['severity'] {\n    if (!success) {\n      if (action.includes('login') || action.includes('unauthorized')) {\n        return 'HIGH';\n      }\n      return 'MEDIUM';\n    }\n    \n    if (action.includes('system_configuration') || action.includes('user_creation')) {\n      return 'MEDIUM';\n    }\n    \n    return 'LOW';\n  }\n\n  /**\n   * Shutdown audit service\n   */\n  shutdown(): void {\n    this.removeAllListeners();\n  }\n}\n"],"version":3}