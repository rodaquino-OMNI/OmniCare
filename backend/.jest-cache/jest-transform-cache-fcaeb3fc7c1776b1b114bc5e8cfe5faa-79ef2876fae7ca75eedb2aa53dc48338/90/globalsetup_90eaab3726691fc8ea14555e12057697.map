{"file":"/Users/rodrigo/claude-projects/OmniCare/backend/tests/global-setup.ts","mappings":"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","names":[],"sources":["/Users/rodrigo/claude-projects/OmniCare/backend/tests/global-setup.ts"],"sourcesContent":["/**\n * Global Test Setup for Backend\n * Runs once before all tests start\n */\n\nimport { createConnection, Connection } from 'typeorm';\nimport { createClient } from 'redis';\nimport { logger } from '../src/utils/logger';\n\nexport default async function globalSetup(): Promise<void> {\n  console.log('üöÄ Starting backend test environment setup...');\n\n  try {\n    // Initialize test database\n    await setupTestDatabase();\n\n    // Initialize test cache\n    await setupTestCache();\n\n    // Setup test data\n    await setupTestData();\n\n    // Initialize external service mocks\n    await setupExternalServiceMocks();\n\n    console.log('‚úÖ Backend test environment setup completed successfully');\n  } catch (error) {\n    console.error('‚ùå Failed to setup backend test environment:', error);\n    process.exit(1);\n  }\n}\n\nasync function setupTestDatabase(): Promise<void> {\n  if (process.env.SKIP_DB_SETUP === 'true') {\n    console.log('üìä Skipping database setup (SKIP_DB_SETUP=true)');\n    return;\n  }\n\n  try {\n    console.log('üìä Setting up test database...');\n\n    // Create test database connection\n    const connection = await createConnection({\n      type: 'postgres',\n      host: process.env.DB_HOST || 'localhost',\n      port: parseInt(process.env.DB_PORT || '5432'),\n      username: process.env.DB_USER || 'test_user',\n      password: process.env.DB_PASSWORD || 'test_password',\n      database: process.env.DB_NAME || 'omnicare_test',\n      synchronize: true, // Auto-create schema for tests\n      dropSchema: true, // Clean start for each test run\n      logging: false,\n      entities: ['src/models/*.ts'],\n      migrations: ['src/migrations/*.ts'],\n    });\n\n    // Run initial migrations if needed\n    await connection.runMigrations();\n\n    console.log('‚úÖ Test database setup completed');\n\n    // Store connection for cleanup\n    (global as any).testDbConnection = connection;\n  } catch (error) {\n    console.error('‚ùå Failed to setup test database:', error);\n    throw error;\n  }\n}\n\nasync function setupTestCache(): Promise<void> {\n  if (process.env.SKIP_CACHE_SETUP === 'true') {\n    console.log('üíæ Skipping cache setup (SKIP_CACHE_SETUP=true)');\n    return;\n  }\n\n  try {\n    console.log('üíæ Setting up test cache...');\n\n    const redisClient = createClient({\n      url: process.env.REDIS_URL || 'redis://localhost:6379/1',\n    });\n\n    await redisClient.connect();\n\n    // Clear any existing test data\n    await redisClient.flushDb();\n\n    console.log('‚úÖ Test cache setup completed');\n\n    // Store client for cleanup\n    (global as any).testCacheClient = redisClient;\n  } catch (error) {\n    console.warn('‚ö†Ô∏è Failed to setup test cache (continuing without cache):', error);\n    // Don't fail the entire setup if cache is unavailable\n  }\n}\n\nasync function setupTestData(): Promise<void> {\n  try {\n    console.log('üìù Setting up test data...');\n\n    // Create test users, roles, and permissions\n    const testData = {\n      users: [\n        {\n          id: 'test-user-doctor',\n          email: 'doctor@test.com',\n          role: 'physician',\n          active: true,\n        },\n        {\n          id: 'test-user-nurse',\n          email: 'nurse@test.com',\n          role: 'nurse',\n          active: true,\n        },\n        {\n          id: 'test-user-admin',\n          email: 'admin@test.com',\n          role: 'admin',\n          active: true,\n        },\n      ],\n      patients: [\n        {\n          id: 'test-patient-1',\n          name: 'John Doe',\n          mrn: 'MRN001',\n          active: true,\n        },\n        {\n          id: 'test-patient-2',\n          name: 'Jane Smith',\n          mrn: 'MRN002',\n          active: true,\n        },\n      ],\n    };\n\n    // Store test data globally for tests to use\n    (global as any).testData = testData;\n\n    console.log('‚úÖ Test data setup completed');\n  } catch (error) {\n    console.error('‚ùå Failed to setup test data:', error);\n    throw error;\n  }\n}\n\nasync function setupExternalServiceMocks(): Promise<void> {\n  try {\n    console.log('üé≠ Setting up external service mocks...');\n\n    // Setup Medplum mock server\n    if (process.env.MOCK_EXTERNAL_SERVICES === 'true') {\n      const mockServer = {\n        baseUrl: 'http://localhost:8080',\n        endpoints: [\n          '/auth/login',\n          '/fhir/R4/Patient',\n          '/fhir/R4/Encounter',\n          '/fhir/R4/Observation',\n        ],\n      };\n\n      (global as any).mockMedplumServer = mockServer;\n    }\n\n    // Setup other external service mocks (SMART on FHIR, etc.)\n    const externalMocks = {\n      smartFhir: {\n        authorizationServer: 'http://localhost:8081',\n        tokenEndpoint: '/oauth2/token',\n        userInfoEndpoint: '/oauth2/userinfo',\n      },\n      directTrust: {\n        endpoint: 'http://localhost:8082/direct',\n        certificate: 'test-certificate',\n      },\n    };\n\n    (global as any).externalMocks = externalMocks;\n\n    console.log('‚úÖ External service mocks setup completed');\n  } catch (error) {\n    console.error('‚ùå Failed to setup external service mocks:', error);\n    throw error;\n  }\n}\n\n// Graceful shutdown handler\nprocess.on('SIGTERM', async () => {\n  console.log('üõë Received SIGTERM, cleaning up test environment...');\n  \n  if ((global as any).testDbConnection) {\n    await (global as any).testDbConnection.close();\n  }\n  \n  if ((global as any).testCacheClient) {\n    await (global as any).testCacheClient.quit();\n  }\n  \n  process.exit(0);\n});"],"version":3}