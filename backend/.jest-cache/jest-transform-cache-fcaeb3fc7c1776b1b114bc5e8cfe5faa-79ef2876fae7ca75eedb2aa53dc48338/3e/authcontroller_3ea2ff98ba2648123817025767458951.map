{"file":"/Users/rodrigo/claude-projects/OmniCare/backend/src/controllers/auth.controller.ts","mappings":";;;;;;AACA,gEAA+B;AAE/B,oDAAoD;AACpD,sDAA8B;AAC9B,4DAAwD;AACxD,gEAA4D;AAC5D,sEAAiE;AACjE,mDAAiF;AACjF,4DAAoC;AACpC,qDAAsD;AAEtD;;;GAGG;AACH,MAAa,cAAc;IACjB,UAAU,CAAiB;IAC3B,cAAc,CAAiB;IAC/B,YAAY,CAAe;IAEnC;QACE,IAAI,CAAC,UAAU,GAAG,IAAI,4BAAc,EAAE,CAAC;QACvC,IAAI,CAAC,cAAc,GAAG,IAAI,gCAAc,EAAE,CAAC;QAC3C,IAAI,CAAC,YAAY,GAAG,IAAI,4BAAY,EAAE,CAAC;IACzC,CAAC;IAED,kCAAkC;IAClC,8BAA8B;IAC9B,kCAAkC;IAElC;;OAEG;IACH,KAAK,CAAC,SAAS,CAAC,GAAY,EAAE,GAAa;QACzC,IAAI,CAAC;YACH,MAAM,EACJ,aAAa,EACb,SAAS,EACT,YAAY,EACZ,KAAK,EACL,KAAK,EACL,GAAG,EACH,MAAM,GACP,GAAG,GAAG,CAAC,KAA+B,CAAC;YAExC,gBAAM,CAAC,QAAQ,CAAC,6BAA6B,EAAE;gBAC7C,SAAS;gBACT,aAAa;gBACb,KAAK;gBACL,GAAG;gBACH,MAAM,EAAE,CAAC,CAAC,MAAM;gBAChB,EAAE,EAAE,GAAG,CAAC,EAAE;gBACV,SAAS,EAAE,GAAG,CAAC,GAAG,CAAC,YAAY,CAAC;aACjC,CAAC,CAAC;YAEH,+BAA+B;YAC/B,IAAI,CAAC,aAAa,IAAI,aAAa,KAAK,MAAM,EAAE,CAAC;gBAC/C,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,KAAK,EAAE,iBAAiB;oBACxB,iBAAiB,EAAE,8BAA8B;iBAClD,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,IAAI,CAAC,SAAS,EAAE,CAAC;gBACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,KAAK,EAAE,iBAAiB;oBACxB,iBAAiB,EAAE,uBAAuB;iBAC3C,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,IAAI,CAAC,YAAY,EAAE,CAAC;gBAClB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,KAAK,EAAE,iBAAiB;oBACxB,iBAAiB,EAAE,0BAA0B;iBAC9C,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,MAAM,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,gBAAM,CAAC,KAAK,CAAC,MAAM,CAAC;YAE9D,IAAI,UAAU,CAAC;YAEf,IAAI,MAAM,EAAE,CAAC;gBACX,sBAAsB;gBACtB,IAAI,CAAC,GAAG,EAAE,CAAC;oBACT,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;wBACnB,KAAK,EAAE,iBAAiB;wBACxB,iBAAiB,EAAE,uCAAuC;qBAC3D,CAAC,CAAC;oBACH,OAAO;gBACT,CAAC;gBAED,UAAU,GAAG,MAAM,qCAAgB,CAAC,eAAe,CACjD,GAAG,EACH,MAAM,EACN,SAAS,EACT,YAAY,EACZ,MAAM,CACP,CAAC;YACJ,CAAC;iBAAM,CAAC;gBACN,6BAA6B;gBAC7B,UAAU,GAAG,MAAM,qCAAgB,CAAC,qBAAqB,CACvD,SAAS,EACT,YAAY,EACZ,MAAM,EACN,KAAK,EACL,GAAG,CACJ,CAAC;YACJ,CAAC;YAED,qEAAqE;YACrE,kDAAkD;YAClD,MAAM,QAAQ,GAAG,IAAI,CAAC,yBAAyB,EAAE,CAAC;YAClD,MAAM,UAAU,GAAG,KAAK,IAAI,UAAU,CAAC,KAAK,CAAC;YAE7C,2EAA2E;YAC3E,IAAI,CAAC,sBAAsB,CAAC,QAAQ,EAAE;gBACpC,SAAS;gBACT,YAAY;gBACZ,KAAK,EAAE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;gBACvB,KAAK,EAAE,UAAU;gBACjB,GAAG;gBACH,MAAM;gBACN,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,EAAE,aAAa;aACxD,CAAC,CAAC;YAEH,MAAM,WAAW,GAAG,IAAI,GAAG,CAAC,YAAY,CAAC,CAAC;YAC1C,WAAW,CAAC,YAAY,CAAC,MAAM,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;YAClD,WAAW,CAAC,YAAY,CAAC,MAAM,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;YAErD,gBAAM,CAAC,QAAQ,CAAC,oCAAoC,EAAE;gBACpD,SAAS;gBACT,KAAK,EAAE,UAAU;gBACjB,SAAS,EAAE,CAAC,CAAC,MAAM;aACpB,CAAC,CAAC;YAEH,GAAG,CAAC,QAAQ,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,CAAC;QACvC,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,6BAA6B,EAAE,KAAK,CAAC,CAAC;YACnD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,KAAK,EAAE,cAAc;gBACrB,iBAAiB,EAAE,4BAA4B;aAChD,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,KAAK,CAAC,GAAY,EAAE,GAAa;QACrC,IAAI,CAAC;YACH,MAAM,EACJ,UAAU,EACV,IAAI,EACJ,YAAY,EACZ,SAAS,EACT,aAAa,EACb,aAAa,EACb,aAAa,GACd,GAAG,GAAG,CAAC,IAAI,CAAC;YAEb,gBAAM,CAAC,QAAQ,CAAC,qBAAqB,EAAE;gBACrC,UAAU;gBACV,SAAS;gBACT,OAAO,EAAE,CAAC,CAAC,IAAI;gBACf,eAAe,EAAE,CAAC,CAAC,aAAa;gBAChC,EAAE,EAAE,GAAG,CAAC,EAAE;aACX,CAAC,CAAC;YAEH,IAAI,UAAU,KAAK,oBAAoB,EAAE,CAAC;gBACxC,MAAM,IAAI,CAAC,4BAA4B,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;YACpD,CAAC;iBAAM,IAAI,UAAU,KAAK,eAAe,EAAE,CAAC;gBAC1C,MAAM,IAAI,CAAC,uBAAuB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;YAC/C,CAAC;iBAAM,IAAI,UAAU,KAAK,oBAAoB,EAAE,CAAC;gBAC/C,MAAM,IAAI,CAAC,4BAA4B,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;YACpD,CAAC;iBAAM,CAAC;gBACN,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,KAAK,EAAE,wBAAwB;oBAC/B,iBAAiB,EAAE,8EAA8E;iBAClG,CAAC,CAAC;YACL,CAAC;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,6BAA6B,EAAE,KAAK,CAAC,CAAC;YACnD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,KAAK,EAAE,cAAc;gBACrB,iBAAiB,EAAE,oBAAoB;aACxC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,4BAA4B,CAAC,GAAY,EAAE,GAAa;QACpE,MAAM,EAAE,IAAI,EAAE,YAAY,EAAE,SAAS,EAAE,aAAa,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;QAElE,+BAA+B;QAC/B,IAAI,CAAC,IAAI,IAAI,CAAC,YAAY,IAAI,CAAC,SAAS,EAAE,CAAC;YACzC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,KAAK,EAAE,iBAAiB;gBACxB,iBAAiB,EAAE,gDAAgD;aACpE,CAAC,CAAC;YACH,OAAO;QACT,CAAC;QAED,2CAA2C;QAC3C,MAAM,QAAQ,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;QACjD,IAAI,CAAC,QAAQ,EAAE,CAAC;YACd,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,KAAK,EAAE,eAAe;gBACtB,iBAAiB,EAAE,uCAAuC;aAC3D,CAAC,CAAC;YACH,OAAO;QACT,CAAC;QAED,IAAI,QAAQ,CAAC,SAAS,KAAK,SAAS,IAAI,QAAQ,CAAC,YAAY,KAAK,YAAY,EAAE,CAAC;YAC/E,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,KAAK,EAAE,eAAe;gBACtB,iBAAiB,EAAE,mCAAmC;aACvD,CAAC,CAAC;YACH,OAAO;QACT,CAAC;QAED,IAAI,IAAI,CAAC,GAAG,EAAE,GAAG,QAAQ,CAAC,SAAS,EAAE,CAAC;YACpC,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC;YACnC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,KAAK,EAAE,eAAe;gBACtB,iBAAiB,EAAE,4BAA4B;aAChD,CAAC,CAAC;YACH,OAAO;QACT,CAAC;QAED,kBAAkB;QAClB,MAAM,WAAW,GAAG,IAAI,CAAC,mBAAmB,CAAC;YAC3C,SAAS;YACT,KAAK,EAAE,QAAQ,CAAC,KAAK;YACrB,GAAG,EAAE,QAAQ,CAAC,GAAG;YACjB,MAAM,EAAE,QAAQ,CAAC,MAAM;SACxB,CAAC,CAAC;QAEH,MAAM,YAAY,GAAG,IAAI,CAAC,oBAAoB,CAAC;YAC7C,SAAS;YACT,KAAK,EAAE,QAAQ,CAAC,KAAK;SACtB,CAAC,CAAC;QAEH,iCAAiC;QACjC,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC;QAEnC,MAAM,aAAa,GAAG;YACpB,YAAY,EAAE,WAAW;YACzB,UAAU,EAAE,QAAQ;YACpB,UAAU,EAAE,IAAI;YAChB,KAAK,EAAE,QAAQ,CAAC,KAAK;YACrB,aAAa,EAAE,YAAY;SAC5B,CAAC;QAEF,6CAA6C;QAC7C,IAAI,QAAQ,CAAC,MAAM,EAAE,CAAC;YACpB,oFAAoF;YACnF,aAAqB,CAAC,OAAO,GAAG,oBAAoB,CAAC;YACrD,aAAqB,CAAC,SAAS,GAAG,sBAAsB,CAAC;YACzD,aAAqB,CAAC,mBAAmB,GAAG,IAAI,CAAC;YACjD,aAAqB,CAAC,eAAe,GAAG,GAAG,gBAAM,CAAC,IAAI,CAAC,OAAO,mBAAmB,CAAC;QACrF,CAAC;QAED,gBAAM,CAAC,QAAQ,CAAC,2BAA2B,EAAE;YAC3C,SAAS;YACT,KAAK,EAAE,QAAQ,CAAC,KAAK;YACrB,SAAS,EAAE,CAAC,CAAC,QAAQ,CAAC,MAAM;SAC7B,CAAC,CAAC;QAEH,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC1B,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,uBAAuB,CAAC,GAAY,EAAE,GAAa;QAC/D,MAAM,EAAE,aAAa,EAAE,SAAS,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;QAE9C,IAAI,CAAC,aAAa,IAAI,CAAC,SAAS,EAAE,CAAC;YACjC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,KAAK,EAAE,iBAAiB;gBACxB,iBAAiB,EAAE,0CAA0C;aAC9D,CAAC,CAAC;YACH,OAAO;QACT,CAAC;QAED,IAAI,CAAC;YACH,uBAAuB;YACvB,MAAM,OAAO,GAAG,sBAAG,CAAC,MAAM,CAAC,aAAa,EAAE,gBAAM,CAAC,GAAG,CAAC,MAAM,CAAQ,CAAC;YAEpE,IAAI,OAAO,CAAC,SAAS,KAAK,SAAS,IAAI,OAAO,CAAC,IAAI,KAAK,SAAS,EAAE,CAAC;gBAClE,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,KAAK,EAAE,eAAe;oBACtB,iBAAiB,EAAE,uBAAuB;iBAC3C,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,4BAA4B;YAC5B,MAAM,WAAW,GAAG,IAAI,CAAC,mBAAmB,CAAC;gBAC3C,SAAS;gBACT,KAAK,EAAE,OAAO,CAAC,KAAK;gBACpB,GAAG,EAAE,OAAO,CAAC,GAAG;aACjB,CAAC,CAAC;YAEH,MAAM,aAAa,GAAG;gBACpB,YAAY,EAAE,WAAW;gBACzB,UAAU,EAAE,QAAQ;gBACpB,UAAU,EAAE,IAAI;gBAChB,KAAK,EAAE,OAAO,CAAC,KAAK;aACrB,CAAC;YAEF,gBAAM,CAAC,QAAQ,CAAC,uBAAuB,EAAE;gBACvC,SAAS;gBACT,KAAK,EAAE,OAAO,CAAC,KAAK;aACrB,CAAC,CAAC;YAEH,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAC1B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,KAAK,EAAE,eAAe;gBACtB,iBAAiB,EAAE,uBAAuB;aAC3C,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,4BAA4B,CAAC,GAAY,EAAE,GAAa;QACpE,MAAM,EAAE,SAAS,EAAE,aAAa,EAAE,KAAK,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;QAErD,IAAI,CAAC,SAAS,IAAI,CAAC,aAAa,EAAE,CAAC;YACjC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,KAAK,EAAE,iBAAiB;gBACxB,iBAAiB,EAAE,0CAA0C;aAC9D,CAAC,CAAC;YACH,OAAO;QACT,CAAC;QAED,oEAAoE;QACpE,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,yBAAyB,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;QAErF,IAAI,CAAC,aAAa,EAAE,CAAC;YACnB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,KAAK,EAAE,gBAAgB;gBACvB,iBAAiB,EAAE,4BAA4B;aAChD,CAAC,CAAC;YACH,OAAO;QACT,CAAC;QAED,MAAM,cAAc,GAAG,KAAK,IAAI,eAAe,CAAC;QAEhD,0CAA0C;QAC1C,MAAM,WAAW,GAAG,IAAI,CAAC,mBAAmB,CAAC;YAC3C,SAAS;YACT,KAAK,EAAE,cAAc;YACrB,IAAI,EAAE,QAAQ;SACf,CAAC,CAAC;QAEH,MAAM,aAAa,GAAG;YACpB,YAAY,EAAE,WAAW;YACzB,UAAU,EAAE,QAAQ;YACpB,UAAU,EAAE,IAAI;YAChB,KAAK,EAAE,cAAc;SACtB,CAAC;QAEF,gBAAM,CAAC,QAAQ,CAAC,4BAA4B,EAAE;YAC5C,SAAS;YACT,KAAK,EAAE,cAAc;SACtB,CAAC,CAAC;QAEH,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC1B,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,UAAU,CAAC,GAAY,EAAE,GAAa;QAC1C,IAAI,CAAC;YACH,MAAM,EAAE,KAAK,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;YAE3B,IAAI,CAAC,KAAK,EAAE,CAAC;gBACX,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,KAAK,EAAE,iBAAiB;oBACxB,iBAAiB,EAAE,6BAA6B;iBACjD,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,gBAAM,CAAC,QAAQ,CAAC,6BAA6B,EAAE;gBAC7C,EAAE,EAAE,GAAG,CAAC,EAAE;aACX,CAAC,CAAC;YAEH,IAAI,CAAC;gBACH,MAAM,OAAO,GAAG,sBAAG,CAAC,MAAM,CAAC,KAAK,EAAE,gBAAM,CAAC,GAAG,CAAC,MAAM,CAAQ,CAAC;gBAE5D,MAAM,qBAAqB,GAAG;oBAC5B,MAAM,EAAE,IAAI;oBACZ,KAAK,EAAE,OAAO,CAAC,KAAK;oBACpB,SAAS,EAAE,OAAO,CAAC,SAAS;oBAC5B,GAAG,EAAE,OAAO,CAAC,GAAG;oBAChB,GAAG,EAAE,OAAO,CAAC,GAAG;oBAChB,GAAG,EAAE,OAAO,CAAC,GAAG;oBAChB,GAAG,EAAE,OAAO,CAAC,GAAG;oBAChB,GAAG,EAAE,OAAO,CAAC,GAAG;oBAChB,OAAO,EAAE,OAAO,CAAC,OAAO;oBACxB,SAAS,EAAE,OAAO,CAAC,SAAS;oBAC5B,QAAQ,EAAE,OAAO,CAAC,QAAQ;iBAC3B,CAAC;gBAEF,GAAG,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;YAClC,CAAC;YAAC,OAAO,QAAQ,EAAE,CAAC;gBAClB,8BAA8B;gBAC9B,GAAG,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;YAC9B,CAAC;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,6BAA6B,EAAE,KAAK,CAAC,CAAC;YACnD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,KAAK,EAAE,cAAc;gBACrB,iBAAiB,EAAE,4BAA4B;aAChD,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,kCAAkC;IAClC,8BAA8B;IAC9B,kCAAkC;IAElC;;OAEG;IACH,KAAK,CAAC,KAAK,CAAC,GAAY,EAAE,GAAa;QACrC,IAAI,CAAC;YACH,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAqB,GAAG,CAAC,IAAI,CAAC;YACpE,MAAM,SAAS,GAAG,GAAG,CAAC,EAAE,IAAI,SAAS,CAAC;YACtC,MAAM,SAAS,GAAG,GAAG,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,SAAS,CAAC;YAErD,MAAM,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC;gBACvC,IAAI,EAAE,eAAe;gBACrB,QAAQ,EAAE,KAAK;gBACf,WAAW,EAAE,+BAA+B,QAAQ,EAAE;gBACtD,QAAQ,EAAE,EAAE,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAE;aAC7C,CAAC,CAAC;YAEH,uBAAuB;YACvB,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,uBAAuB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;YAEpE,IAAI,CAAC,IAAI,EAAE,CAAC;gBACV,MAAM,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC;oBACvC,IAAI,EAAE,eAAe;oBACrB,QAAQ,EAAE,QAAQ;oBAClB,WAAW,EAAE,4CAA4C;oBACzD,QAAQ,EAAE,EAAE,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAE;iBAC7C,CAAC,CAAC;gBAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,KAAK;oBACd,KAAK,EAAE,qBAAqB;oBAC5B,OAAO,EAAE,8BAA8B;iBACxC,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,6BAA6B;YAC7B,IAAI,IAAI,CAAC,kBAAkB,IAAI,IAAI,CAAC,kBAAkB,GAAG,IAAI,IAAI,EAAE,EAAE,CAAC;gBACpE,MAAM,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC;oBACvC,IAAI,EAAE,eAAe;oBACrB,MAAM,EAAE,IAAI,CAAC,EAAE;oBACf,QAAQ,EAAE,QAAQ;oBAClB,WAAW,EAAE,iCAAiC;oBAC9C,QAAQ,EAAE,EAAE,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAE,WAAW,EAAE,IAAI,CAAC,kBAAkB,EAAE;iBACnF,CAAC,CAAC;gBAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,KAAK;oBACd,KAAK,EAAE,gBAAgB;oBACvB,OAAO,EAAE,qEAAqE;iBAC/E,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,0BAA0B;YAC1B,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;gBACnB,MAAM,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC;oBACvC,IAAI,EAAE,eAAe;oBACrB,MAAM,EAAE,IAAI,CAAC,EAAE;oBACf,QAAQ,EAAE,QAAQ;oBAClB,WAAW,EAAE,mCAAmC;oBAChD,QAAQ,EAAE,EAAE,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAE;iBAC7C,CAAC,CAAC;gBAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,KAAK;oBACd,KAAK,EAAE,kBAAkB;oBACzB,OAAO,EAAE,uBAAuB;iBACjC,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,wBAAwB;YACxB,IAAI,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;gBAClE,IAAI,CAAC,QAAQ,EAAE,CAAC;oBACd,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;wBACnB,OAAO,EAAE,KAAK;wBACd,WAAW,EAAE,IAAI;wBACjB,OAAO,EAAE,sCAAsC;qBAChD,CAAC,CAAC;oBACH,OAAO;gBACT,CAAC;gBAED,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC;oBACjF,MAAM,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC;wBACvC,IAAI,EAAE,eAAe;wBACrB,MAAM,EAAE,IAAI,CAAC,EAAE;wBACf,QAAQ,EAAE,MAAM;wBAChB,WAAW,EAAE,4BAA4B;wBACzC,QAAQ,EAAE,EAAE,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAE;qBAC7C,CAAC,CAAC;oBAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;wBACnB,OAAO,EAAE,KAAK;wBACd,KAAK,EAAE,mBAAmB;wBAC1B,OAAO,EAAE,2CAA2C;qBACrD,CAAC,CAAC;oBACH,OAAO;gBACT,CAAC;YACH,CAAC;YAED,sBAAsB;YACtB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;YAE1D,iBAAiB;YACjB,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,IAAI,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;YAEpF,yBAAyB;YACzB,MAAM,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC;YAEnD,uBAAuB;YACvB,MAAM,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC;gBACvC,IAAI,EAAE,eAAe;gBACrB,MAAM,EAAE,IAAI,CAAC,EAAE;gBACf,QAAQ,EAAE,KAAK;gBACf,WAAW,EAAE,wBAAwB,IAAI,CAAC,QAAQ,EAAE;gBACpD,QAAQ,EAAE;oBACR,QAAQ,EAAE,IAAI,CAAC,QAAQ;oBACvB,IAAI,EAAE,IAAI,CAAC,IAAI;oBACf,SAAS,EAAE,OAAO,CAAC,SAAS;oBAC5B,SAAS;oBACT,SAAS;iBACV;aACF,CAAC,CAAC;YAEH,GAAG,CAAC,IAAI,CAAC;gBACP,OAAO,EAAE,IAAI;gBACb,MAAM;gBACN,IAAI,EAAE;oBACJ,EAAE,EAAE,IAAI,CAAC,EAAE;oBACX,QAAQ,EAAE,IAAI,CAAC,QAAQ;oBACvB,KAAK,EAAE,IAAI,CAAC,KAAK;oBACjB,SAAS,EAAE,IAAI,CAAC,SAAS;oBACzB,QAAQ,EAAE,IAAI,CAAC,QAAQ;oBACvB,IAAI,EAAE,IAAI,CAAC,IAAI;oBACf,UAAU,EAAE,IAAI,CAAC,UAAU;oBAC3B,QAAQ,EAAE,IAAI,CAAC,QAAQ;oBACvB,YAAY,EAAE,IAAI,CAAC,YAAY;oBAC/B,SAAS,EAAE,IAAI,CAAC,SAAS;iBAC1B;gBACD,OAAO,EAAE;oBACP,SAAS,EAAE,OAAO,CAAC,SAAS;oBAC5B,SAAS,EAAE,OAAO,CAAC,SAAS;iBAC7B;aACF,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;YACrC,MAAM,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC;gBACvC,IAAI,EAAE,eAAe;gBACrB,QAAQ,EAAE,MAAM;gBAChB,WAAW,EAAE,oBAAoB;gBACjC,QAAQ,EAAE,EAAE,KAAK,EAAE,IAAA,6BAAe,EAAC,KAAK,CAAC,EAAE,SAAS,EAAE,GAAG,CAAC,EAAE,EAAE;aAC/D,CAAC,CAAC;YAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,gBAAgB;gBACvB,OAAO,EAAE,yCAAyC;aACnD,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,YAAY,CAAC,GAAY,EAAE,GAAa;QAC5C,IAAI,CAAC;YACH,MAAM,EAAE,YAAY,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;YAClC,MAAM,SAAS,GAAG,GAAG,CAAC,EAAE,IAAI,SAAS,CAAC;YACtC,MAAM,SAAS,GAAG,GAAG,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,SAAS,CAAC;YAErD,IAAI,CAAC,YAAY,EAAE,CAAC;gBAClB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,KAAK;oBACd,KAAK,EAAE,uBAAuB;oBAC9B,OAAO,EAAE,2BAA2B;iBACrC,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,uBAAuB;YACvB,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;YAEvE,WAAW;YACX,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YACpD,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;gBAC5B,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,KAAK;oBACd,KAAK,EAAE,gBAAgB;oBACvB,OAAO,EAAE,4BAA4B;iBACtC,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,sBAAsB;YACtB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;YAE5E,oBAAoB;YACpB,MAAM,IAAI,CAAC,YAAY,CAAC,aAAa,CACnC,IAAI,CAAC,EAAE,EACP,eAAe,EACf,eAAe,EACf,SAAS,EACT,SAAS,EACT,SAAS,EACT,IAAI,CACL,CAAC;YAEF,GAAG,CAAC,IAAI,CAAC;gBACP,OAAO,EAAE,IAAI;gBACb,MAAM;aACP,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,uBAAuB,EAAE,KAAK,CAAC,CAAC;YAC7C,MAAM,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC;gBACvC,IAAI,EAAE,eAAe;gBACrB,QAAQ,EAAE,QAAQ;gBAClB,WAAW,EAAE,sBAAsB;gBACnC,QAAQ,EAAE,EAAE,KAAK,EAAE,IAAA,6BAAe,EAAC,KAAK,CAAC,EAAE,SAAS,EAAE,GAAG,CAAC,EAAE,EAAE;aAC/D,CAAC,CAAC;YAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,uBAAuB;gBAC9B,OAAO,EAAE,kCAAkC;aAC5C,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,MAAM,CAAC,GAAY,EAAE,GAAa;QACtC,IAAI,CAAC;YACH,MAAM,UAAU,GAAG,GAAG,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;YAC5C,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,sBAAsB,CAAC,UAAU,CAAC,CAAC;YACjE,MAAM,SAAS,GAAG,GAAG,CAAC,EAAE,IAAI,SAAS,CAAC;YACtC,MAAM,SAAS,GAAG,GAAG,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,SAAS,CAAC;YAErD,IAAI,KAAK,EAAE,CAAC;gBACV,IAAI,CAAC;oBACH,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;oBAEpE,kBAAkB;oBAClB,MAAM,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;oBAEjE,aAAa;oBACb,MAAM,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC;wBACvC,IAAI,EAAE,QAAQ;wBACd,MAAM,EAAE,YAAY,CAAC,MAAM;wBAC3B,QAAQ,EAAE,KAAK;wBACf,WAAW,EAAE,QAAQ,YAAY,CAAC,QAAQ,aAAa;wBACvD,QAAQ,EAAE;4BACR,SAAS,EAAE,YAAY,CAAC,SAAS;4BACjC,SAAS;4BACT,SAAS;yBACV;qBACF,CAAC,CAAC;gBACL,CAAC;gBAAC,OAAO,KAAK,EAAE,CAAC;oBACf,qDAAqD;oBACrD,gBAAM,CAAC,IAAI,CAAC,0CAA0C,EAAE,IAAA,6BAAe,EAAC,KAAK,CAAC,CAAC,CAAC;gBAClF,CAAC;YACH,CAAC;YAED,GAAG,CAAC,IAAI,CAAC;gBACP,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,yBAAyB;aACnC,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,gBAAgB,EAAE,KAAK,CAAC,CAAC;YACtC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,cAAc;gBACrB,OAAO,EAAE,iCAAiC;aAC3C,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,QAAQ,CAAC,GAAY,EAAE,GAAa;QACxC,IAAI,CAAC;YACH,MAAM,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;YAC5B,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;YAE5C,IAAI,CAAC,IAAI,EAAE,CAAC;gBACV,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,KAAK;oBACd,KAAK,EAAE,gBAAgB;oBACvB,OAAO,EAAE,gBAAgB;iBAC1B,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;YAE/D,8DAA8D;YAC9D,MAAM,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;YAEvD,MAAM,IAAI,CAAC,YAAY,CAAC,aAAa,CACnC,MAAM,EACN,qBAAqB,EACrB,iBAAiB,EACjB,SAAS,EACT,GAAG,CAAC,EAAE,IAAI,SAAS,EACnB,GAAG,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,SAAS,EAClC,IAAI,CACL,CAAC;YAEF,GAAG,CAAC,IAAI,CAAC;gBACP,OAAO,EAAE,IAAI;gBACb,QAAQ,EAAE;oBACR,MAAM,EAAE,QAAQ,CAAC,MAAM;oBACvB,WAAW,EAAE,QAAQ,CAAC,WAAW;iBAClC;aACF,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,mBAAmB,EAAE,KAAK,CAAC,CAAC;YACzC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,iBAAiB;gBACxB,OAAO,EAAE,6CAA6C;aACvD,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,SAAS,CAAC,GAAY,EAAE,GAAa;QACzC,IAAI,CAAC;YACH,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;YAEnC,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;YACvD,IAAI,CAAC,UAAU,EAAE,CAAC;gBAChB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,KAAK;oBACd,KAAK,EAAE,sBAAsB;oBAC7B,OAAO,EAAE,4BAA4B;iBACtC,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,KAAK,EAAE,UAAU,CAAC,EAAE,CAAC;gBACvD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,KAAK;oBACd,KAAK,EAAE,mBAAmB;oBAC1B,OAAO,EAAE,mBAAmB;iBAC7B,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,sBAAsB;YACtB,MAAM,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;YAC7C,MAAM,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;YAEtC,MAAM,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC;gBACvC,IAAI,EAAE,aAAa;gBACnB,MAAM;gBACN,QAAQ,EAAE,QAAQ;gBAClB,WAAW,EAAE,qCAAqC;gBAClD,QAAQ,EAAE,EAAE,SAAS,EAAE,GAAG,CAAC,EAAE,EAAE;aAChC,CAAC,CAAC;YAEH,GAAG,CAAC,IAAI,CAAC;gBACP,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,kDAAkD;aAC5D,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,0BAA0B,EAAE,KAAK,CAAC,CAAC;YAChD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,wBAAwB;gBAC/B,OAAO,EAAE,8CAA8C;aACxD,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,cAAc,CAAC,GAAY,EAAE,GAAa;QAC9C,IAAI,CAAC;YACH,MAAM,UAAU,GAAG,GAAG,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;YAC5C,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,sBAAsB,CAAC,UAAU,CAAC,CAAC;YAEjE,IAAI,CAAC,KAAK,EAAE,CAAC;gBACX,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,KAAK;oBACd,KAAK,EAAE,UAAU;oBACjB,OAAO,EAAE,kCAAkC;iBAC5C,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;YACpE,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;YAEzD,IAAI,CAAC,IAAI,EAAE,CAAC;gBACV,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,KAAK;oBACd,KAAK,EAAE,gBAAgB;oBACvB,OAAO,EAAE,gBAAgB;iBAC1B,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,GAAG,CAAC,IAAI,CAAC;gBACP,OAAO,EAAE,IAAI;gBACb,IAAI,EAAE;oBACJ,EAAE,EAAE,IAAI,CAAC,EAAE;oBACX,QAAQ,EAAE,IAAI,CAAC,QAAQ;oBACvB,KAAK,EAAE,IAAI,CAAC,KAAK;oBACjB,SAAS,EAAE,IAAI,CAAC,SAAS;oBACzB,QAAQ,EAAE,IAAI,CAAC,QAAQ;oBACvB,IAAI,EAAE,IAAI,CAAC,IAAI;oBACf,UAAU,EAAE,IAAI,CAAC,UAAU;oBAC3B,QAAQ,EAAE,IAAI,CAAC,QAAQ;oBACvB,YAAY,EAAE,IAAI,CAAC,YAAY;oBAC/B,SAAS,EAAE,IAAI,CAAC,SAAS;iBAC1B;aACF,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,eAAe;gBACtB,OAAO,EAAE,0BAA0B;aACpC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,kCAAkC;IAClC,kBAAkB;IAClB,kCAAkC;IAE1B,yBAAyB;QAC/B,OAAO,QAAQ,IAAI,CAAC,GAAG,EAAE,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC;IACzE,CAAC;IAEO,mBAAmB,CAAC,OAAY;QACtC,OAAO,sBAAG,CAAC,IAAI,CACb;YACE,GAAG,OAAO;YACV,IAAI,EAAE,QAAQ;YACd,GAAG,EAAE,gBAAM,CAAC,IAAI,CAAC,OAAO;YACxB,GAAG,EAAE,OAAO,CAAC,GAAG,IAAI,gBAAM,CAAC,IAAI,CAAC,OAAO;YACvC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;SACnC,EACD,gBAAM,CAAC,GAAG,CAAC,MAAM,EACjB,EAAE,SAAS,EAAE,IAAI,EAAE,CACpB,CAAC;IACJ,CAAC;IAEO,oBAAoB,CAAC,OAAY;QACvC,OAAO,sBAAG,CAAC,IAAI,CACb;YACE,GAAG,OAAO;YACV,IAAI,EAAE,SAAS;YACf,GAAG,EAAE,gBAAM,CAAC,IAAI,CAAC,OAAO;YACxB,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;SACnC,EACD,gBAAM,CAAC,GAAG,CAAC,MAAM,EACjB,EAAE,SAAS,EAAE,KAAK,EAAE,CACrB,CAAC;IACJ,CAAC;IAED,gDAAgD;IAChD,8CAA8C;IACtC,SAAS,GAAG,IAAI,GAAG,EAAe,CAAC;IAEnC,sBAAsB,CAAC,IAAY,EAAE,IAAS;QACpD,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAE/B,uCAAuC;QACvC,UAAU,CAAC,GAAG,EAAE;YACd,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC9B,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,aAAa;IACnC,CAAC;IAEO,oBAAoB,CAAC,IAAY;QACvC,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAClC,CAAC;IAEO,uBAAuB,CAAC,IAAY;QAC1C,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAC9B,CAAC;IAEO,KAAK,CAAC,yBAAyB,CAAC,QAAgB,EAAE,YAAoB;QAC5E,yDAAyD;QACzD,uCAAuC;QACvC,OAAO,QAAQ,KAAK,iBAAiB,IAAI,YAAY,KAAK,iBAAiB,CAAC;IAC9E,CAAC;IAEO,KAAK,CAAC,uBAAuB,CAAC,QAAgB,EAAE,QAAgB;QACtE,IAAI,CAAC;YACH,gCAAgC;YAChC,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,wBAAwB,CAAC,QAAQ,CAAC,CAAC;YAE3D,IAAI,CAAC,IAAI,EAAE,CAAC;gBACV,OAAO,IAAI,CAAC;YACd,CAAC;YAED,kBAAkB;YAClB,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,QAAQ,EAAE,IAAI,CAAC,YAAY,IAAI,EAAE,CAAC,CAAC;YAEhG,IAAI,CAAC,eAAe,EAAE,CAAC;gBACrB,kCAAkC;gBAClC,MAAM,IAAI,CAAC,4BAA4B,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACjD,OAAO,IAAI,CAAC;YACd,CAAC;YAED,2DAA2D;YAC3D,MAAM,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAE7C,OAAO,IAAI,CAAC;QACd,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,oCAAoC,EAAE,KAAK,CAAC,CAAC;YAC1D,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IAEO,KAAK,CAAC,WAAW,CAAC,MAAc;QACtC,IAAI,CAAC;YACH,2DAA2D;YAC3D,MAAM,SAAS,GAAyB;gBACtC,QAAQ,EAAE;oBACR,EAAE,EAAE,QAAQ;oBACZ,QAAQ,EAAE,oBAAoB;oBAC9B,KAAK,EAAE,oBAAoB;oBAC3B,SAAS,EAAE,QAAQ;oBACnB,QAAQ,EAAE,eAAe;oBACzB,IAAI,EAAE,sBAAS,CAAC,oBAAoB;oBACpC,UAAU,EAAE,IAAI;oBAChB,QAAQ,EAAE,IAAI;oBACd,YAAY,EAAE,IAAI;oBAClB,iBAAiB,EAAE,IAAI,IAAI,EAAE;oBAC7B,mBAAmB,EAAE,CAAC;oBACtB,SAAS,EAAE,IAAI,IAAI,EAAE;oBACrB,SAAS,EAAE,IAAI,IAAI,EAAE;oBACrB,YAAY,EAAE,MAAM,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,UAAU,CAAC;iBAC7D;gBACD,QAAQ,EAAE;oBACR,EAAE,EAAE,QAAQ;oBACZ,QAAQ,EAAE,qBAAqB;oBAC/B,KAAK,EAAE,qBAAqB;oBAC5B,SAAS,EAAE,UAAU;oBACrB,QAAQ,EAAE,OAAO;oBACjB,IAAI,EAAE,sBAAS,CAAC,SAAS;oBACzB,UAAU,EAAE,YAAY;oBACxB,aAAa,EAAE,UAAU;oBACzB,SAAS,EAAE,YAAY;oBACvB,QAAQ,EAAE,IAAI;oBACd,YAAY,EAAE,IAAI;oBAClB,iBAAiB,EAAE,IAAI,IAAI,EAAE;oBAC7B,mBAAmB,EAAE,CAAC;oBACtB,SAAS,EAAE,IAAI,IAAI,EAAE;oBACrB,SAAS,EAAE,IAAI,IAAI,EAAE;oBACrB,YAAY,EAAE,MAAM,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,SAAS,CAAC;iBAC5D;gBACD,QAAQ,EAAE;oBACR,EAAE,EAAE,QAAQ;oBACZ,QAAQ,EAAE,oBAAoB;oBAC9B,KAAK,EAAE,oBAAoB;oBAC3B,SAAS,EAAE,OAAO;oBAClB,QAAQ,EAAE,SAAS;oBACnB,IAAI,EAAE,sBAAS,CAAC,aAAa;oBAC7B,UAAU,EAAE,WAAW;oBACvB,aAAa,EAAE,UAAU;oBACzB,QAAQ,EAAE,IAAI;oBACd,YAAY,EAAE,KAAK;oBACnB,iBAAiB,EAAE,IAAI,IAAI,EAAE;oBAC7B,mBAAmB,EAAE,CAAC;oBACtB,SAAS,EAAE,IAAI,IAAI,EAAE;oBACrB,SAAS,EAAE,IAAI,IAAI,EAAE;oBACrB,YAAY,EAAE,MAAM,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,SAAS,CAAC;iBAC5D;aACF,CAAC;YAEF,OAAO,SAAS,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC;YAEjC,2CAA2C;YAC3C,gDAAgD;QAClD,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,wBAAwB,EAAE,KAAK,CAAC,CAAC;YAC9C,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IAEO,KAAK,CAAC,wBAAwB,CAAC,eAAuB;QAC5D,IAAI,CAAC;YACH,2DAA2D;YAC3D,MAAM,SAAS,GAAW;gBACxB;oBACE,EAAE,EAAE,QAAQ;oBACZ,QAAQ,EAAE,oBAAoB;oBAC9B,KAAK,EAAE,oBAAoB;oBAC3B,SAAS,EAAE,QAAQ;oBACnB,QAAQ,EAAE,eAAe;oBACzB,IAAI,EAAE,sBAAS,CAAC,oBAAoB;oBACpC,UAAU,EAAE,IAAI;oBAChB,QAAQ,EAAE,IAAI;oBACd,YAAY,EAAE,IAAI;oBAClB,iBAAiB,EAAE,IAAI,IAAI,EAAE;oBAC7B,mBAAmB,EAAE,CAAC;oBACtB,SAAS,EAAE,IAAI,IAAI,EAAE;oBACrB,SAAS,EAAE,IAAI,IAAI,EAAE;oBACrB,YAAY,EAAE,MAAM,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,UAAU,CAAC;iBAC7D;gBACD;oBACE,EAAE,EAAE,QAAQ;oBACZ,QAAQ,EAAE,qBAAqB;oBAC/B,KAAK,EAAE,qBAAqB;oBAC5B,SAAS,EAAE,UAAU;oBACrB,QAAQ,EAAE,OAAO;oBACjB,IAAI,EAAE,sBAAS,CAAC,SAAS;oBACzB,UAAU,EAAE,YAAY;oBACxB,aAAa,EAAE,UAAU;oBACzB,SAAS,EAAE,YAAY;oBACvB,QAAQ,EAAE,IAAI;oBACd,YAAY,EAAE,IAAI;oBAClB,iBAAiB,EAAE,IAAI,IAAI,EAAE;oBAC7B,mBAAmB,EAAE,CAAC;oBACtB,SAAS,EAAE,IAAI,IAAI,EAAE;oBACrB,SAAS,EAAE,IAAI,IAAI,EAAE;oBACrB,YAAY,EAAE,MAAM,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,SAAS,CAAC;iBAC5D;gBACD;oBACE,EAAE,EAAE,QAAQ;oBACZ,QAAQ,EAAE,oBAAoB;oBAC9B,KAAK,EAAE,oBAAoB;oBAC3B,SAAS,EAAE,OAAO;oBAClB,QAAQ,EAAE,SAAS;oBACnB,IAAI,EAAE,sBAAS,CAAC,aAAa;oBAC7B,UAAU,EAAE,WAAW;oBACvB,aAAa,EAAE,UAAU;oBACzB,QAAQ,EAAE,IAAI;oBACd,YAAY,EAAE,KAAK;oBACnB,iBAAiB,EAAE,IAAI,IAAI,EAAE;oBAC7B,mBAAmB,EAAE,CAAC;oBACtB,SAAS,EAAE,IAAI,IAAI,EAAE;oBACrB,SAAS,EAAE,IAAI,IAAI,EAAE;oBACrB,YAAY,EAAE,MAAM,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,SAAS,CAAC;iBAC5D;aACF,CAAC;YAEF,OAAO,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAC3B,IAAI,CAAC,QAAQ,KAAK,eAAe,IAAI,IAAI,CAAC,KAAK,KAAK,eAAe,CACpE,IAAI,IAAI,CAAC;YAEV,2CAA2C;YAC3C,sEAAsE;QACxE,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,oCAAoC,EAAE,KAAK,CAAC,CAAC;YAC1D,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IAEO,KAAK,CAAC,mBAAmB,CAAC,MAAc,EAAE,SAAiB;QACjE,IAAI,CAAC;YACH,8DAA8D;YAC9D,gBAAM,CAAC,IAAI,CAAC,+BAA+B,MAAM,SAAS,SAAS,EAAE,CAAC,CAAC;QACzE,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,gCAAgC,EAAE,KAAK,CAAC,CAAC;QACxD,CAAC;IACH,CAAC;IAEO,KAAK,CAAC,4BAA4B,CAAC,MAAc;QACvD,IAAI,CAAC;YACH,oDAAoD;YACpD,6CAA6C;YAC7C,gBAAM,CAAC,IAAI,CAAC,8CAA8C,MAAM,EAAE,CAAC,CAAC;QACtE,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,yCAAyC,EAAE,KAAK,CAAC,CAAC;QACjE,CAAC;IACH,CAAC;IAEO,KAAK,CAAC,wBAAwB,CAAC,MAAc;QACnD,IAAI,CAAC;YACH,gDAAgD;YAChD,gBAAM,CAAC,IAAI,CAAC,wCAAwC,MAAM,EAAE,CAAC,CAAC;QAChE,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,qCAAqC,EAAE,KAAK,CAAC,CAAC;QAC7D,CAAC;IACH,CAAC;IAEO,KAAK,CAAC,kBAAkB,CAAC,MAAc,EAAE,MAAc;QAC7D,IAAI,CAAC;YACH,2DAA2D;YAC3D,gBAAM,CAAC,IAAI,CAAC,wCAAwC,MAAM,EAAE,CAAC,CAAC;QAChE,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,+BAA+B,EAAE,KAAK,CAAC,CAAC;QACvD,CAAC;IACH,CAAC;IAEO,KAAK,CAAC,gBAAgB,CAAC,MAAc;QAC3C,IAAI,CAAC;YACH,8CAA8C;YAC9C,gBAAM,CAAC,IAAI,CAAC,2CAA2C,MAAM,EAAE,CAAC,CAAC;YACjE,OAAO,IAAI,CAAC,CAAC,sBAAsB;QACrC,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,6BAA6B,EAAE,KAAK,CAAC,CAAC;YACnD,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IAEO,KAAK,CAAC,kBAAkB,CAAC,MAAc;QAC7C,IAAI,CAAC;YACH,gDAAgD;YAChD,gBAAM,CAAC,IAAI,CAAC,yCAAyC,MAAM,EAAE,CAAC,CAAC;QACjE,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,+BAA+B,EAAE,KAAK,CAAC,CAAC;QACvD,CAAC;IACH,CAAC;IAEO,KAAK,CAAC,aAAa,CAAC,MAAc,EAAE,MAAc;QACxD,IAAI,CAAC;YACH,wCAAwC;YACxC,gBAAM,CAAC,IAAI,CAAC,wBAAwB,MAAM,EAAE,CAAC,CAAC;QAChD,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,yBAAyB,EAAE,KAAK,CAAC,CAAC;QACjD,CAAC;IACH,CAAC;CACF;AApnCD,wCAonCC;AAED,4BAA4B;AAC5B,4BAA4B;AACf,QAAA,cAAc,GAAG,IAAI,cAAc,EAAE,CAAC","names":[],"sources":["/Users/rodrigo/claude-projects/OmniCare/backend/src/controllers/auth.controller.ts"],"sourcesContent":["import { Request, Response } from 'express';\nimport jwt from 'jsonwebtoken';\n\nimport { JWTAuthService } from '@/auth/jwt.service';\nimport config from '@/config';\nimport { AuditService } from '@/services/audit.service';\nimport { SessionManager } from '@/services/session.service';\nimport { smartFHIRService } from '@/services/smart-fhir.service';\nimport { User, UserRole, UserRoles, LoginCredentials } from '@/types/auth.types';\nimport logger from '@/utils/logger';\nimport { getErrorMessage } from '@/utils/error.utils';\n\n/**\n * Authentication Controller\n * Handles SMART on FHIR authentication flows and internal JWT authentication\n */\nexport class AuthController {\n  private jwtService: JWTAuthService;\n  private sessionManager: SessionManager;\n  private auditService: AuditService;\n\n  constructor() {\n    this.jwtService = new JWTAuthService();\n    this.sessionManager = new SessionManager();\n    this.auditService = new AuditService();\n  }\n\n  // ===============================\n  // SMART ON FHIR AUTHORIZATION\n  // ===============================\n\n  /**\n   * GET /auth/authorize - SMART authorization endpoint\n   */\n  async authorize(req: Request, res: Response): Promise<void> {\n    try {\n      const {\n        response_type,\n        client_id,\n        redirect_uri,\n        scope,\n        state,\n        aud,\n        launch,\n      } = req.query as Record<string, string>;\n\n      logger.security('SMART authorization request', {\n        client_id,\n        response_type,\n        scope,\n        aud,\n        launch: !!launch,\n        ip: req.ip,\n        userAgent: req.get('User-Agent'),\n      });\n\n      // Validate required parameters\n      if (!response_type || response_type !== 'code') {\n        res.status(400).json({\n          error: 'invalid_request',\n          error_description: 'response_type must be \"code\"',\n        });\n        return;\n      }\n\n      if (!client_id) {\n        res.status(400).json({\n          error: 'invalid_request',\n          error_description: 'client_id is required',\n        });\n        return;\n      }\n\n      if (!redirect_uri) {\n        res.status(400).json({\n          error: 'invalid_request',\n          error_description: 'redirect_uri is required',\n        });\n        return;\n      }\n\n      const scopes = scope ? scope.split(' ') : config.smart.scopes;\n\n      let authResult;\n\n      if (launch) {\n        // EHR launch scenario\n        if (!aud) {\n          res.status(400).json({\n            error: 'invalid_request',\n            error_description: 'aud parameter required for EHR launch',\n          });\n          return;\n        }\n\n        authResult = await smartFHIRService.handleEHRLaunch(\n          aud,\n          launch,\n          client_id,\n          redirect_uri,\n          scopes\n        );\n      } else {\n        // Standalone launch scenario\n        authResult = await smartFHIRService.initiateAuthorization(\n          client_id,\n          redirect_uri,\n          scopes,\n          state,\n          aud\n        );\n      }\n\n      // For this example, we'll redirect directly to simulate user consent\n      // In production, this would show a consent screen\n      const authCode = this.generateAuthorizationCode();\n      const finalState = state || authResult.state;\n\n      // Store authorization code temporarily (in production, use secure storage)\n      this.storeAuthorizationCode(authCode, {\n        client_id,\n        redirect_uri,\n        scope: scopes.join(' '),\n        state: finalState,\n        aud,\n        launch,\n        expiresAt: Date.now() + (10 * 60 * 1000), // 10 minutes\n      });\n\n      const redirectUrl = new URL(redirect_uri);\n      redirectUrl.searchParams.append('code', authCode);\n      redirectUrl.searchParams.append('state', finalState);\n\n      logger.security('SMART authorization code generated', {\n        client_id,\n        state: finalState,\n        hasLaunch: !!launch,\n      });\n\n      res.redirect(redirectUrl.toString());\n    } catch (error) {\n      logger.error('SMART authorization failed:', error);\n      res.status(500).json({\n        error: 'server_error',\n        error_description: 'Authorization server error',\n      });\n    }\n  }\n\n  /**\n   * POST /auth/token - SMART token endpoint\n   */\n  async token(req: Request, res: Response): Promise<void> {\n    try {\n      const {\n        grant_type,\n        code,\n        redirect_uri,\n        client_id,\n        client_secret,\n        code_verifier,\n        refresh_token,\n      } = req.body;\n\n      logger.security('SMART token request', {\n        grant_type,\n        client_id,\n        hasCode: !!code,\n        hasRefreshToken: !!refresh_token,\n        ip: req.ip,\n      });\n\n      if (grant_type === 'authorization_code') {\n        await this.handleAuthorizationCodeGrant(req, res);\n      } else if (grant_type === 'refresh_token') {\n        await this.handleRefreshTokenGrant(req, res);\n      } else if (grant_type === 'client_credentials') {\n        await this.handleClientCredentialsGrant(req, res);\n      } else {\n        res.status(400).json({\n          error: 'unsupported_grant_type',\n          error_description: 'Supported grant types: authorization_code, refresh_token, client_credentials',\n        });\n      }\n    } catch (error) {\n      logger.error('SMART token request failed:', error);\n      res.status(500).json({\n        error: 'server_error',\n        error_description: 'Token server error',\n      });\n    }\n  }\n\n  /**\n   * Handle authorization code grant\n   */\n  private async handleAuthorizationCodeGrant(req: Request, res: Response): Promise<void> {\n    const { code, redirect_uri, client_id, code_verifier } = req.body;\n\n    // Validate required parameters\n    if (!code || !redirect_uri || !client_id) {\n      res.status(400).json({\n        error: 'invalid_request',\n        error_description: 'code, redirect_uri, and client_id are required',\n      });\n      return;\n    }\n\n    // Retrieve and validate authorization code\n    const authData = this.getAuthorizationCode(code);\n    if (!authData) {\n      res.status(400).json({\n        error: 'invalid_grant',\n        error_description: 'Invalid or expired authorization code',\n      });\n      return;\n    }\n\n    if (authData.client_id !== client_id || authData.redirect_uri !== redirect_uri) {\n      res.status(400).json({\n        error: 'invalid_grant',\n        error_description: 'Invalid client_id or redirect_uri',\n      });\n      return;\n    }\n\n    if (Date.now() > authData.expiresAt) {\n      this.removeAuthorizationCode(code);\n      res.status(400).json({\n        error: 'invalid_grant',\n        error_description: 'Authorization code expired',\n      });\n      return;\n    }\n\n    // Generate tokens\n    const accessToken = this.generateAccessToken({\n      client_id,\n      scope: authData.scope,\n      aud: authData.aud,\n      launch: authData.launch,\n    });\n\n    const refreshToken = this.generateRefreshToken({\n      client_id,\n      scope: authData.scope,\n    });\n\n    // Remove used authorization code\n    this.removeAuthorizationCode(code);\n\n    const tokenResponse = {\n      access_token: accessToken,\n      token_type: 'bearer',\n      expires_in: 3600,\n      scope: authData.scope,\n      refresh_token: refreshToken,\n    };\n\n    // Add SMART-specific parameters if available\n    if (authData.launch) {\n      // In a real implementation, you would extract patient/encounter from launch context\n      (tokenResponse as any).patient = 'example-patient-id';\n      (tokenResponse as any).encounter = 'example-encounter-id';\n      (tokenResponse as any).need_patient_banner = true;\n      (tokenResponse as any).smart_style_url = `${config.fhir.baseUrl}/smart-style.json`;\n    }\n\n    logger.security('SMART access token issued', {\n      client_id,\n      scope: authData.scope,\n      hasLaunch: !!authData.launch,\n    });\n\n    res.json(tokenResponse);\n  }\n\n  /**\n   * Handle refresh token grant\n   */\n  private async handleRefreshTokenGrant(req: Request, res: Response): Promise<void> {\n    const { refresh_token, client_id } = req.body;\n\n    if (!refresh_token || !client_id) {\n      res.status(400).json({\n        error: 'invalid_request',\n        error_description: 'refresh_token and client_id are required',\n      });\n      return;\n    }\n\n    try {\n      // Verify refresh token\n      const decoded = jwt.verify(refresh_token, config.jwt.secret) as any;\n      \n      if (decoded.client_id !== client_id || decoded.type !== 'refresh') {\n        res.status(400).json({\n          error: 'invalid_grant',\n          error_description: 'Invalid refresh token',\n        });\n        return;\n      }\n\n      // Generate new access token\n      const accessToken = this.generateAccessToken({\n        client_id,\n        scope: decoded.scope,\n        aud: decoded.aud,\n      });\n\n      const tokenResponse = {\n        access_token: accessToken,\n        token_type: 'bearer',\n        expires_in: 3600,\n        scope: decoded.scope,\n      };\n\n      logger.security('SMART token refreshed', {\n        client_id,\n        scope: decoded.scope,\n      });\n\n      res.json(tokenResponse);\n    } catch (error) {\n      res.status(400).json({\n        error: 'invalid_grant',\n        error_description: 'Invalid refresh token',\n      });\n    }\n  }\n\n  /**\n   * Handle client credentials grant\n   */\n  private async handleClientCredentialsGrant(req: Request, res: Response): Promise<void> {\n    const { client_id, client_secret, scope } = req.body;\n\n    if (!client_id || !client_secret) {\n      res.status(400).json({\n        error: 'invalid_request',\n        error_description: 'client_id and client_secret are required',\n      });\n      return;\n    }\n\n    // In production, validate client credentials against a secure store\n    const isValidClient = await this.validateClientCredentials(client_id, client_secret);\n    \n    if (!isValidClient) {\n      res.status(401).json({\n        error: 'invalid_client',\n        error_description: 'Invalid client credentials',\n      });\n      return;\n    }\n\n    const requestedScope = scope || 'system/*.read';\n    \n    // Generate access token for system access\n    const accessToken = this.generateAccessToken({\n      client_id,\n      scope: requestedScope,\n      type: 'system',\n    });\n\n    const tokenResponse = {\n      access_token: accessToken,\n      token_type: 'bearer',\n      expires_in: 3600,\n      scope: requestedScope,\n    };\n\n    logger.security('System access token issued', {\n      client_id,\n      scope: requestedScope,\n    });\n\n    res.json(tokenResponse);\n  }\n\n  /**\n   * POST /auth/introspect - Token introspection endpoint\n   */\n  async introspect(req: Request, res: Response): Promise<void> {\n    try {\n      const { token } = req.body;\n\n      if (!token) {\n        res.status(400).json({\n          error: 'invalid_request',\n          error_description: 'token parameter is required',\n        });\n        return;\n      }\n\n      logger.security('Token introspection request', {\n        ip: req.ip,\n      });\n\n      try {\n        const decoded = jwt.verify(token, config.jwt.secret) as any;\n        \n        const introspectionResponse = {\n          active: true,\n          scope: decoded.scope,\n          client_id: decoded.client_id,\n          sub: decoded.sub,\n          exp: decoded.exp,\n          iat: decoded.iat,\n          aud: decoded.aud,\n          iss: decoded.iss,\n          patient: decoded.patient,\n          encounter: decoded.encounter,\n          fhirUser: decoded.fhirUser,\n        };\n\n        res.json(introspectionResponse);\n      } catch (jwtError) {\n        // Token is invalid or expired\n        res.json({ active: false });\n      }\n    } catch (error) {\n      logger.error('Token introspection failed:', error);\n      res.status(500).json({\n        error: 'server_error',\n        error_description: 'Introspection server error',\n      });\n    }\n  }\n\n  // ===============================\n  // INTERNAL API AUTHENTICATION\n  // ===============================\n\n  /**\n   * POST /auth/login - JWT-based authentication\n   */\n  async login(req: Request, res: Response): Promise<void> {\n    try {\n      const { username, password, mfaToken }: LoginCredentials = req.body;\n      const ipAddress = req.ip || 'unknown';\n      const userAgent = req.get('User-Agent') || 'unknown';\n\n      await this.auditService.logSecurityEvent({\n        type: 'LOGIN_FAILURE',\n        severity: 'LOW',\n        description: `Login attempt for username: ${username}`,\n        metadata: { username, ipAddress, userAgent }\n      });\n\n      // Validate credentials\n      const user = await this.validateUserCredentials(username, password);\n      \n      if (!user) {\n        await this.auditService.logSecurityEvent({\n          type: 'LOGIN_FAILURE',\n          severity: 'MEDIUM',\n          description: `Failed login attempt - invalid credentials`,\n          metadata: { username, ipAddress, userAgent }\n        });\n        \n        res.status(401).json({\n          success: false,\n          error: 'INVALID_CREDENTIALS',\n          message: 'Invalid username or password'\n        });\n        return;\n      }\n\n      // Check if account is locked\n      if (user.accountLockedUntil && user.accountLockedUntil > new Date()) {\n        await this.auditService.logSecurityEvent({\n          type: 'LOGIN_FAILURE',\n          userId: user.id,\n          severity: 'MEDIUM',\n          description: 'Login attempt on locked account',\n          metadata: { username, ipAddress, userAgent, lockedUntil: user.accountLockedUntil }\n        });\n\n        res.status(423).json({\n          success: false,\n          error: 'ACCOUNT_LOCKED',\n          message: 'Account is temporarily locked due to multiple failed login attempts'\n        });\n        return;\n      }\n\n      // Check if user is active\n      if (!user.isActive) {\n        await this.auditService.logSecurityEvent({\n          type: 'LOGIN_FAILURE',\n          userId: user.id,\n          severity: 'MEDIUM',\n          description: 'Login attempt on inactive account',\n          metadata: { username, ipAddress, userAgent }\n        });\n\n        res.status(403).json({\n          success: false,\n          error: 'ACCOUNT_INACTIVE',\n          message: 'Account is not active'\n        });\n        return;\n      }\n\n      // Check MFA if required\n      if (this.jwtService.isMfaRequired(user.role) && user.isMfaEnabled) {\n        if (!mfaToken) {\n          res.status(200).json({\n            success: false,\n            requiresMfa: true,\n            message: 'Multi-factor authentication required'\n          });\n          return;\n        }\n\n        if (!user.mfaSecret || !this.jwtService.verifyMfaToken(mfaToken, user.mfaSecret)) {\n          await this.auditService.logSecurityEvent({\n            type: 'LOGIN_FAILURE',\n            userId: user.id,\n            severity: 'HIGH',\n            description: 'Invalid MFA token provided',\n            metadata: { username, ipAddress, userAgent }\n          });\n\n          res.status(401).json({\n            success: false,\n            error: 'INVALID_MFA_TOKEN',\n            message: 'Invalid multi-factor authentication token'\n          });\n          return;\n        }\n      }\n\n      // Generate JWT tokens\n      const tokens = await this.jwtService.generateTokens(user);\n      \n      // Create session\n      const session = await this.sessionManager.createSession(user, ipAddress, userAgent);\n\n      // Update user login info\n      await this.updateUserLoginInfo(user.id, ipAddress);\n\n      // Log successful login\n      await this.auditService.logSecurityEvent({\n        type: 'LOGIN_SUCCESS',\n        userId: user.id,\n        severity: 'LOW',\n        description: `Successful login for ${user.username}`,\n        metadata: { \n          username: user.username, \n          role: user.role,\n          sessionId: session.sessionId,\n          ipAddress, \n          userAgent \n        }\n      });\n\n      res.json({\n        success: true,\n        tokens,\n        user: {\n          id: user.id,\n          username: user.username,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          role: user.role,\n          department: user.department,\n          isActive: user.isActive,\n          isMfaEnabled: user.isMfaEnabled,\n          lastLogin: user.lastLogin\n        },\n        session: {\n          sessionId: session.sessionId,\n          expiresAt: session.expiresAt\n        }\n      });\n    } catch (error) {\n      logger.error('Login failed:', error);\n      await this.auditService.logSecurityEvent({\n        type: 'LOGIN_FAILURE',\n        severity: 'HIGH',\n        description: 'Login system error',\n        metadata: { error: getErrorMessage(error), ipAddress: req.ip }\n      });\n\n      res.status(500).json({\n        success: false,\n        error: 'INTERNAL_ERROR',\n        message: 'An internal error occurred during login'\n      });\n    }\n  }\n\n  /**\n   * POST /auth/refresh - Refresh access token\n   */\n  async refreshToken(req: Request, res: Response): Promise<void> {\n    try {\n      const { refreshToken } = req.body;\n      const ipAddress = req.ip || 'unknown';\n      const userAgent = req.get('User-Agent') || 'unknown';\n\n      if (!refreshToken) {\n        res.status(400).json({\n          success: false,\n          error: 'MISSING_REFRESH_TOKEN',\n          message: 'Refresh token is required'\n        });\n        return;\n      }\n\n      // Verify refresh token\n      const decoded = await this.jwtService.verifyRefreshToken(refreshToken);\n      \n      // Get user\n      const user = await this.getUserById(decoded.userId);\n      if (!user || !user.isActive) {\n        res.status(401).json({\n          success: false,\n          error: 'USER_NOT_FOUND',\n          message: 'User not found or inactive'\n        });\n        return;\n      }\n\n      // Generate new tokens\n      const tokens = await this.jwtService.refreshAccessToken(refreshToken, user);\n\n      // Log token refresh\n      await this.auditService.logUserAction(\n        user.id,\n        'token_refresh',\n        '/auth/refresh',\n        undefined,\n        ipAddress,\n        userAgent,\n        true\n      );\n\n      res.json({\n        success: true,\n        tokens\n      });\n    } catch (error) {\n      logger.error('Token refresh failed:', error);\n      await this.auditService.logSecurityEvent({\n        type: 'LOGIN_FAILURE',\n        severity: 'MEDIUM',\n        description: 'Token refresh failed',\n        metadata: { error: getErrorMessage(error), ipAddress: req.ip }\n      });\n\n      res.status(401).json({\n        success: false,\n        error: 'INVALID_REFRESH_TOKEN',\n        message: 'Invalid or expired refresh token'\n      });\n    }\n  }\n\n  /**\n   * POST /auth/logout - Logout and destroy session\n   */\n  async logout(req: Request, res: Response): Promise<void> {\n    try {\n      const authHeader = req.get('Authorization');\n      const token = this.jwtService.extractTokenFromHeader(authHeader);\n      const ipAddress = req.ip || 'unknown';\n      const userAgent = req.get('User-Agent') || 'unknown';\n\n      if (token) {\n        try {\n          const tokenPayload = await this.jwtService.verifyAccessToken(token);\n          \n          // Destroy session\n          await this.sessionManager.destroySession(tokenPayload.sessionId);\n          \n          // Log logout\n          await this.auditService.logSecurityEvent({\n            type: 'LOGOUT',\n            userId: tokenPayload.userId,\n            severity: 'LOW',\n            description: `User ${tokenPayload.username} logged out`,\n            metadata: { \n              sessionId: tokenPayload.sessionId,\n              ipAddress, \n              userAgent \n            }\n          });\n        } catch (error) {\n          // Token might be invalid, but that's okay for logout\n          logger.warn('Token verification failed during logout:', getErrorMessage(error));\n        }\n      }\n\n      res.json({\n        success: true,\n        message: 'Successfully logged out'\n      });\n    } catch (error) {\n      logger.error('Logout failed:', error);\n      res.status(500).json({\n        success: false,\n        error: 'LOGOUT_ERROR',\n        message: 'An error occurred during logout'\n      });\n    }\n  }\n\n  /**\n   * POST /auth/setup-mfa - Setup multi-factor authentication\n   */\n  async setupMfa(req: Request, res: Response): Promise<void> {\n    try {\n      const { userId } = req.body;\n      const user = await this.getUserById(userId);\n      \n      if (!user) {\n        res.status(404).json({\n          success: false,\n          error: 'USER_NOT_FOUND',\n          message: 'User not found'\n        });\n        return;\n      }\n\n      const mfaSetup = await this.jwtService.generateMfaSecret(user);\n      \n      // Store secret temporarily (user must verify before enabling)\n      await this.storeTempMfaSecret(userId, mfaSetup.secret);\n\n      await this.auditService.logUserAction(\n        userId,\n        'mfa_setup_initiated',\n        '/auth/setup-mfa',\n        undefined,\n        req.ip || 'unknown',\n        req.get('User-Agent') || 'unknown',\n        true\n      );\n\n      res.json({\n        success: true,\n        mfaSetup: {\n          qrCode: mfaSetup.qrCode,\n          backupCodes: mfaSetup.backupCodes\n        }\n      });\n    } catch (error) {\n      logger.error('MFA setup failed:', error);\n      res.status(500).json({\n        success: false,\n        error: 'MFA_SETUP_ERROR',\n        message: 'Failed to setup multi-factor authentication'\n      });\n    }\n  }\n\n  /**\n   * POST /auth/verify-mfa - Verify and enable MFA\n   */\n  async verifyMfa(req: Request, res: Response): Promise<void> {\n    try {\n      const { userId, token } = req.body;\n      \n      const tempSecret = await this.getTempMfaSecret(userId);\n      if (!tempSecret) {\n        res.status(400).json({\n          success: false,\n          error: 'NO_PENDING_MFA_SETUP',\n          message: 'No pending MFA setup found'\n        });\n        return;\n      }\n\n      if (!this.jwtService.verifyMfaToken(token, tempSecret)) {\n        res.status(401).json({\n          success: false,\n          error: 'INVALID_MFA_TOKEN',\n          message: 'Invalid MFA token'\n        });\n        return;\n      }\n\n      // Enable MFA for user\n      await this.enableUserMfa(userId, tempSecret);\n      await this.clearTempMfaSecret(userId);\n\n      await this.auditService.logSecurityEvent({\n        type: 'MFA_ENABLED',\n        userId,\n        severity: 'MEDIUM',\n        description: 'Multi-factor authentication enabled',\n        metadata: { ipAddress: req.ip }\n      });\n\n      res.json({\n        success: true,\n        message: 'Multi-factor authentication enabled successfully'\n      });\n    } catch (error) {\n      logger.error('MFA verification failed:', error);\n      res.status(500).json({\n        success: false,\n        error: 'MFA_VERIFICATION_ERROR',\n        message: 'Failed to verify multi-factor authentication'\n      });\n    }\n  }\n\n  /**\n   * GET /auth/me - Get current user info\n   */\n  async getCurrentUser(req: Request, res: Response): Promise<void> {\n    try {\n      const authHeader = req.get('Authorization');\n      const token = this.jwtService.extractTokenFromHeader(authHeader);\n      \n      if (!token) {\n        res.status(401).json({\n          success: false,\n          error: 'NO_TOKEN',\n          message: 'No authentication token provided'\n        });\n        return;\n      }\n\n      const tokenPayload = await this.jwtService.verifyAccessToken(token);\n      const user = await this.getUserById(tokenPayload.userId);\n      \n      if (!user) {\n        res.status(404).json({\n          success: false,\n          error: 'USER_NOT_FOUND',\n          message: 'User not found'\n        });\n        return;\n      }\n\n      res.json({\n        success: true,\n        user: {\n          id: user.id,\n          username: user.username,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          role: user.role,\n          department: user.department,\n          isActive: user.isActive,\n          isMfaEnabled: user.isMfaEnabled,\n          lastLogin: user.lastLogin\n        }\n      });\n    } catch (error) {\n      res.status(401).json({\n        success: false,\n        error: 'INVALID_TOKEN',\n        message: 'Invalid or expired token'\n      });\n    }\n  }\n\n  // ===============================\n  // UTILITY METHODS\n  // ===============================\n\n  private generateAuthorizationCode(): string {\n    return `code_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private generateAccessToken(payload: any): string {\n    return jwt.sign(\n      {\n        ...payload,\n        type: 'access',\n        iss: config.fhir.baseUrl,\n        aud: payload.aud || config.fhir.baseUrl,\n        iat: Math.floor(Date.now() / 1000),\n      },\n      config.jwt.secret,\n      { expiresIn: '1h' }\n    );\n  }\n\n  private generateRefreshToken(payload: any): string {\n    return jwt.sign(\n      {\n        ...payload,\n        type: 'refresh',\n        iss: config.fhir.baseUrl,\n        iat: Math.floor(Date.now() / 1000),\n      },\n      config.jwt.secret,\n      { expiresIn: '30d' }\n    );\n  }\n\n  // Temporary in-memory storage for demo purposes\n  // In production, use Redis or secure database\n  private authCodes = new Map<string, any>();\n\n  private storeAuthorizationCode(code: string, data: any): void {\n    this.authCodes.set(code, data);\n    \n    // Clean up expired codes after timeout\n    setTimeout(() => {\n      this.authCodes.delete(code);\n    }, 10 * 60 * 1000); // 10 minutes\n  }\n\n  private getAuthorizationCode(code: string): any {\n    return this.authCodes.get(code);\n  }\n\n  private removeAuthorizationCode(code: string): void {\n    this.authCodes.delete(code);\n  }\n\n  private async validateClientCredentials(clientId: string, clientSecret: string): Promise<boolean> {\n    // In production, validate against secure client registry\n    // This is a placeholder implementation\n    return clientId === 'omnicare-client' && clientSecret === 'omnicare-secret';\n  }\n\n  private async validateUserCredentials(username: string, password: string): Promise<User | null> {\n    try {\n      // Get user by username or email\n      const user = await this.getUserByUsernameOrEmail(username);\n      \n      if (!user) {\n        return null;\n      }\n\n      // Verify password\n      const isPasswordValid = await this.jwtService.verifyPassword(password, user.passwordHash || '');\n      \n      if (!isPasswordValid) {\n        // Increment failed login attempts\n        await this.incrementFailedLoginAttempts(user.id);\n        return null;\n      }\n\n      // Reset failed login attempts on successful authentication\n      await this.resetFailedLoginAttempts(user.id);\n      \n      return user;\n    } catch (error) {\n      logger.error('User credential validation failed:', error);\n      return null;\n    }\n  }\n\n  private async getUserById(userId: string): Promise<User | null> {\n    try {\n      // Mock implementation - replace with actual database query\n      const mockUsers: Record<string, User> = {\n        'user-1': {\n          id: 'user-1',\n          username: 'admin@omnicare.com',\n          email: 'admin@omnicare.com',\n          firstName: 'System',\n          lastName: 'Administrator',\n          role: UserRoles.SYSTEM_ADMINISTRATOR,\n          department: 'IT',\n          isActive: true,\n          isMfaEnabled: true,\n          passwordChangedAt: new Date(),\n          failedLoginAttempts: 0,\n          createdAt: new Date(),\n          updatedAt: new Date(),\n          passwordHash: await this.jwtService.hashPassword('admin123')\n        },\n        'user-2': {\n          id: 'user-2',\n          username: 'doctor@omnicare.com',\n          email: 'doctor@omnicare.com',\n          firstName: 'Dr. Jane',\n          lastName: 'Smith',\n          role: UserRoles.PHYSICIAN,\n          department: 'Cardiology',\n          licenseNumber: 'MD123456',\n          npiNumber: '1234567890',\n          isActive: true,\n          isMfaEnabled: true,\n          passwordChangedAt: new Date(),\n          failedLoginAttempts: 0,\n          createdAt: new Date(),\n          updatedAt: new Date(),\n          passwordHash: await this.jwtService.hashPassword('demo123')\n        },\n        'user-3': {\n          id: 'user-3',\n          username: 'nurse@omnicare.com',\n          email: 'nurse@omnicare.com',\n          firstName: 'Sarah',\n          lastName: 'Johnson',\n          role: UserRoles.NURSING_STAFF,\n          department: 'Emergency',\n          licenseNumber: 'RN789012',\n          isActive: true,\n          isMfaEnabled: false,\n          passwordChangedAt: new Date(),\n          failedLoginAttempts: 0,\n          createdAt: new Date(),\n          updatedAt: new Date(),\n          passwordHash: await this.jwtService.hashPassword('demo123')\n        }\n      };\n\n      return mockUsers[userId] || null;\n      \n      // TODO: Replace with actual database query\n      // return await UserRepository.findById(userId);\n    } catch (error) {\n      logger.error('Get user by ID failed:', error);\n      return null;\n    }\n  }\n\n  private async getUserByUsernameOrEmail(usernameOrEmail: string): Promise<User | null> {\n    try {\n      // Mock implementation - replace with actual database query\n      const mockUsers: User[] = [\n        {\n          id: 'user-1',\n          username: 'admin@omnicare.com',\n          email: 'admin@omnicare.com',\n          firstName: 'System',\n          lastName: 'Administrator',\n          role: UserRoles.SYSTEM_ADMINISTRATOR,\n          department: 'IT',\n          isActive: true,\n          isMfaEnabled: true,\n          passwordChangedAt: new Date(),\n          failedLoginAttempts: 0,\n          createdAt: new Date(),\n          updatedAt: new Date(),\n          passwordHash: await this.jwtService.hashPassword('admin123')\n        },\n        {\n          id: 'user-2',\n          username: 'doctor@omnicare.com',\n          email: 'doctor@omnicare.com',\n          firstName: 'Dr. Jane',\n          lastName: 'Smith',\n          role: UserRoles.PHYSICIAN,\n          department: 'Cardiology',\n          licenseNumber: 'MD123456',\n          npiNumber: '1234567890',\n          isActive: true,\n          isMfaEnabled: true,\n          passwordChangedAt: new Date(),\n          failedLoginAttempts: 0,\n          createdAt: new Date(),\n          updatedAt: new Date(),\n          passwordHash: await this.jwtService.hashPassword('demo123')\n        },\n        {\n          id: 'user-3',\n          username: 'nurse@omnicare.com',\n          email: 'nurse@omnicare.com',\n          firstName: 'Sarah',\n          lastName: 'Johnson',\n          role: UserRoles.NURSING_STAFF,\n          department: 'Emergency',\n          licenseNumber: 'RN789012',\n          isActive: true,\n          isMfaEnabled: false,\n          passwordChangedAt: new Date(),\n          failedLoginAttempts: 0,\n          createdAt: new Date(),\n          updatedAt: new Date(),\n          passwordHash: await this.jwtService.hashPassword('demo123')\n        }\n      ];\n\n      return mockUsers.find(user => \n        user.username === usernameOrEmail || user.email === usernameOrEmail\n      ) || null;\n      \n      // TODO: Replace with actual database query\n      // return await UserRepository.findByUsernameOrEmail(usernameOrEmail);\n    } catch (error) {\n      logger.error('Get user by username/email failed:', error);\n      return null;\n    }\n  }\n\n  private async updateUserLoginInfo(userId: string, ipAddress: string): Promise<void> {\n    try {\n      // TODO: Update user's last login timestamp and IP in database\n      logger.info(`Updated login info for user ${userId} from ${ipAddress}`);\n    } catch (error) {\n      logger.error('Update user login info failed:', error);\n    }\n  }\n\n  private async incrementFailedLoginAttempts(userId: string): Promise<void> {\n    try {\n      // TODO: Increment failed login attempts in database\n      // If attempts exceed threshold, lock account\n      logger.info(`Incremented failed login attempts for user ${userId}`);\n    } catch (error) {\n      logger.error('Increment failed login attempts failed:', error);\n    }\n  }\n\n  private async resetFailedLoginAttempts(userId: string): Promise<void> {\n    try {\n      // TODO: Reset failed login attempts in database\n      logger.info(`Reset failed login attempts for user ${userId}`);\n    } catch (error) {\n      logger.error('Reset failed login attempts failed:', error);\n    }\n  }\n\n  private async storeTempMfaSecret(userId: string, secret: string): Promise<void> {\n    try {\n      // TODO: Store temporary MFA secret (expires in 10 minutes)\n      logger.info(`Stored temporary MFA secret for user ${userId}`);\n    } catch (error) {\n      logger.error('Store temp MFA secret failed:', error);\n    }\n  }\n\n  private async getTempMfaSecret(userId: string): Promise<string | null> {\n    try {\n      // TODO: Get temporary MFA secret from storage\n      logger.info(`Retrieved temporary MFA secret for user ${userId}`);\n      return null; // Mock implementation\n    } catch (error) {\n      logger.error('Get temp MFA secret failed:', error);\n      return null;\n    }\n  }\n\n  private async clearTempMfaSecret(userId: string): Promise<void> {\n    try {\n      // TODO: Clear temporary MFA secret from storage\n      logger.info(`Cleared temporary MFA secret for user ${userId}`);\n    } catch (error) {\n      logger.error('Clear temp MFA secret failed:', error);\n    }\n  }\n\n  private async enableUserMfa(userId: string, secret: string): Promise<void> {\n    try {\n      // TODO: Enable MFA for user in database\n      logger.info(`Enabled MFA for user ${userId}`);\n    } catch (error) {\n      logger.error('Enable user MFA failed:', error);\n    }\n  }\n}\n\n// Export singleton instance\n// Export singleton instance\nexport const authController = new AuthController();"],"version":3}