{"file":"/Users/rodrigo/claude-projects/OmniCare/backend/tests/unit/services/audit.service.test.ts","mappings":"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","names":[],"sources":["/Users/rodrigo/claude-projects/OmniCare/backend/tests/unit/services/audit.service.test.ts"],"sourcesContent":["import { AuditService } from '../../../src/services/audit.service';\nimport { AuditLogEntry, SecurityEvent, ComplianceReport } from '../../../src/types/auth.types';\n\n// Mock crypto for deterministic testing\njest.mock('crypto', () => ({\n  randomBytes: jest.fn().mockReturnValue({\n    toString: jest.fn().mockReturnValue('mockedrandom123')\n  }),\n  createHash: jest.fn().mockReturnValue({\n    update: jest.fn().mockReturnThis(),\n    digest: jest.fn().mockReturnValue('mockedhash')\n  })\n}));\n\n// Mock console.log to avoid test output pollution\njest.spyOn(console, 'log').mockImplementation(() => {});\njest.spyOn(console, 'error').mockImplementation(() => {});\n\ndescribe('AuditService', () => {\n  let auditService: AuditService;\n  let originalEnv: NodeJS.ProcessEnv;\n\n  beforeEach(() => {\n    originalEnv = process.env;\n    process.env = { ...originalEnv, AUDIT_ENCRYPTION_KEY: 'test-key-123' };\n    auditService = new AuditService();\n  });\n\n  afterEach(() => {\n    process.env = originalEnv;\n    auditService.shutdown();\n  });\n\n  describe('logUserAction', () => {\n    it('should log a successful user action', async () => {\n      const eventSpy = jest.fn();\n      auditService.on('auditEntry', eventSpy);\n\n      await auditService.logUserAction(\n        'user123',\n        'read',\n        'Patient',\n        'pat123',\n        '192.168.1.1',\n        'Mozilla/5.0',\n        true\n      );\n\n      expect(eventSpy).toHaveBeenCalledWith(\n        expect.objectContaining({\n          userId: 'user123',\n          action: 'read',\n          resource: 'Patient',\n          resourceId: 'pat123',\n          ipAddress: '192.168.1.1',\n          userAgent: 'Mozilla/5.0',\n          success: true,\n          errorMessage: undefined\n        })\n      );\n    });\n\n    it('should log a failed user action with error message', async () => {\n      const eventSpy = jest.fn();\n      auditService.on('auditEntry', eventSpy);\n\n      await auditService.logUserAction(\n        'user123',\n        'update',\n        'Patient',\n        'pat123',\n        '192.168.1.1',\n        'Mozilla/5.0',\n        false,\n        'Access denied'\n      );\n\n      expect(eventSpy).toHaveBeenCalledWith(\n        expect.objectContaining({\n          userId: 'user123',\n          action: 'update',\n          resource: 'Patient',\n          resourceId: 'pat123',\n          success: false,\n          errorMessage: 'Access denied'\n        })\n      );\n    });\n\n    it('should emit security event for security-relevant actions', async () => {\n      const securityEventSpy = jest.fn();\n      auditService.on('securityEvent', securityEventSpy);\n\n      await auditService.logUserAction(\n        'user123',\n        'login',\n        'User',\n        'user123',\n        '192.168.1.1',\n        'Mozilla/5.0',\n        true\n      );\n\n      expect(securityEventSpy).toHaveBeenCalledWith(\n        expect.objectContaining({\n          type: 'LOGIN_SUCCESS',\n          userId: 'user123',\n          severity: 'LOW',\n          description: 'User action: login on User'\n        })\n      );\n    });\n\n    it('should handle additional data encryption', async () => {\n      const additionalData = {\n        patientSSN: '123-45-6789',\n        medicalRecord: 'Sensitive info',\n        diagnosis: 'Test diagnosis'\n      };\n\n      await auditService.logUserAction(\n        'user123',\n        'read',\n        'Patient',\n        'pat123',\n        '192.168.1.1',\n        'Mozilla/5.0',\n        true,\n        undefined,\n        additionalData\n      );\n\n      // Check that sensitive fields are encrypted\n      expect(console.log).toHaveBeenCalledWith(\n        'Audit Entry:',\n        expect.stringContaining('encrypted:')\n      );\n    });\n  });\n\n  describe('logSecurityEvent', () => {\n    it('should log a security event', async () => {\n      const eventSpy = jest.fn();\n      auditService.on('securityEvent', eventSpy);\n\n      const securityEvent: SecurityEvent = {\n        type: 'DATA_ACCESS',\n        userId: 'user123',\n        severity: 'MEDIUM',\n        description: 'Accessed patient data',\n        metadata: { resource: 'Patient', action: 'read' }\n      };\n\n      await auditService.logSecurityEvent(securityEvent);\n\n      expect(eventSpy).toHaveBeenCalledWith(securityEvent);\n    });\n\n    it('should handle critical security events', async () => {\n      const criticalEventSpy = jest.fn();\n      auditService.on('criticalSecurityEvent', criticalEventSpy);\n\n      const criticalEvent: SecurityEvent = {\n        type: 'UNAUTHORIZED_ACCESS',\n        userId: 'user123',\n        severity: 'CRITICAL',\n        description: 'Attempted unauthorized access',\n        metadata: {}\n      };\n\n      await auditService.logSecurityEvent(criticalEvent);\n\n      expect(criticalEventSpy).toHaveBeenCalledWith(criticalEvent);\n    });\n  });\n\n  describe('generateHipaaComplianceReport', () => {\n    beforeEach(async () => {\n      // Set up some test audit entries\n      await auditService.logUserAction(\n        'user1',\n        'read',\n        'Patient',\n        'pat1',\n        '192.168.1.1',\n        'Mozilla/5.0',\n        true\n      );\n      await auditService.logUserAction(\n        'user2',\n        'update',\n        'Patient',\n        'pat2',\n        '192.168.1.2',\n        'Mozilla/5.0',\n        false,\n        'Validation error'\n      );\n      await auditService.logUserAction(\n        'user1',\n        'login',\n        'User',\n        'user1',\n        '192.168.1.1',\n        'Mozilla/5.0',\n        true\n      );\n    });\n\n    it('should generate HIPAA compliance report', async () => {\n      const startDate = new Date(Date.now() - 24 * 60 * 60 * 1000);\n      const endDate = new Date();\n      const generatedBy = 'admin123';\n\n      const report = await auditService.generateHipaaComplianceReport(\n        startDate,\n        endDate,\n        generatedBy\n      );\n\n      expect(report).toEqual(\n        expect.objectContaining({\n          reportType: 'HIPAA_ACCESS_LOG',\n          generatedBy,\n          dateRange: { start: startDate, end: endDate },\n          summary: expect.objectContaining({\n            totalAccesses: 3,\n            uniqueUsers: 2,\n            failedAttempts: 1,\n            securityIncidents: 0\n          })\n        })\n      );\n\n      expect(report.data).toHaveLength(3);\n      expect(report.reportId).toMatch(/^audit_/);\n    });\n  });\n\n  describe('searchAuditLogs', () => {\n    beforeEach(async () => {\n      // Set up test data\n      await auditService.logUserAction(\n        'user1',\n        'read',\n        'Patient',\n        'pat1',\n        '192.168.1.1',\n        'Mozilla/5.0',\n        true\n      );\n      await auditService.logUserAction(\n        'user2',\n        'update',\n        'Observation',\n        'obs1',\n        '192.168.1.2',\n        'Mozilla/5.0',\n        false\n      );\n    });\n\n    it('should search audit logs with filters', async () => {\n      const results = await auditService.searchAuditLogs('', {\n        userId: 'user1',\n        success: true\n      });\n\n      expect(results).toHaveLength(1);\n      expect(results[0]).toEqual(\n        expect.objectContaining({\n          userId: 'user1',\n          success: true\n        })\n      );\n    });\n\n    it('should search audit logs with text query', async () => {\n      const results = await auditService.searchAuditLogs('Observation');\n\n      expect(results).toHaveLength(1);\n      expect(results[0]).toEqual(\n        expect.objectContaining({\n          resource: 'Observation'\n        })\n      );\n    });\n\n    it('should apply pagination', async () => {\n      const results = await auditService.searchAuditLogs('', {\n        limit: 1,\n        offset: 1\n      });\n\n      expect(results).toHaveLength(1);\n    });\n\n    it('should filter by date range', async () => {\n      const startDate = new Date(Date.now() - 60 * 1000); // 1 minute ago\n      const endDate = new Date();\n\n      const results = await auditService.searchAuditLogs('', {\n        startDate,\n        endDate\n      });\n\n      expect(results.length).toBeGreaterThan(0);\n      results.forEach(entry => {\n        expect(entry.timestamp).toBeInstanceOf(Date);\n        expect(entry.timestamp.getTime()).toBeGreaterThanOrEqual(startDate.getTime());\n        expect(entry.timestamp.getTime()).toBeLessThanOrEqual(endDate.getTime());\n      });\n    });\n  });\n\n  describe('getAuditStatistics', () => {\n    beforeEach(async () => {\n      // Set up test data\n      await auditService.logUserAction(\n        'user1',\n        'read',\n        'Patient',\n        'pat1',\n        '192.168.1.1',\n        'Mozilla/5.0',\n        true\n      );\n      await auditService.logUserAction(\n        'user1',\n        'update',\n        'Patient',\n        'pat1',\n        '192.168.1.1',\n        'Mozilla/5.0',\n        false\n      );\n      await auditService.logUserAction(\n        'user2',\n        'read',\n        'Observation',\n        'obs1',\n        '192.168.1.2',\n        'Mozilla/5.0',\n        true\n      );\n    });\n\n    it('should generate audit statistics for daily timeframe', async () => {\n      const stats = await auditService.getAuditStatistics('daily');\n\n      expect(stats).toEqual(\n        expect.objectContaining({\n          totalEvents: 3,\n          successfulEvents: 2,\n          failedEvents: 1,\n          uniqueUsers: 2,\n          eventsByType: expect.objectContaining({\n            read: 2,\n            update: 1\n          }),\n          eventsByUser: expect.objectContaining({\n            user1: 2,\n            user2: 1\n          }),\n          topResources: expect.arrayContaining([\n            expect.objectContaining({ resource: 'Patient', count: 2 }),\n            expect.objectContaining({ resource: 'Observation', count: 1 })\n          ]),\n          securityIncidents: 0\n        })\n      );\n    });\n\n    it('should generate statistics for different timeframes', async () => {\n      const weeklyStats = await auditService.getAuditStatistics('weekly');\n      const monthlyStats = await auditService.getAuditStatistics('monthly');\n\n      expect(weeklyStats.totalEvents).toBe(3);\n      expect(monthlyStats.totalEvents).toBe(3);\n    });\n  });\n\n  describe('security event classification', () => {\n    it('should classify login actions correctly', async () => {\n      const securityEventSpy = jest.fn();\n      auditService.on('securityEvent', securityEventSpy);\n\n      await auditService.logUserAction(\n        'user123',\n        'login',\n        'User',\n        'user123',\n        '192.168.1.1',\n        'Mozilla/5.0',\n        true\n      );\n\n      expect(securityEventSpy).toHaveBeenCalledWith(\n        expect.objectContaining({\n          type: 'LOGIN_SUCCESS',\n          severity: 'LOW'\n        })\n      );\n    });\n\n    it('should classify failed login as high severity', async () => {\n      const securityEventSpy = jest.fn();\n      auditService.on('securityEvent', securityEventSpy);\n\n      await auditService.logUserAction(\n        'user123',\n        'login',\n        'User',\n        'user123',\n        '192.168.1.1',\n        'Mozilla/5.0',\n        false,\n        'Invalid credentials'\n      );\n\n      expect(securityEventSpy).toHaveBeenCalledWith(\n        expect.objectContaining({\n          type: 'LOGIN_SUCCESS',\n          severity: 'HIGH'\n        })\n      );\n    });\n\n    it('should classify password changes correctly', async () => {\n      const securityEventSpy = jest.fn();\n      auditService.on('securityEvent', securityEventSpy);\n\n      await auditService.logUserAction(\n        'user123',\n        'password_change',\n        'User',\n        'user123',\n        '192.168.1.1',\n        'Mozilla/5.0',\n        true\n      );\n\n      expect(securityEventSpy).toHaveBeenCalledWith(\n        expect.objectContaining({\n          type: 'PASSWORD_CHANGE',\n          severity: 'LOW'\n        })\n      );\n    });\n\n    it('should classify system configuration as medium severity', async () => {\n      const securityEventSpy = jest.fn();\n      auditService.on('securityEvent', securityEventSpy);\n\n      await auditService.logUserAction(\n        'user123',\n        'system_configuration',\n        'Config',\n        'config1',\n        '192.168.1.1',\n        'Mozilla/5.0',\n        true\n      );\n\n      expect(securityEventSpy).toHaveBeenCalledWith(\n        expect.objectContaining({\n          type: 'DATA_ACCESS',\n          severity: 'MEDIUM'\n        })\n      );\n    });\n  });\n\n  describe('data encryption', () => {\n    it('should identify sensitive fields correctly', () => {\n      const sensitiveData = {\n        password: 'secret123',\n        ssn: '123-45-6789',\n        email: 'test@example.com',\n        medicalRecord: 'sensitive info',\n        normalField: 'not sensitive'\n      };\n\n      // Test through logUserAction which calls the private method\n      auditService.logUserAction(\n        'user123',\n        'read',\n        'Patient',\n        'pat123',\n        '192.168.1.1',\n        'Mozilla/5.0',\n        true,\n        undefined,\n        sensitiveData\n      );\n\n      // Verify encrypted output in console.log\n      expect(console.log).toHaveBeenCalledWith(\n        'Audit Entry:',\n        expect.stringContaining('encrypted:')\n      );\n    });\n  });\n\n  describe('audit ID generation', () => {\n    it('should generate unique audit IDs', async () => {\n      const ids = new Set();\n      \n      for (let i = 0; i < 10; i++) {\n        await auditService.logUserAction(\n          'user123',\n          'read',\n          'Patient',\n          'pat123',\n          '192.168.1.1',\n          'Mozilla/5.0',\n          true\n        );\n      }\n\n      // All IDs should be unique\n      expect(ids.size).toBe(10);\n    });\n\n    it('should generate audit IDs with correct format', async () => {\n      const eventSpy = jest.fn();\n      auditService.on('auditEntry', eventSpy);\n\n      await auditService.logUserAction(\n        'user123',\n        'read',\n        'Patient',\n        'pat123',\n        '192.168.1.1',\n        'Mozilla/5.0',\n        true\n      );\n\n      const auditEntry = eventSpy.mock.calls[0][0];\n      expect(auditEntry.id).toMatch(/^audit_[a-z0-9]+_[a-f0-9]+$/);\n    });\n  });\n\n  describe('event emission', () => {\n    it('should emit auditEntry events', (done) => {\n      auditService.on('auditEntry', (entry: AuditLogEntry) => {\n        expect(entry).toBeDefined();\n        expect(entry.userId).toBe('user123');\n        done();\n      });\n\n      auditService.logUserAction(\n        'user123',\n        'read',\n        'Patient',\n        'pat123',\n        '192.168.1.1',\n        'Mozilla/5.0',\n        true\n      );\n    });\n\n    it('should emit securityEvent events', (done) => {\n      auditService.on('securityEvent', (event: SecurityEvent) => {\n        expect(event).toBeDefined();\n        expect(event.userId).toBe('user123');\n        done();\n      });\n\n      auditService.logUserAction(\n        'user123',\n        'login',\n        'User',\n        'user123',\n        '192.168.1.1',\n        'Mozilla/5.0',\n        true\n      );\n    });\n\n    it('should emit criticalSecurityEvent for critical events', (done) => {\n      auditService.on('criticalSecurityEvent', (event: SecurityEvent) => {\n        expect(event).toBeDefined();\n        expect(event.severity).toBe('CRITICAL');\n        done();\n      });\n\n      const criticalEvent: SecurityEvent = {\n        type: 'UNAUTHORIZED_ACCESS',\n        userId: 'user123',\n        severity: 'CRITICAL',\n        description: 'Critical security event',\n        metadata: {}\n      };\n\n      auditService.logSecurityEvent(criticalEvent);\n    });\n  });\n\n  describe('error handling', () => {\n    it('should handle invalid dates gracefully', async () => {\n      const invalidStartDate = new Date('invalid');\n      const endDate = new Date();\n      \n      expect(() => \n        auditService.generateHipaaComplianceReport(\n          invalidStartDate,\n          endDate,\n          'admin'\n        )\n      ).not.toThrow();\n    });\n\n    it('should handle empty search results', async () => {\n      const results = await auditService.searchAuditLogs('nonexistent');\n      expect(results).toEqual([]);\n    });\n\n    it('should handle statistics with no data', async () => {\n      const freshService = new AuditService();\n      const stats = await freshService.getAuditStatistics();\n      \n      expect(stats.totalEvents).toBe(0);\n      expect(stats.uniqueUsers).toBe(0);\n      expect(stats.eventsByType).toEqual({});\n      \n      freshService.shutdown();\n    });\n  });\n\n  describe('shutdown', () => {\n    it('should clean up event listeners on shutdown', () => {\n      const eventSpy = jest.fn();\n      auditService.on('auditEntry', eventSpy);\n      \n      expect(auditService.listenerCount('auditEntry')).toBe(1);\n      \n      auditService.shutdown();\n      \n      expect(auditService.listenerCount('auditEntry')).toBe(0);\n    });\n  });\n});"],"version":3}