da39869b6a4d53b289b6ba9e423fae39
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.medplumService = exports.MedplumService = void 0;
// Import MedplumClient only if not in test environment
let MedplumClient;
if (process.env.NODE_ENV !== 'test') {
    try {
        const medplumCore = require('@medplum/core');
        MedplumClient = medplumCore.MedplumClient;
    }
    catch (error) {
        // Mock MedplumClient for environments where Medplum isn't available
        MedplumClient = class MockMedplumClient {
            constructor(options) { }
            async startClientLogin(clientId, clientSecret) { return Promise.resolve(); }
            async readResource(resourceType, id) {
                return Promise.resolve({ resourceType, id, active: true });
            }
            async createResource(resource) {
                return Promise.resolve({ ...resource, id: `mock-${Date.now()}` });
            }
            async updateResource(resource) {
                return Promise.resolve(resource);
            }
            async deleteResource(resourceType, id) {
                return Promise.resolve();
            }
            async searchResources(resourceType, params) {
                return Promise.resolve({ resourceType: 'Bundle', type: 'searchset', entry: [] });
            }
            async executeBatch(bundle) {
                return Promise.resolve({ resourceType: 'Bundle', type: 'batch-response', entry: [] });
            }
        };
    }
}
else {
    // Mock for tests
    MedplumClient = class MockMedplumClient {
        constructor(options) { }
        async startClientLogin(clientId, clientSecret) { return Promise.resolve(); }
        async readResource(resourceType, id) {
            return Promise.resolve({ resourceType, id, active: true });
        }
        async createResource(resource) {
            return Promise.resolve({ ...resource, id: `mock-${Date.now()}` });
        }
        async updateResource(resource) {
            return Promise.resolve(resource);
        }
        async deleteResource(resourceType, id) {
            return Promise.resolve();
        }
        async searchResources(resourceType, params) {
            return Promise.resolve({ resourceType: 'Bundle', type: 'searchset', entry: [] });
        }
        async executeBatch(bundle) {
            return Promise.resolve({ resourceType: 'Bundle', type: 'batch-response', entry: [] });
        }
    };
}
const config_1 = __importDefault(require("../config"));
const logger_1 = __importDefault(require("../utils/logger"));
const error_utils_1 = require("../utils/error.utils");
/**
 * Medplum FHIR Server Integration Service
 * Handles all interactions with Medplum FHIR server including authentication,
 * resource management, search operations, and batch processing.
 */
class MedplumService {
    medplum;
    isInitialized = false;
    reconnectAttempts = 0;
    maxReconnectAttempts = 5;
    constructor() {
        this.medplum = new MedplumClient({
            baseUrl: config_1.default.medplum.selfHosted ? config_1.default.medplum.selfHostedUrl : config_1.default.medplum.baseUrl,
            clientId: config_1.default.medplum.clientId,
            fhirUrlPath: '/fhir/R4',
            tokenUrl: config_1.default.medplum.selfHosted ?
                `${config_1.default.medplum.selfHostedUrl}/oauth2/token` :
                `${config_1.default.medplum.baseUrl}oauth2/token`,
            authorizeUrl: config_1.default.medplum.selfHosted ?
                `${config_1.default.medplum.selfHostedUrl}/oauth2/authorize` :
                `${config_1.default.medplum.baseUrl}oauth2/authorize`,
        });
    }
    /**
     * Initialize Medplum connection with authentication
     */
    async initialize() {
        try {
            logger_1.default.info('Initializing Medplum FHIR server connection...');
            // Use client credentials flow for both self-hosted and SaaS
            await this.medplum.startClientLogin(config_1.default.medplum.clientId, config_1.default.medplum.clientSecret);
            // Note: Project ID is now handled via the OAuth scope or client configuration
            // The setActiveProject method has been removed in newer versions
            // Test connection with a simple query
            await this.testConnection();
            this.isInitialized = true;
            this.reconnectAttempts = 0;
            logger_1.default.info('Medplum FHIR server connection established successfully');
        }
        catch (error) {
            logger_1.default.error('Failed to initialize Medplum connection:', error);
            if (this.reconnectAttempts < this.maxReconnectAttempts) {
                this.reconnectAttempts++;
                logger_1.default.info(`Retrying connection... Attempt ${this.reconnectAttempts}/${this.maxReconnectAttempts}`);
                // Exponential backoff
                const delay = Math.pow(2, this.reconnectAttempts) * 1000;
                setTimeout(() => this.initialize(), delay);
            }
            else {
                throw new Error(`Failed to establish Medplum connection after ${this.maxReconnectAttempts} attempts`);
            }
        }
    }
    /**
     * Test the connection to ensure it's working
     */
    async testConnection() {
        try {
            const response = await this.medplum.readResource('Patient', 'test-patient-id').catch(() => null);
            logger_1.default.debug('Connection test completed successfully');
        }
        catch (error) {
            logger_1.default.warn('Connection test failed, but proceeding...');
        }
    }
    /**
     * Ensure the service is initialized before making requests
     */
    ensureInitialized() {
        if (!this.isInitialized) {
            throw new Error('MedplumService not initialized. Call initialize() first.');
        }
    }
    /**
     * Create a new FHIR resource
     */
    async createResource(resource) {
        this.ensureInitialized();
        try {
            logger_1.default.debug(`Creating ${resource.resourceType} resource`);
            const result = await this.medplum.createResource(resource);
            logger_1.default.info(`Successfully created ${resource.resourceType} with ID: ${result.id}`);
            return result;
        }
        catch (error) {
            logger_1.default.error(`Failed to create ${resource.resourceType} resource:`, error);
            throw this.handleFHIRError(error);
        }
    }
    /**
     * Read a FHIR resource by ID
     */
    async readResource(resourceType, id) {
        this.ensureInitialized();
        try {
            logger_1.default.debug(`Reading ${resourceType} resource with ID: ${id}`);
            const result = await this.medplum.readResource(resourceType, id);
            logger_1.default.debug(`Successfully retrieved ${resourceType} with ID: ${id}`);
            return result;
        }
        catch (error) {
            logger_1.default.error(`Failed to read ${resourceType} resource with ID ${id}:`, error);
            throw this.handleFHIRError(error);
        }
    }
    /**
     * Update a FHIR resource
     */
    async updateResource(resource) {
        this.ensureInitialized();
        if (!resource.id) {
            throw new Error('Resource must have an ID to be updated');
        }
        try {
            logger_1.default.debug(`Updating ${resource.resourceType} resource with ID: ${resource.id}`);
            const result = await this.medplum.updateResource(resource);
            logger_1.default.info(`Successfully updated ${resource.resourceType} with ID: ${result.id}`);
            return result;
        }
        catch (error) {
            logger_1.default.error(`Failed to update ${resource.resourceType} resource:`, error);
            throw this.handleFHIRError(error);
        }
    }
    /**
     * Delete a FHIR resource
     */
    async deleteResource(resourceType, id) {
        this.ensureInitialized();
        try {
            logger_1.default.debug(`Deleting ${resourceType} resource with ID: ${id}`);
            await this.medplum.deleteResource(resourceType, id);
            logger_1.default.info(`Successfully deleted ${resourceType} with ID: ${id}`);
        }
        catch (error) {
            logger_1.default.error(`Failed to delete ${resourceType} resource with ID ${id}:`, error);
            throw this.handleFHIRError(error);
        }
    }
    /**
     * Search for FHIR resources with proper generic constraints
     */
    async searchResources(resourceType, searchParams = {}) {
        this.ensureInitialized();
        try {
            logger_1.default.debug(`Searching ${resourceType} resources with params:`, searchParams);
            // Convert search params to format expected by searchResources
            const convertedParams = {};
            // Handle standard search parameters
            Object.entries(searchParams).forEach(([key, value]) => {
                if (value !== undefined && value !== null) {
                    convertedParams[key] = value;
                }
            });
            // Use searchResources method which returns ResourceArray with bundle
            const resourceArray = await this.medplum.searchResources(resourceType, convertedParams);
            // Extract resources from the ResourceArray structure
            const resources = Array.isArray(resourceArray) ? resourceArray :
                resourceArray.bundle?.entry?.map((entry) => entry.resource) || [];
            // Create Bundle response
            const bundle = {
                resourceType: 'Bundle',
                type: 'searchset',
                total: resources.length,
                entry: resources.map((resource) => ({
                    resource: resource,
                    fullUrl: `${resource.resourceType}/${resource.id}`
                }))
            };
            logger_1.default.debug(`Search returned ${resources.length} results for ${resourceType}`);
            return bundle;
        }
        catch (error) {
            logger_1.default.error(`Failed to search ${resourceType} resources:`, error);
            throw this.handleFHIRError(error);
        }
    }
    /**
     * Execute a batch or transaction bundle
     */
    async executeBatch(bundleRequest) {
        this.ensureInitialized();
        try {
            logger_1.default.debug(`Executing ${bundleRequest.type} bundle with ${bundleRequest.resources.length} resources`);
            const bundle = {
                resourceType: 'Bundle',
                type: bundleRequest.type,
                timestamp: bundleRequest.timestamp || new Date().toISOString(),
                entry: bundleRequest.resources.map((resource, index) => ({
                    request: {
                        method: resource.id ? 'PUT' : 'POST',
                        url: resource.id ? `${resource.resourceType}/${resource.id}` : resource.resourceType,
                    },
                    resource: resource,
                })),
            };
            const result = await this.medplum.executeBatch(bundle);
            logger_1.default.info(`Successfully executed ${bundleRequest.type} bundle`);
            return result;
        }
        catch (error) {
            logger_1.default.error(`Failed to execute batch bundle:`, error);
            throw this.handleFHIRError(error);
        }
    }
    /**
     * Get FHIR capability statement
     */
    async getCapabilityStatement() {
        this.ensureInitialized();
        try {
            logger_1.default.debug('Retrieving FHIR capability statement');
            const result = await this.medplum.get('metadata');
            logger_1.default.debug('Successfully retrieved capability statement');
            return result;
        }
        catch (error) {
            logger_1.default.error('Failed to retrieve capability statement:', error);
            throw this.handleFHIRError(error);
        }
    }
    /**
     * Execute GraphQL query
     */
    async graphql(query, variables) {
        this.ensureInitialized();
        try {
            logger_1.default.debug('Executing GraphQL query');
            const result = await this.medplum.graphql(query, variables ? JSON.stringify(variables) : undefined);
            logger_1.default.debug('GraphQL query executed successfully');
            return result;
        }
        catch (error) {
            logger_1.default.error('Failed to execute GraphQL query:', error);
            throw this.handleFHIRError(error);
        }
    }
    /**
     * Subscribe to resource changes
     */
    async createSubscription(criteria, channelType, endpoint) {
        this.ensureInitialized();
        try {
            logger_1.default.debug(`Creating subscription for criteria: ${criteria}`);
            const subscription = {
                resourceType: 'Subscription',
                status: 'requested',
                reason: 'OmniCare EMR Integration',
                criteria,
                channel: {
                    type: channelType,
                    endpoint,
                    payload: 'application/fhir+json',
                    header: endpoint ? [`Authorization: Bearer ${config_1.default.medplum.clientSecret}`] : undefined
                },
            };
            const result = await this.medplum.createResource(subscription);
            logger_1.default.info(`Successfully created subscription with ID: ${result.id}`);
            return result;
        }
        catch (error) {
            logger_1.default.error('Failed to create subscription:', error);
            throw this.handleFHIRError(error);
        }
    }
    /**
     * Validate a FHIR resource
     */
    async validateResource(resource) {
        this.ensureInitialized();
        try {
            logger_1.default.debug(`Validating ${resource.resourceType} resource`);
            const result = await this.medplum.validateResource(resource);
            logger_1.default.debug(`Validation completed for ${resource.resourceType}`);
            return result;
        }
        catch (error) {
            logger_1.default.error(`Failed to validate ${resource.resourceType} resource:`, error);
            throw this.handleFHIRError(error);
        }
    }
    /**
     * Handle FHIR errors and convert to standard format
     */
    handleFHIRError(error) {
        if ((0, error_utils_1.isFHIRError)(error)) {
            const message = (0, error_utils_1.getFHIRErrorMessage)(error);
            return new Error(`FHIR Error: ${message}`);
        }
        return (0, error_utils_1.isError)(error) ? error : new Error((0, error_utils_1.getErrorMessage)(error));
    }
    /**
     * Get health status of the Medplum service
     */
    async getHealthStatus() {
        try {
            if (!this.isInitialized) {
                return { status: 'DOWN', details: { reason: 'Not initialized' } };
            }
            // Test with a simple metadata call
            const start = Date.now();
            await this.medplum.get('metadata');
            const responseTime = Date.now() - start;
            return {
                status: 'UP',
                details: {
                    responseTime: `${responseTime}ms`,
                    baseUrl: config_1.default.medplum.baseUrl,
                    selfHosted: config_1.default.medplum.selfHosted,
                    initialized: this.isInitialized,
                },
            };
        }
        catch (error) {
            return {
                status: 'DOWN',
                details: {
                    error: (0, error_utils_1.getErrorMessage)(error),
                    reconnectAttempts: this.reconnectAttempts,
                },
            };
        }
    }
    /**
     * Cleanup and close connections
     */
    async shutdown() {
        logger_1.default.info('Shutting down Medplum service...');
        this.isInitialized = false;
        // Additional cleanup if needed
    }
}
exports.MedplumService = MedplumService;
// Export singleton instance
exports.medplumService = new MedplumService();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,