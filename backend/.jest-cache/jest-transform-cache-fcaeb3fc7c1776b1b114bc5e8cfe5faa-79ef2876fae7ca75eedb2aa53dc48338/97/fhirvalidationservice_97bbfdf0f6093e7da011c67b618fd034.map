{"file":"/Users/rodrigo/claude-projects/OmniCare/backend/src/services/integration/fhir/fhir-validation.service.ts","mappings":"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","names":[],"sources":["/Users/rodrigo/claude-projects/OmniCare/backend/src/services/integration/fhir/fhir-validation.service.ts"],"sourcesContent":["import Ajv from 'ajv';\nimport addFormats from 'ajv-formats';\nimport { ValidationResult, ValidationError, ValidationWarning } from '../types/integration.types';\nimport logger from '@/utils/logger';\nimport config from '@/config';\nimport axios from 'axios';\nimport { getErrorMessage } from '@/utils/error.utils';\n\n/**\n * FHIR R4 Validation Service\n * Provides comprehensive FHIR resource validation and compliance testing\n */\nexport class FHIRValidationService {\n  private ajv: Ajv;\n  private fhirSchemas: Map<string, any> = new Map();\n  private validationCache: Map<string, ValidationResult> = new Map();\n  private readonly cacheTimeout = 300000; // 5 minutes\n\n  constructor() {\n    this.ajv = new Ajv({\n      allErrors: true,\n      verbose: true,\n      strict: false,\n      loadSchema: this.loadSchema.bind(this)\n    });\n    addFormats(this.ajv);\n    this.initializeValidation();\n  }\n\n  /**\n   * Initialize validation service with FHIR schemas\n   */\n  private async initializeValidation(): Promise<void> {\n    try {\n      await this.loadFHIRSchemas();\n      await this.setupCustomValidators();\n      logger.info('FHIR validation service initialized successfully');\n    } catch (error) {\n      logger.error('Failed to initialize FHIR validation service:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Load FHIR R4 schemas\n   */\n  private async loadFHIRSchemas(): Promise<void> {\n    const resourceTypes = [\n      'Patient', 'Practitioner', 'Organization', 'Location', 'Device',\n      'Encounter', 'Observation', 'Condition', 'Procedure', 'DiagnosticReport',\n      'MedicationRequest', 'MedicationAdministration', 'MedicationStatement',\n      'AllergyIntolerance', 'CarePlan', 'ServiceRequest', 'Task',\n      'Communication', 'CommunicationRequest', 'Appointment', 'Schedule',\n      'Slot', 'Coverage', 'Claim', 'ExplanationOfBenefit',\n      'DocumentReference', 'Binary', 'Media', 'QuestionnaireResponse',\n      'Questionnaire', 'List', 'Group', 'Flag', 'Goal', 'RiskAssessment',\n      'Bundle', 'OperationOutcome', 'Parameters'\n    ];\n\n    for (const resourceType of resourceTypes) {\n      try {\n        const schema = await this.fetchFHIRSchema(resourceType);\n        this.fhirSchemas.set(resourceType, schema);\n        this.ajv.addSchema(schema, resourceType);\n        logger.debug(`Loaded FHIR schema for ${resourceType}`);\n      } catch (error) {\n        logger.warn(`Failed to load FHIR schema for ${resourceType}:`, error);\n      }\n    }\n  }\n\n  /**\n   * Fetch FHIR schema from HL7 FHIR specification\n   */\n  private async fetchFHIRSchema(resourceType: string): Promise<any> {\n    try {\n      const schemaUrl = `https://hl7.org/fhir/R4/${resourceType.toLowerCase()}.schema.json`;\n      const response = await axios.get(schemaUrl, {\n        timeout: 10000,\n        headers: {\n          'Accept': 'application/json'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      // Fallback to local schema if available\n      throw new Error(`Failed to fetch FHIR schema for ${resourceType}: ${error}`);\n    }\n  }\n\n  /**\n   * Load schema dynamically\n   */\n  private async loadSchema(uri: string): Promise<any> {\n    try {\n      const response = await axios.get(uri, {\n        timeout: 5000,\n        headers: {\n          'Accept': 'application/json'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      logger.warn(`Failed to load schema from ${uri}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Setup custom FHIR validators\n   */\n  private async setupCustomValidators(): Promise<void> {\n    // Custom validator for FHIR IDs\n    this.ajv.addFormat('fhir-id', {\n      type: 'string',\n      validate: (data: string) => {\n        return /^[A-Za-z0-9\\-\\.]{1,64}$/.test(data);\n      }\n    });\n\n    // Custom validator for FHIR dates\n    this.ajv.addFormat('fhir-date', {\n      type: 'string',\n      validate: (data: string) => {\n        return /^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$/.test(data);\n      }\n    });\n\n    // Custom validator for FHIR dateTime\n    this.ajv.addFormat('fhir-datetime', {\n      type: 'string',\n      validate: (data: string) => {\n        return /^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$/.test(data);\n      }\n    });\n\n    // Custom validator for FHIR URIs\n    this.ajv.addFormat('fhir-uri', {\n      type: 'string',\n      validate: (data: string) => {\n        try {\n          new URL(data);\n          return true;\n        } catch {\n          return /^[^\\s]+$/.test(data);\n        }\n      }\n    });\n  }\n\n  /**\n   * Validate FHIR resource\n   */\n  async validateResource(resource: any, resourceType?: string): Promise<ValidationResult> {\n    try {\n      const type = resourceType || resource.resourceType;\n      if (!type) {\n        return {\n          valid: false,\n          errors: [{\n            path: 'resourceType',\n            message: 'Resource type is required',\n            code: 'required',\n            severity: 'error'\n          }],\n          warnings: [],\n          validatedAt: new Date()\n        };\n      }\n\n      // Check cache first\n      const cacheKey = this.generateCacheKey(resource, type);\n      const cachedResult = this.validationCache.get(cacheKey);\n      if (cachedResult && this.isCacheValid(cachedResult)) {\n        return cachedResult;\n      }\n\n      const schema = this.fhirSchemas.get(type);\n      if (!schema) {\n        return {\n          valid: false,\n          errors: [{\n            path: 'resourceType',\n            message: `Schema not found for resource type: ${type}`,\n            code: 'schema-not-found',\n            severity: 'error'\n          }],\n          warnings: [],\n          validatedAt: new Date()\n        };\n      }\n\n      const validate = this.ajv.getSchema(type) || this.ajv.compile(schema);\n      const valid = validate(resource);\n\n      const result: ValidationResult = {\n        valid: valid as boolean,\n        errors: [],\n        warnings: [],\n        schemaVersion: '4.0.1',\n        validatedAt: new Date()\n      };\n\n      if (!valid && validate.errors) {\n        for (const error of validate.errors) {\n          const validationError: ValidationError = {\n            path: this.formatPath(error.instancePath, error.schemaPath),\n            message: error.message || 'Validation error',\n            code: error.keyword || 'validation-error',\n            severity: this.getErrorSeverity(error.keyword),\n            value: error.data\n          };\n          result.errors.push(validationError);\n        }\n      }\n\n      // Add business rule validations\n      await this.addBusinessRuleValidations(resource, type, result);\n\n      // Cache the result\n      this.validationCache.set(cacheKey, result);\n\n      logger.debug(`FHIR validation completed for ${type}`, {\n        valid: result.valid,\n        errorCount: result.errors.length,\n        warningCount: result.warnings.length\n      });\n\n      return result;\n    } catch (error) {\n      logger.error('FHIR validation failed:', error);\n      return {\n        valid: false,\n        errors: [{\n          path: 'root',\n          message: `Validation failed: ${getErrorMessage(error)}`,\n          code: 'validation-failed',\n          severity: 'error'\n        }],\n        warnings: [],\n        validatedAt: new Date()\n      };\n    }\n  }\n\n  /**\n   * Validate FHIR bundle\n   */\n  async validateBundle(bundle: any): Promise<ValidationResult> {\n    try {\n      // First validate the bundle structure\n      const bundleResult = await this.validateResource(bundle, 'Bundle');\n      \n      if (!bundleResult.valid) {\n        return bundleResult;\n      }\n\n      // Then validate each entry in the bundle\n      const allErrors: ValidationError[] = [...bundleResult.errors];\n      const allWarnings: ValidationWarning[] = [...bundleResult.warnings];\n      let allValid = bundleResult.valid;\n\n      if (bundle.entry && Array.isArray(bundle.entry)) {\n        for (let i = 0; i < bundle.entry.length; i++) {\n          const entry = bundle.entry[i];\n          if (entry.resource) {\n            const entryResult = await this.validateResource(entry.resource);\n            \n            if (!entryResult.valid) {\n              allValid = false;\n            }\n\n            // Prefix paths with entry index\n            for (const error of entryResult.errors) {\n              allErrors.push({\n                ...error,\n                path: `entry[${i}].resource.${error.path}`\n              });\n            }\n\n            for (const warning of entryResult.warnings) {\n              allWarnings.push({\n                ...warning,\n                path: `entry[${i}].resource.${warning.path}`\n              });\n            }\n          }\n        }\n      }\n\n      return {\n        valid: allValid,\n        errors: allErrors,\n        warnings: allWarnings,\n        schemaVersion: '4.0.1',\n        validatedAt: new Date()\n      };\n    } catch (error) {\n      logger.error('Bundle validation failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Add business rule validations\n   */\n  private async addBusinessRuleValidations(\n    resource: any,\n    resourceType: string,\n    result: ValidationResult\n  ): Promise<void> {\n    try {\n      switch (resourceType) {\n        case 'Patient':\n          this.validatePatientBusinessRules(resource, result);\n          break;\n        case 'Encounter':\n          this.validateEncounterBusinessRules(resource, result);\n          break;\n        case 'Observation':\n          this.validateObservationBusinessRules(resource, result);\n          break;\n        case 'MedicationRequest':\n          this.validateMedicationRequestBusinessRules(resource, result);\n          break;\n        // Add more resource-specific validations as needed\n      }\n    } catch (error) {\n      logger.warn('Business rule validation failed:', error);\n    }\n  }\n\n  /**\n   * Patient-specific business rule validations\n   */\n  private validatePatientBusinessRules(patient: any, result: ValidationResult): void {\n    // Check for required identifiers\n    if (!patient.identifier || patient.identifier.length === 0) {\n      result.warnings.push({\n        path: 'identifier',\n        message: 'Patient should have at least one identifier',\n        code: 'business-rule',\n        severity: 'warning'\n      });\n    }\n\n    // Check birth date is not in the future\n    if (patient.birthDate) {\n      const birthDate = new Date(patient.birthDate);\n      if (birthDate > new Date()) {\n        result.errors.push({\n          path: 'birthDate',\n          message: 'Birth date cannot be in the future',\n          code: 'business-rule',\n          severity: 'error'\n        });\n      }\n    }\n\n    // Check for deceased consistency\n    if (patient.deceasedBoolean === false && patient.deceasedDateTime) {\n      result.errors.push({\n        path: 'deceased',\n        message: 'Cannot have deceased date when deceased is false',\n        code: 'business-rule',\n        severity: 'error'\n      });\n    }\n  }\n\n  /**\n   * Encounter-specific business rule validations\n   */\n  private validateEncounterBusinessRules(encounter: any, result: ValidationResult): void {\n    // Check period consistency\n    if (encounter.period) {\n      if (encounter.period.start && encounter.period.end) {\n        const start = new Date(encounter.period.start);\n        const end = new Date(encounter.period.end);\n        if (start > end) {\n          result.errors.push({\n            path: 'period',\n            message: 'Encounter start time must be before end time',\n            code: 'business-rule',\n            severity: 'error'\n          });\n        }\n      }\n    }\n\n    // Check status consistency with period\n    if (encounter.status === 'finished' && encounter.period && !encounter.period.end) {\n      result.warnings.push({\n        path: 'period.end',\n        message: 'Finished encounter should have an end time',\n        code: 'business-rule',\n        severity: 'warning'\n      });\n    }\n  }\n\n  /**\n   * Observation-specific business rule validations\n   */\n  private validateObservationBusinessRules(observation: any, result: ValidationResult): void {\n    // Check for value when status is final\n    if (observation.status === 'final' && !this.hasObservationValue(observation)) {\n      result.warnings.push({\n        path: 'value',\n        message: 'Final observation should have a value',\n        code: 'business-rule',\n        severity: 'warning'\n      });\n    }\n\n    // Check effective date is not in the future\n    if (observation.effectiveDateTime) {\n      const effectiveDate = new Date(observation.effectiveDateTime);\n      if (effectiveDate > new Date()) {\n        result.warnings.push({\n          path: 'effectiveDateTime',\n          message: 'Observation effective date should not be in the future',\n          code: 'business-rule',\n          severity: 'warning'\n        });\n      }\n    }\n  }\n\n  /**\n   * MedicationRequest-specific business rule validations\n   */\n  private validateMedicationRequestBusinessRules(medicationRequest: any, result: ValidationResult): void {\n    // Check for dosage instructions when status is active\n    if (medicationRequest.status === 'active' && \n        (!medicationRequest.dosageInstruction || medicationRequest.dosageInstruction.length === 0)) {\n      result.warnings.push({\n        path: 'dosageInstruction',\n        message: 'Active medication request should have dosage instructions',\n        code: 'business-rule',\n        severity: 'warning'\n      });\n    }\n\n    // Check authored date is not in the future\n    if (medicationRequest.authoredOn) {\n      const authoredDate = new Date(medicationRequest.authoredOn);\n      if (authoredDate > new Date()) {\n        result.errors.push({\n          path: 'authoredOn',\n          message: 'Authored date cannot be in the future',\n          code: 'business-rule',\n          severity: 'error'\n        });\n      }\n    }\n  }\n\n  /**\n   * Check if observation has a value\n   */\n  private hasObservationValue(observation: any): boolean {\n    return !!(\n      observation.valueQuantity ||\n      observation.valueCodeableConcept ||\n      observation.valueString ||\n      observation.valueBoolean ||\n      observation.valueInteger ||\n      observation.valueRange ||\n      observation.valueRatio ||\n      observation.valueSampledData ||\n      observation.valueTime ||\n      observation.valueDateTime ||\n      observation.valuePeriod ||\n      observation.component\n    );\n  }\n\n  /**\n   * Format error path\n   */\n  private formatPath(instancePath: string, schemaPath: string): string {\n    return instancePath || schemaPath.replace('#/', '').replace(/\\//g, '.');\n  }\n\n  /**\n   * Get error severity based on keyword\n   */\n  private getErrorSeverity(keyword?: string): 'error' | 'fatal' {\n    const fatalKeywords = ['required', 'type', 'enum'];\n    return fatalKeywords.includes(keyword || '') ? 'fatal' : 'error';\n  }\n\n  /**\n   * Generate cache key for validation result\n   */\n  private generateCacheKey(resource: any, resourceType: string): string {\n    const resourceString = JSON.stringify(resource);\n    const hash = require('crypto').createHash('md5').update(resourceString).digest('hex');\n    return `${resourceType}:${hash}`;\n  }\n\n  /**\n   * Check if cached result is still valid\n   */\n  private isCacheValid(result: ValidationResult): boolean {\n    const now = new Date();\n    const validatedAt = new Date(result.validatedAt);\n    return (now.getTime() - validatedAt.getTime()) < this.cacheTimeout;\n  }\n\n  /**\n   * Clear validation cache\n   */\n  clearCache(): void {\n    this.validationCache.clear();\n    logger.debug('FHIR validation cache cleared');\n  }\n\n  /**\n   * Get validation statistics\n   */\n  getStatistics(): {\n    schemasLoaded: number;\n    cacheSize: number;\n    cacheHitRate: number;\n  } {\n    return {\n      schemasLoaded: this.fhirSchemas.size,\n      cacheSize: this.validationCache.size,\n      cacheHitRate: 0 // TODO: Implement cache hit rate tracking\n    };\n  }\n\n  /**\n   * Health check\n   */\n  async getHealth(): Promise<{ status: string; details: any }> {\n    try {\n      const stats = this.getStatistics();\n      return {\n        status: stats.schemasLoaded > 0 ? 'UP' : 'DOWN',\n        details: {\n          schemasLoaded: stats.schemasLoaded,\n          cacheSize: stats.cacheSize,\n          validationEngine: 'ajv',\n          fhirVersion: '4.0.1'\n        }\n      };\n    } catch (error) {\n      return {\n        status: 'DOWN',\n        details: {\n          error: getErrorMessage(error)\n        }\n      };\n    }\n  }\n}\n\n// Export singleton instance\nexport const fhirValidationService = new FHIRValidationService();"],"version":3}