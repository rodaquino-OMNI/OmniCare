{"file":"/Users/rodrigo/claude-projects/OmniCare/backend/src/services/analytics/clinical-quality-measures.service.ts","mappings":"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","names":[],"sources":["/Users/rodrigo/claude-projects/OmniCare/backend/src/services/analytics/clinical-quality-measures.service.ts"],"sourcesContent":["/**\n * Clinical Quality Measures Analytics Service\n * \n * Implements comprehensive clinical quality measures reporting and analytics\n * for regulatory compliance and quality improvement\n */\n\nimport { EventEmitter } from 'events';\n\nexport interface ClinicalQualityMeasure {\n  id: string;\n  name: string;\n  description: string;\n  category: 'Process' | 'Outcome' | 'Structure' | 'Balancing';\n  measureType: 'Proportion' | 'Ratio' | 'Continuous Variable' | 'Cohort';\n  steward: string;\n  nqfNumber?: string;\n  cmsNumber?: string;\n  version: string;\n  measurementPeriod: {\n    start: Date;\n    end: Date;\n  };\n  population: {\n    initialPopulation: number;\n    denominator: number;\n    numerator: number;\n    exclusions: number;\n    exceptions: number;\n  };\n  performanceRate: number;\n  benchmark?: number;\n  target?: number;\n  trend: 'Improving' | 'Stable' | 'Declining';\n  riskAdjusted: boolean;\n}\n\nexport interface QualityMeasureReport {\n  reportId: string;\n  facilityId: string;\n  reportingPeriod: {\n    start: Date;\n    end: Date;\n  };\n  measures: ClinicalQualityMeasure[];\n  summary: {\n    totalMeasures: number;\n    averagePerformance: number;\n    measuresAboveBenchmark: number;\n    improvementOpportunities: number;\n  };\n  recommendations: QualityRecommendation[];\n  generatedAt: Date;\n  submittedTo?: string[];\n}\n\nexport interface QualityRecommendation {\n  measureId: string;\n  priority: 'High' | 'Medium' | 'Low';\n  recommendation: string;\n  expectedImpact: string;\n  implementationTimeline: string;\n  resources: string[];\n}\n\nexport interface QualityGapAnalysis {\n  measureId: string;\n  measureName: string;\n  currentPerformance: number;\n  benchmark: number;\n  gap: number;\n  impactedPatients: number;\n  estimatedImprovement: {\n    patients: number;\n    revenueImpact: number;\n    qualityScore: number;\n  };\n  interventions: {\n    intervention: string;\n    estimatedCost: number;\n    expectedROI: number;\n  }[];\n}\n\nexport class ClinicalQualityMeasuresService extends EventEmitter {\n  private measures: Map<string, ClinicalQualityMeasure> = new Map();\n  private historicalData: Map<string, ClinicalQualityMeasure[]> = new Map();\n\n  constructor() {\n    super();\n    this.initializeCoreMeasures();\n  }\n\n  /**\n   * Calculate quality measures for a reporting period\n   */\n  async calculateQualityMeasures(\n    facilityId: string,\n    period: { start: Date; end: Date },\n    measureIds?: string[]\n  ): Promise<ClinicalQualityMeasure[]> {\n    const measuresToCalculate = measureIds ? \n      measureIds.map(id => this.measures.get(id)).filter(Boolean) :\n      Array.from(this.measures.values());\n\n    const calculatedMeasures: ClinicalQualityMeasure[] = [];\n\n    for (const measure of measuresToCalculate) {\n      if (!measure) continue;\n\n      const calculatedMeasure = await this.calculateSingleMeasure(\n        measure,\n        facilityId,\n        period\n      );\n      calculatedMeasures.push(calculatedMeasure);\n    }\n\n    // Emit event for real-time updates\n    this.emit('measures-calculated', {\n      facilityId,\n      period,\n      measures: calculatedMeasures\n    });\n\n    return calculatedMeasures;\n  }\n\n  /**\n   * Generate comprehensive quality report\n   */\n  async generateQualityReport(\n    facilityId: string,\n    period: { start: Date; end: Date }\n  ): Promise<QualityMeasureReport> {\n    const measures = await this.calculateQualityMeasures(facilityId, period);\n    \n    const summary = {\n      totalMeasures: measures.length,\n      averagePerformance: measures.reduce((sum, m) => sum + m.performanceRate, 0) / measures.length,\n      measuresAboveBenchmark: measures.filter(m => m.benchmark && m.performanceRate >= m.benchmark).length,\n      improvementOpportunities: measures.filter(m => m.benchmark && m.performanceRate < m.benchmark).length\n    };\n\n    const recommendations = await this.generateRecommendations(measures);\n\n    const report: QualityMeasureReport = {\n      reportId: `QMR-${Date.now()}`,\n      facilityId,\n      reportingPeriod: period,\n      measures,\n      summary,\n      recommendations,\n      generatedAt: new Date()\n    };\n\n    // Store historical data\n    this.storeHistoricalData(facilityId, measures);\n\n    return report;\n  }\n\n  /**\n   * Perform quality gap analysis\n   */\n  async performGapAnalysis(\n    facilityId: string,\n    measureIds: string[]\n  ): Promise<QualityGapAnalysis[]> {\n    const gapAnalyses: QualityGapAnalysis[] = [];\n\n    for (const measureId of measureIds) {\n      const measure = this.measures.get(measureId);\n      if (!measure || !measure.benchmark) continue;\n\n      const gap = measure.benchmark - measure.performanceRate;\n      if (gap <= 0) continue; // No gap\n\n      const analysis: QualityGapAnalysis = {\n        measureId,\n        measureName: measure.name,\n        currentPerformance: measure.performanceRate,\n        benchmark: measure.benchmark,\n        gap,\n        impactedPatients: Math.floor(measure.population.denominator * (gap / 100)),\n        estimatedImprovement: {\n          patients: Math.floor(measure.population.denominator * (gap / 100) * 0.7), // 70% improvement estimate\n          revenueImpact: this.calculateRevenueImpact(measure, gap),\n          qualityScore: gap * 0.8 // Quality score improvement\n        },\n        interventions: await this.suggestInterventions(measure, gap)\n      };\n\n      gapAnalyses.push(analysis);\n    }\n\n    return gapAnalyses.sort((a, b) => b.gap - a.gap); // Sort by largest gap\n  }\n\n  /**\n   * Get quality measure trends\n   */\n  async getQualityTrends(\n    facilityId: string,\n    measureId: string,\n    months: number = 12\n  ): Promise<{\n    measureId: string;\n    measureName: string;\n    data: Array<{\n      period: string;\n      performanceRate: number;\n      benchmark?: number;\n      trend: 'up' | 'down' | 'stable';\n    }>;\n    overallTrend: 'Improving' | 'Stable' | 'Declining';\n    changeRate: number;\n  }> {\n    const historical = this.historicalData.get(`${facilityId}-${measureId}`) || [];\n    const measure = this.measures.get(measureId);\n    \n    const recentData = historical.slice(-months);\n    const data = recentData.filter(item => item != null).map((item, index, filteredArray) => {\n      const previousItem = index > 0 ? filteredArray[index - 1] : null;\n      const previousRate = previousItem ? previousItem.performanceRate : item.performanceRate;\n      let trend: 'up' | 'down' | 'stable' = 'stable';\n      \n      if (item.performanceRate > previousRate * 1.02) trend = 'up';\n      else if (item.performanceRate < previousRate * 0.98) trend = 'down';\n\n      return {\n        period: `${item.measurementPeriod.start.getFullYear()}-${String(item.measurementPeriod.start.getMonth() + 1).padStart(2, '0')}`,\n        performanceRate: item.performanceRate,\n        benchmark: item.benchmark,\n        trend\n      };\n    });\n\n    // Calculate overall trend\n    const firstRate = recentData[0]?.performanceRate || 0;\n    const lastRate = recentData[recentData.length - 1]?.performanceRate || 0;\n    const changeRate = firstRate !== 0 ? ((lastRate - firstRate) / firstRate) * 100 : 0;\n    \n    let overallTrend: 'Improving' | 'Stable' | 'Declining' = 'Stable';\n    if (changeRate > 2) overallTrend = 'Improving';\n    else if (changeRate < -2) overallTrend = 'Declining';\n\n    return {\n      measureId,\n      measureName: measure?.name || 'Unknown Measure',\n      data,\n      overallTrend,\n      changeRate\n    };\n  }\n\n  /**\n   * Get real-time quality metrics dashboard\n   */\n  async getQualityDashboard(\n    facilityId: string\n  ): Promise<{\n    summary: {\n      totalMeasures: number;\n      averagePerformance: number;\n      criticalMeasures: number;\n      improvingMeasures: number;\n    };\n    alerts: Array<{\n      measureId: string;\n      measureName: string;\n      severity: 'Critical' | 'Warning' | 'Info';\n      message: string;\n      actionRequired: boolean;\n    }>;\n    topPerformers: Array<{\n      measureId: string;\n      measureName: string;\n      performanceRate: number;\n      benchmark: number;\n    }>;\n    needsAttention: Array<{\n      measureId: string;\n      measureName: string;\n      performanceRate: number;\n      benchmark: number;\n      gap: number;\n    }>;\n  }> {\n    const measures = Array.from(this.measures.values());\n    \n    const summary = {\n      totalMeasures: measures.length,\n      averagePerformance: measures.reduce((sum, m) => sum + m.performanceRate, 0) / measures.length,\n      criticalMeasures: measures.filter(m => m.benchmark && m.performanceRate < m.benchmark * 0.8).length,\n      improvingMeasures: measures.filter(m => m.trend === 'Improving').length\n    };\n\n    const alerts = measures\n      .filter(m => m.benchmark && m.performanceRate < m.benchmark * 0.9)\n      .map(measure => ({\n        measureId: measure.id,\n        measureName: measure.name,\n        severity: (measure.performanceRate < measure.benchmark! * 0.8) ? 'Critical' as const : 'Warning' as const,\n        message: `Performance (${measure.performanceRate.toFixed(1)}%) below benchmark (${measure.benchmark!.toFixed(1)}%)`,\n        actionRequired: measure.performanceRate < measure.benchmark! * 0.8\n      }));\n\n    const topPerformers = measures\n      .filter(m => m.benchmark && m.performanceRate >= m.benchmark)\n      .sort((a, b) => (b.performanceRate - (b.benchmark || 0)) - (a.performanceRate - (a.benchmark || 0)))\n      .slice(0, 5)\n      .map(m => ({\n        measureId: m.id,\n        measureName: m.name,\n        performanceRate: m.performanceRate,\n        benchmark: m.benchmark || 0\n      }));\n\n    const needsAttention = measures\n      .filter(m => m.benchmark && m.performanceRate < m.benchmark)\n      .sort((a, b) => ((a.benchmark || 0) - a.performanceRate) - ((b.benchmark || 0) - b.performanceRate))\n      .slice(0, 10)\n      .map(m => ({\n        measureId: m.id,\n        measureName: m.name,\n        performanceRate: m.performanceRate,\n        benchmark: m.benchmark || 0,\n        gap: (m.benchmark || 0) - m.performanceRate\n      }));\n\n    return {\n      summary,\n      alerts,\n      topPerformers,\n      needsAttention\n    };\n  }\n\n  private async calculateSingleMeasure(\n    measure: ClinicalQualityMeasure,\n    facilityId: string,\n    period: { start: Date; end: Date }\n  ): Promise<ClinicalQualityMeasure> {\n    // Mock calculation - in real implementation, this would query the database\n    const mockPopulation = {\n      initialPopulation: Math.floor(Math.random() * 1000) + 500,\n      denominator: Math.floor(Math.random() * 800) + 400,\n      numerator: Math.floor(Math.random() * 600) + 200,\n      exclusions: Math.floor(Math.random() * 50),\n      exceptions: Math.floor(Math.random() * 30)\n    };\n\n    const performanceRate = (mockPopulation.numerator / mockPopulation.denominator) * 100;\n\n    return {\n      ...measure,\n      measurementPeriod: period,\n      population: mockPopulation,\n      performanceRate,\n      trend: this.calculateTrend(measure.id, performanceRate)\n    };\n  }\n\n  private calculateTrend(measureId: string, currentRate: number): 'Improving' | 'Stable' | 'Declining' {\n    // Mock trend calculation - would use historical data in real implementation\n    const random = Math.random();\n    if (random < 0.4) return 'Improving';\n    if (random < 0.8) return 'Stable';\n    return 'Declining';\n  }\n\n  private async generateRecommendations(measures: ClinicalQualityMeasure[]): Promise<QualityRecommendation[]> {\n    const recommendations: QualityRecommendation[] = [];\n\n    for (const measure of measures) {\n      if (measure.benchmark && measure.performanceRate < measure.benchmark) {\n        const gap = measure.benchmark - measure.performanceRate;\n        \n        recommendations.push({\n          measureId: measure.id,\n          priority: gap > 20 ? 'High' : gap > 10 ? 'Medium' : 'Low',\n          recommendation: this.getRecommendationText(measure),\n          expectedImpact: `Improve performance by ${Math.min(gap * 0.7, 15).toFixed(1)} percentage points`,\n          implementationTimeline: gap > 20 ? '3-6 months' : '1-3 months',\n          resources: this.getRequiredResources(measure)\n        });\n      }\n    }\n\n    return recommendations.sort((a, b) => {\n      const priorityOrder = { 'High': 3, 'Medium': 2, 'Low': 1 };\n      return priorityOrder[b.priority] - priorityOrder[a.priority];\n    });\n  }\n\n  private calculateRevenueImpact(measure: ClinicalQualityMeasure, gap: number): number {\n    // Mock revenue impact calculation\n    const baseRevenuePerPatient = 150;\n    const impactedPatients = Math.floor(measure.population.denominator * (gap / 100));\n    return impactedPatients * baseRevenuePerPatient * 0.1; // 10% revenue impact\n  }\n\n  private async suggestInterventions(measure: ClinicalQualityMeasure, gap: number): Promise<QualityGapAnalysis['interventions']> {\n    const interventions: QualityGapAnalysis['interventions'] = [];\n\n    if (measure.category === 'Process') {\n      interventions.push({\n        intervention: 'Implement clinical decision support alerts',\n        estimatedCost: 5000,\n        expectedROI: 3.5\n      });\n      interventions.push({\n        intervention: 'Staff training and education program',\n        estimatedCost: 2500,\n        expectedROI: 2.8\n      });\n    }\n\n    if (measure.category === 'Outcome') {\n      interventions.push({\n        intervention: 'Patient engagement and education initiative',\n        estimatedCost: 7500,\n        expectedROI: 4.2\n      });\n      interventions.push({\n        intervention: 'Care coordination improvement',\n        estimatedCost: 4000,\n        expectedROI: 3.1\n      });\n    }\n\n    return interventions;\n  }\n\n  private getRecommendationText(measure: ClinicalQualityMeasure): string {\n    const recommendations = {\n      'Process': 'Implement workflow improvements and clinical decision support',\n      'Outcome': 'Focus on patient engagement and care coordination',\n      'Structure': 'Evaluate and upgrade infrastructure and resources',\n      'Balancing': 'Monitor for unintended consequences while improving primary measure'\n    };\n\n    return recommendations[measure.category] || 'Review current processes and implement best practices';\n  }\n\n  private getRequiredResources(measure: ClinicalQualityMeasure): string[] {\n    const resources = {\n      'Process': ['Clinical staff training', 'EHR configuration', 'Workflow documentation'],\n      'Outcome': ['Patient education materials', 'Care coordination tools', 'Follow-up protocols'],\n      'Structure': ['Technology upgrades', 'Staff recruitment', 'Equipment procurement'],\n      'Balancing': ['Monitoring tools', 'Data analysis capabilities', 'Quality assurance protocols']\n    };\n\n    return resources[measure.category] || ['General quality improvement resources'];\n  }\n\n  private storeHistoricalData(facilityId: string, measures: ClinicalQualityMeasure[]): void {\n    for (const measure of measures) {\n      const key = `${facilityId}-${measure.id}`;\n      const historical = this.historicalData.get(key) || [];\n      historical.push(measure);\n      \n      // Keep last 24 months of data\n      if (historical.length > 24) {\n        historical.shift();\n      }\n      \n      this.historicalData.set(key, historical);\n    }\n  }\n\n  private initializeCoreMeasures(): void {\n    // HEDIS Measures\n    this.measures.set('HEDIS-CDC-HbA1c', {\n      id: 'HEDIS-CDC-HbA1c',\n      name: 'Comprehensive Diabetes Care: HbA1c Control (<8.0%)',\n      description: 'Percentage of members 18-75 years of age with diabetes whose HbA1c is <8.0%',\n      category: 'Outcome',\n      measureType: 'Proportion',\n      steward: 'NCQA',\n      nqfNumber: '0575',\n      version: '2023',\n      measurementPeriod: { start: new Date(), end: new Date() },\n      population: { initialPopulation: 0, denominator: 0, numerator: 0, exclusions: 0, exceptions: 0 },\n      performanceRate: 0,\n      benchmark: 75,\n      target: 80,\n      trend: 'Stable',\n      riskAdjusted: false\n    });\n\n    this.measures.set('HEDIS-BCS', {\n      id: 'HEDIS-BCS',\n      name: 'Breast Cancer Screening',\n      description: 'Percentage of women 50-74 years who had mammography to screen for breast cancer',\n      category: 'Process',\n      measureType: 'Proportion',\n      steward: 'NCQA',\n      nqfNumber: '2372',\n      version: '2023',\n      measurementPeriod: { start: new Date(), end: new Date() },\n      population: { initialPopulation: 0, denominator: 0, numerator: 0, exclusions: 0, exceptions: 0 },\n      performanceRate: 0,\n      benchmark: 80,\n      target: 85,\n      trend: 'Stable',\n      riskAdjusted: false\n    });\n\n    // CMS Quality Measures\n    this.measures.set('CMS165', {\n      id: 'CMS165',\n      name: 'Controlling High Blood Pressure',\n      description: 'Percentage of patients 18-85 years with hypertension whose blood pressure was adequately controlled',\n      category: 'Outcome',\n      measureType: 'Proportion',\n      steward: 'CMS',\n      cmsNumber: 'CMS165v10',\n      version: '10.0.0',\n      measurementPeriod: { start: new Date(), end: new Date() },\n      population: { initialPopulation: 0, denominator: 0, numerator: 0, exclusions: 0, exceptions: 0 },\n      performanceRate: 0,\n      benchmark: 70,\n      target: 75,\n      trend: 'Stable',\n      riskAdjusted: false\n    });\n\n    this.measures.set('CMS122', {\n      id: 'CMS122',\n      name: 'Diabetes: Hemoglobin A1c (HbA1c) Poor Control (>9%)',\n      description: 'Percentage of patients 18-75 years with diabetes who had HbA1c > 9.0% during the measurement period',\n      category: 'Outcome',\n      measureType: 'Proportion',\n      steward: 'CMS',\n      cmsNumber: 'CMS122v10',\n      version: '10.0.0',\n      measurementPeriod: { start: new Date(), end: new Date() },\n      population: { initialPopulation: 0, denominator: 0, numerator: 0, exclusions: 0, exceptions: 0 },\n      performanceRate: 0,\n      benchmark: 15, // Lower is better for this measure\n      target: 10,\n      trend: 'Stable',\n      riskAdjusted: false\n    });\n  }\n}"],"version":3}