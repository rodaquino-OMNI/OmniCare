{"file":"/Users/rodrigo/claude-projects/OmniCare/backend/tests/global-setup.ts","mappings":"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","names":[],"sources":["/Users/rodrigo/claude-projects/OmniCare/backend/tests/global-setup.ts"],"sourcesContent":["/**\n * Global Test Setup for Backend\n * Runs once before all tests start\n */\n\nimport logger from '../src/utils/logger';\n\nexport default async function globalSetup(): Promise<void> {\n  console.log('üöÄ Starting backend test environment setup...');\n\n  try {\n    // Set test environment\n    process.env.NODE_ENV = 'test';\n    process.env.SKIP_DB_SETUP = 'true';\n    process.env.SKIP_CACHE_SETUP = 'true';\n\n    // Setup test data\n    await setupTestData();\n\n    // Initialize external service mocks\n    await setupExternalServiceMocks();\n\n    console.log('‚úÖ Backend test environment setup completed successfully');\n  } catch (error) {\n    console.error('‚ùå Failed to setup backend test environment:', error);\n    // Don't exit process - let tests handle missing dependencies gracefully\n  }\n}\n\nasync function setupTestData(): Promise<void> {\n  try {\n    console.log('üìù Setting up test data...');\n\n    // Create test users, roles, and permissions\n    const testData = {\n      users: [\n        {\n          id: 'test-user-doctor',\n          email: 'doctor@test.com',\n          role: 'physician',\n          active: true,\n        },\n        {\n          id: 'test-user-nurse',\n          email: 'nurse@test.com',\n          role: 'nurse',\n          active: true,\n        },\n        {\n          id: 'test-user-admin',\n          email: 'admin@test.com',\n          role: 'admin',\n          active: true,\n        },\n      ],\n      patients: [\n        {\n          id: 'test-patient-1',\n          name: 'John Doe',\n          mrn: 'MRN001',\n          active: true,\n        },\n        {\n          id: 'test-patient-2',\n          name: 'Jane Smith',\n          mrn: 'MRN002',\n          active: true,\n        },\n      ],\n    };\n\n    // Store test data globally for tests to use\n    (global as any).testData = testData;\n\n    console.log('‚úÖ Test data setup completed');\n  } catch (error) {\n    console.error('‚ùå Failed to setup test data:', error);\n  }\n}\n\nasync function setupExternalServiceMocks(): Promise<void> {\n  try {\n    console.log('üé≠ Setting up external service mocks...');\n\n    // Set mock external services flag\n    process.env.MOCK_EXTERNAL_SERVICES = 'true';\n\n    // Setup mock endpoints\n    const externalMocks = {\n      medplum: {\n        baseUrl: 'http://localhost:8080',\n        endpoints: ['/auth/login', '/fhir/R4/Patient', '/fhir/R4/Encounter', '/fhir/R4/Observation'],\n      },\n      smartFhir: {\n        authorizationServer: 'http://localhost:8081',\n        tokenEndpoint: '/oauth2/token',\n        userInfoEndpoint: '/oauth2/userinfo',\n      },\n      directTrust: {\n        endpoint: 'http://localhost:8082/direct',\n        certificate: 'test-certificate',\n      },\n    };\n\n    (global as any).externalMocks = externalMocks;\n\n    console.log('‚úÖ External service mocks setup completed');\n  } catch (error) {\n    console.error('‚ùå Failed to setup external service mocks:', error);\n  }\n}"],"version":3}