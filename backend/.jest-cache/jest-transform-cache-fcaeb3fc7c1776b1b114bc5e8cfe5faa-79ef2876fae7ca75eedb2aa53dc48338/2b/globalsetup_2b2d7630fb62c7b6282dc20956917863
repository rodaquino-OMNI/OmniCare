6b7e54cd7cc5c965c0061102ecf96900
"use strict";
/**
 * Global Test Setup for Backend
 * Runs once before all tests start
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = globalSetup;
async function globalSetup() {
    console.log('üöÄ Starting backend test environment setup...');
    try {
        // Set test environment
        process.env.NODE_ENV = 'test';
        process.env.SKIP_DB_SETUP = 'true';
        process.env.SKIP_CACHE_SETUP = 'true';
        // Setup test data
        await setupTestData();
        // Initialize external service mocks
        await setupExternalServiceMocks();
        console.log('‚úÖ Backend test environment setup completed successfully');
    }
    catch (error) {
        console.error('‚ùå Failed to setup backend test environment:', error);
        // Don't exit process - let tests handle missing dependencies gracefully
    }
}
async function setupTestData() {
    try {
        console.log('üìù Setting up test data...');
        // Create test users, roles, and permissions
        const testData = {
            users: [
                {
                    id: 'test-user-doctor',
                    email: 'doctor@test.com',
                    role: 'physician',
                    active: true,
                },
                {
                    id: 'test-user-nurse',
                    email: 'nurse@test.com',
                    role: 'nurse',
                    active: true,
                },
                {
                    id: 'test-user-admin',
                    email: 'admin@test.com',
                    role: 'admin',
                    active: true,
                },
            ],
            patients: [
                {
                    id: 'test-patient-1',
                    name: 'John Doe',
                    mrn: 'MRN001',
                    active: true,
                },
                {
                    id: 'test-patient-2',
                    name: 'Jane Smith',
                    mrn: 'MRN002',
                    active: true,
                },
            ],
        };
        // Store test data globally for tests to use
        global.testData = testData;
        console.log('‚úÖ Test data setup completed');
    }
    catch (error) {
        console.error('‚ùå Failed to setup test data:', error);
    }
}
async function setupExternalServiceMocks() {
    try {
        console.log('üé≠ Setting up external service mocks...');
        // Set mock external services flag
        process.env.MOCK_EXTERNAL_SERVICES = 'true';
        // Setup mock endpoints
        const externalMocks = {
            medplum: {
                baseUrl: 'http://localhost:8080',
                endpoints: ['/auth/login', '/fhir/R4/Patient', '/fhir/R4/Encounter', '/fhir/R4/Observation'],
            },
            smartFhir: {
                authorizationServer: 'http://localhost:8081',
                tokenEndpoint: '/oauth2/token',
                userInfoEndpoint: '/oauth2/userinfo',
            },
            directTrust: {
                endpoint: 'http://localhost:8082/direct',
                certificate: 'test-certificate',
            },
        };
        global.externalMocks = externalMocks;
        console.log('‚úÖ External service mocks setup completed');
    }
    catch (error) {
        console.error('‚ùå Failed to setup external service mocks:', error);
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3JvZHJpZ28vY2xhdWRlLXByb2plY3RzL09tbmlDYXJlL2JhY2tlbmQvdGVzdHMvZ2xvYmFsLXNldHVwLnRzIiwibWFwcGluZ3MiOiI7QUFBQTs7O0dBR0c7O0FBSUgsOEJBb0JDO0FBcEJjLEtBQUssVUFBVSxXQUFXO0lBQ3ZDLE9BQU8sQ0FBQyxHQUFHLENBQUMsK0NBQStDLENBQUMsQ0FBQztJQUU3RCxJQUFJLENBQUM7UUFDSCx1QkFBdUI7UUFDdkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDO1FBQzlCLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxHQUFHLE1BQU0sQ0FBQztRQUNuQyxPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQixHQUFHLE1BQU0sQ0FBQztRQUV0QyxrQkFBa0I7UUFDbEIsTUFBTSxhQUFhLEVBQUUsQ0FBQztRQUV0QixvQ0FBb0M7UUFDcEMsTUFBTSx5QkFBeUIsRUFBRSxDQUFDO1FBRWxDLE9BQU8sQ0FBQyxHQUFHLENBQUMseURBQXlELENBQUMsQ0FBQztJQUN6RSxDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNmLE9BQU8sQ0FBQyxLQUFLLENBQUMsNkNBQTZDLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDcEUsd0VBQXdFO0lBQzFFLENBQUM7QUFDSCxDQUFDO0FBRUQsS0FBSyxVQUFVLGFBQWE7SUFDMUIsSUFBSSxDQUFDO1FBQ0gsT0FBTyxDQUFDLEdBQUcsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO1FBRTFDLDRDQUE0QztRQUM1QyxNQUFNLFFBQVEsR0FBRztZQUNmLEtBQUssRUFBRTtnQkFDTDtvQkFDRSxFQUFFLEVBQUUsa0JBQWtCO29CQUN0QixLQUFLLEVBQUUsaUJBQWlCO29CQUN4QixJQUFJLEVBQUUsV0FBVztvQkFDakIsTUFBTSxFQUFFLElBQUk7aUJBQ2I7Z0JBQ0Q7b0JBQ0UsRUFBRSxFQUFFLGlCQUFpQjtvQkFDckIsS0FBSyxFQUFFLGdCQUFnQjtvQkFDdkIsSUFBSSxFQUFFLE9BQU87b0JBQ2IsTUFBTSxFQUFFLElBQUk7aUJBQ2I7Z0JBQ0Q7b0JBQ0UsRUFBRSxFQUFFLGlCQUFpQjtvQkFDckIsS0FBSyxFQUFFLGdCQUFnQjtvQkFDdkIsSUFBSSxFQUFFLE9BQU87b0JBQ2IsTUFBTSxFQUFFLElBQUk7aUJBQ2I7YUFDRjtZQUNELFFBQVEsRUFBRTtnQkFDUjtvQkFDRSxFQUFFLEVBQUUsZ0JBQWdCO29CQUNwQixJQUFJLEVBQUUsVUFBVTtvQkFDaEIsR0FBRyxFQUFFLFFBQVE7b0JBQ2IsTUFBTSxFQUFFLElBQUk7aUJBQ2I7Z0JBQ0Q7b0JBQ0UsRUFBRSxFQUFFLGdCQUFnQjtvQkFDcEIsSUFBSSxFQUFFLFlBQVk7b0JBQ2xCLEdBQUcsRUFBRSxRQUFRO29CQUNiLE1BQU0sRUFBRSxJQUFJO2lCQUNiO2FBQ0Y7U0FDRixDQUFDO1FBRUYsNENBQTRDO1FBQzNDLE1BQWMsQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBRXBDLE9BQU8sQ0FBQyxHQUFHLENBQUMsNkJBQTZCLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNmLE9BQU8sQ0FBQyxLQUFLLENBQUMsOEJBQThCLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDdkQsQ0FBQztBQUNILENBQUM7QUFFRCxLQUFLLFVBQVUseUJBQXlCO0lBQ3RDLElBQUksQ0FBQztRQUNILE9BQU8sQ0FBQyxHQUFHLENBQUMseUNBQXlDLENBQUMsQ0FBQztRQUV2RCxrQ0FBa0M7UUFDbEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsR0FBRyxNQUFNLENBQUM7UUFFNUMsdUJBQXVCO1FBQ3ZCLE1BQU0sYUFBYSxHQUFHO1lBQ3BCLE9BQU8sRUFBRTtnQkFDUCxPQUFPLEVBQUUsdUJBQXVCO2dCQUNoQyxTQUFTLEVBQUUsQ0FBQyxhQUFhLEVBQUUsa0JBQWtCLEVBQUUsb0JBQW9CLEVBQUUsc0JBQXNCLENBQUM7YUFDN0Y7WUFDRCxTQUFTLEVBQUU7Z0JBQ1QsbUJBQW1CLEVBQUUsdUJBQXVCO2dCQUM1QyxhQUFhLEVBQUUsZUFBZTtnQkFDOUIsZ0JBQWdCLEVBQUUsa0JBQWtCO2FBQ3JDO1lBQ0QsV0FBVyxFQUFFO2dCQUNYLFFBQVEsRUFBRSw4QkFBOEI7Z0JBQ3hDLFdBQVcsRUFBRSxrQkFBa0I7YUFDaEM7U0FDRixDQUFDO1FBRUQsTUFBYyxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7UUFFOUMsT0FBTyxDQUFDLEdBQUcsQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2YsT0FBTyxDQUFDLEtBQUssQ0FBQywyQ0FBMkMsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNwRSxDQUFDO0FBQ0gsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvcm9kcmlnby9jbGF1ZGUtcHJvamVjdHMvT21uaUNhcmUvYmFja2VuZC90ZXN0cy9nbG9iYWwtc2V0dXAudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBHbG9iYWwgVGVzdCBTZXR1cCBmb3IgQmFja2VuZFxuICogUnVucyBvbmNlIGJlZm9yZSBhbGwgdGVzdHMgc3RhcnRcbiAqL1xuXG5pbXBvcnQgbG9nZ2VyIGZyb20gJy4uL3NyYy91dGlscy9sb2dnZXInO1xuXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBnbG9iYWxTZXR1cCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgY29uc29sZS5sb2coJ/CfmoAgU3RhcnRpbmcgYmFja2VuZCB0ZXN0IGVudmlyb25tZW50IHNldHVwLi4uJyk7XG5cbiAgdHJ5IHtcbiAgICAvLyBTZXQgdGVzdCBlbnZpcm9ubWVudFxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WID0gJ3Rlc3QnO1xuICAgIHByb2Nlc3MuZW52LlNLSVBfREJfU0VUVVAgPSAndHJ1ZSc7XG4gICAgcHJvY2Vzcy5lbnYuU0tJUF9DQUNIRV9TRVRVUCA9ICd0cnVlJztcblxuICAgIC8vIFNldHVwIHRlc3QgZGF0YVxuICAgIGF3YWl0IHNldHVwVGVzdERhdGEoKTtcblxuICAgIC8vIEluaXRpYWxpemUgZXh0ZXJuYWwgc2VydmljZSBtb2Nrc1xuICAgIGF3YWl0IHNldHVwRXh0ZXJuYWxTZXJ2aWNlTW9ja3MoKTtcblxuICAgIGNvbnNvbGUubG9nKCfinIUgQmFja2VuZCB0ZXN0IGVudmlyb25tZW50IHNldHVwIGNvbXBsZXRlZCBzdWNjZXNzZnVsbHknKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCfinYwgRmFpbGVkIHRvIHNldHVwIGJhY2tlbmQgdGVzdCBlbnZpcm9ubWVudDonLCBlcnJvcik7XG4gICAgLy8gRG9uJ3QgZXhpdCBwcm9jZXNzIC0gbGV0IHRlc3RzIGhhbmRsZSBtaXNzaW5nIGRlcGVuZGVuY2llcyBncmFjZWZ1bGx5XG4gIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gc2V0dXBUZXN0RGF0YSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgdHJ5IHtcbiAgICBjb25zb2xlLmxvZygn8J+TnSBTZXR0aW5nIHVwIHRlc3QgZGF0YS4uLicpO1xuXG4gICAgLy8gQ3JlYXRlIHRlc3QgdXNlcnMsIHJvbGVzLCBhbmQgcGVybWlzc2lvbnNcbiAgICBjb25zdCB0ZXN0RGF0YSA9IHtcbiAgICAgIHVzZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBpZDogJ3Rlc3QtdXNlci1kb2N0b3InLFxuICAgICAgICAgIGVtYWlsOiAnZG9jdG9yQHRlc3QuY29tJyxcbiAgICAgICAgICByb2xlOiAncGh5c2ljaWFuJyxcbiAgICAgICAgICBhY3RpdmU6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBpZDogJ3Rlc3QtdXNlci1udXJzZScsXG4gICAgICAgICAgZW1haWw6ICdudXJzZUB0ZXN0LmNvbScsXG4gICAgICAgICAgcm9sZTogJ251cnNlJyxcbiAgICAgICAgICBhY3RpdmU6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBpZDogJ3Rlc3QtdXNlci1hZG1pbicsXG4gICAgICAgICAgZW1haWw6ICdhZG1pbkB0ZXN0LmNvbScsXG4gICAgICAgICAgcm9sZTogJ2FkbWluJyxcbiAgICAgICAgICBhY3RpdmU6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgcGF0aWVudHM6IFtcbiAgICAgICAge1xuICAgICAgICAgIGlkOiAndGVzdC1wYXRpZW50LTEnLFxuICAgICAgICAgIG5hbWU6ICdKb2huIERvZScsXG4gICAgICAgICAgbXJuOiAnTVJOMDAxJyxcbiAgICAgICAgICBhY3RpdmU6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBpZDogJ3Rlc3QtcGF0aWVudC0yJyxcbiAgICAgICAgICBuYW1lOiAnSmFuZSBTbWl0aCcsXG4gICAgICAgICAgbXJuOiAnTVJOMDAyJyxcbiAgICAgICAgICBhY3RpdmU6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH07XG5cbiAgICAvLyBTdG9yZSB0ZXN0IGRhdGEgZ2xvYmFsbHkgZm9yIHRlc3RzIHRvIHVzZVxuICAgIChnbG9iYWwgYXMgYW55KS50ZXN0RGF0YSA9IHRlc3REYXRhO1xuXG4gICAgY29uc29sZS5sb2coJ+KchSBUZXN0IGRhdGEgc2V0dXAgY29tcGxldGVkJyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcign4p2MIEZhaWxlZCB0byBzZXR1cCB0ZXN0IGRhdGE6JywgZXJyb3IpO1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHNldHVwRXh0ZXJuYWxTZXJ2aWNlTW9ja3MoKTogUHJvbWlzZTx2b2lkPiB7XG4gIHRyeSB7XG4gICAgY29uc29sZS5sb2coJ/Cfjq0gU2V0dGluZyB1cCBleHRlcm5hbCBzZXJ2aWNlIG1vY2tzLi4uJyk7XG5cbiAgICAvLyBTZXQgbW9jayBleHRlcm5hbCBzZXJ2aWNlcyBmbGFnXG4gICAgcHJvY2Vzcy5lbnYuTU9DS19FWFRFUk5BTF9TRVJWSUNFUyA9ICd0cnVlJztcblxuICAgIC8vIFNldHVwIG1vY2sgZW5kcG9pbnRzXG4gICAgY29uc3QgZXh0ZXJuYWxNb2NrcyA9IHtcbiAgICAgIG1lZHBsdW06IHtcbiAgICAgICAgYmFzZVVybDogJ2h0dHA6Ly9sb2NhbGhvc3Q6ODA4MCcsXG4gICAgICAgIGVuZHBvaW50czogWycvYXV0aC9sb2dpbicsICcvZmhpci9SNC9QYXRpZW50JywgJy9maGlyL1I0L0VuY291bnRlcicsICcvZmhpci9SNC9PYnNlcnZhdGlvbiddLFxuICAgICAgfSxcbiAgICAgIHNtYXJ0Rmhpcjoge1xuICAgICAgICBhdXRob3JpemF0aW9uU2VydmVyOiAnaHR0cDovL2xvY2FsaG9zdDo4MDgxJyxcbiAgICAgICAgdG9rZW5FbmRwb2ludDogJy9vYXV0aDIvdG9rZW4nLFxuICAgICAgICB1c2VySW5mb0VuZHBvaW50OiAnL29hdXRoMi91c2VyaW5mbycsXG4gICAgICB9LFxuICAgICAgZGlyZWN0VHJ1c3Q6IHtcbiAgICAgICAgZW5kcG9pbnQ6ICdodHRwOi8vbG9jYWxob3N0OjgwODIvZGlyZWN0JyxcbiAgICAgICAgY2VydGlmaWNhdGU6ICd0ZXN0LWNlcnRpZmljYXRlJyxcbiAgICAgIH0sXG4gICAgfTtcblxuICAgIChnbG9iYWwgYXMgYW55KS5leHRlcm5hbE1vY2tzID0gZXh0ZXJuYWxNb2NrcztcblxuICAgIGNvbnNvbGUubG9nKCfinIUgRXh0ZXJuYWwgc2VydmljZSBtb2NrcyBzZXR1cCBjb21wbGV0ZWQnKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCfinYwgRmFpbGVkIHRvIHNldHVwIGV4dGVybmFsIHNlcnZpY2UgbW9ja3M6JywgZXJyb3IpO1xuICB9XG59Il0sInZlcnNpb24iOjN9