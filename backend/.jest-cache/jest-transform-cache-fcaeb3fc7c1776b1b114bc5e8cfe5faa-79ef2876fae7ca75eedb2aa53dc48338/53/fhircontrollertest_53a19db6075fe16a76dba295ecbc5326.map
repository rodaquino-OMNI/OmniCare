{"file":"/Users/rodrigo/claude-projects/OmniCare/backend/tests/unit/controllers/fhir.controller.test.ts","mappings":"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","names":[],"sources":["/Users/rodrigo/claude-projects/OmniCare/backend/tests/unit/controllers/fhir.controller.test.ts"],"sourcesContent":["import { Request, Response } from 'express';\nimport { fhirController } from '../../../src/controllers/fhir.controller';\nimport { fhirResourcesService } from '../../../src/services/fhir-resources.service';\nimport { fhirValidationService } from '../../../src/services/integration/fhir/fhir-validation.service';\nimport { fhirTransformationService } from '../../../src/services/fhir-transformation.service';\nimport { Patient, Encounter, Observation, Bundle } from '@medplum/fhirtypes';\nimport logger from '../../../src/utils/logger';\n\n// Mock services\njest.mock('../../../src/services/fhir-resources.service');\njest.mock('../../../src/services/integration/fhir/fhir-validation.service');\njest.mock('../../../src/services/fhir-transformation.service');\njest.mock('../../../src/utils/logger');\n\ndescribe('FHIR Controller', () => {\n  let mockRequest: Partial<Request>;\n  let mockResponse: Partial<Response>;\n  let mockNext: jest.Mock;\n\n  const mockFhirResourcesService = fhirResourcesService as jest.Mocked<typeof fhirResourcesService>;\n  const mockFhirValidationService = fhirValidationService as jest.Mocked<typeof fhirValidationService>;\n  const mockFhirTransformationService = fhirTransformationService as jest.Mocked<typeof fhirTransformationService>;\n\n  beforeEach(() => {\n    mockRequest = {\n      params: {},\n      query: {},\n      body: {},\n      headers: {\n        'content-type': 'application/fhir+json',\n        'accept': 'application/fhir+json'\n      },\n      user: {\n        id: 'test-user-1',\n        role: 'physician',\n        permissions: ['fhir:read', 'fhir:write']\n      }\n    };\n\n    mockResponse = {\n      status: jest.fn().mockReturnThis(),\n      json: jest.fn().mockReturnThis(),\n      send: jest.fn().mockReturnThis(),\n      set: jest.fn().mockReturnThis()\n    };\n\n    mockNext = jest.fn();\n\n    jest.clearAllMocks();\n  });\n\n  describe('Patient Operations', () => {\n    describe('POST /fhir/Patient', () => {\n      it('should create a patient successfully', async () => {\n        const patientData: Patient = {\n          resourceType: 'Patient',\n          name: [{ given: ['John'], family: 'Doe' }],\n          gender: 'male',\n          birthDate: '1990-01-01'\n        };\n\n        const createdPatient: Patient = {\n          ...patientData,\n          id: 'patient-123'\n        };\n\n        mockRequest.body = patientData;\n\n        mockFhirValidationService.validateResource.mockResolvedValue({\n          valid: true,\n          errors: [],\n          warnings: []\n        });\n\n        mockFhirResourcesService.createPatient.mockResolvedValue(createdPatient);\n\n        await fhirController.createPatient(\n          mockRequest as Request,\n          mockResponse as Response,\n          mockNext\n        );\n\n        expect(mockFhirValidationService.validateResource).toHaveBeenCalledWith(patientData);\n        expect(mockFhirResourcesService.createPatient).toHaveBeenCalledWith(patientData);\n        expect(mockResponse.status).toHaveBeenCalledWith(201);\n        expect(mockResponse.json).toHaveBeenCalledWith(createdPatient);\n        expect(mockResponse.set).toHaveBeenCalledWith('Location', '/fhir/Patient/patient-123');\n      });\n\n      it('should return validation errors for invalid patient data', async () => {\n        const invalidPatient = {\n          resourceType: 'Patient',\n          birthDate: '2030-01-01' // Future birth date\n        };\n\n        mockRequest.body = invalidPatient;\n\n        mockFhirValidationService.validateResource.mockResolvedValue({\n          valid: false,\n          errors: [\n            {\n              path: 'Patient.birthDate',\n              message: 'Birth date cannot be in the future',\n              severity: 'error',\n              code: 'invalid-value'\n            }\n          ],\n          warnings: []\n        });\n\n        await fhirController.createPatient(\n          mockRequest as Request,\n          mockResponse as Response,\n          mockNext\n        );\n\n        expect(mockResponse.status).toHaveBeenCalledWith(400);\n        expect(mockResponse.json).toHaveBeenCalledWith({\n          resourceType: 'OperationOutcome',\n          issue: [\n            {\n              severity: 'error',\n              code: 'invalid',\n              diagnostics: 'Birth date cannot be in the future',\n              location: ['Patient.birthDate']\n            }\n          ]\n        });\n      });\n\n      it('should handle resource creation errors', async () => {\n        const patientData: Patient = {\n          resourceType: 'Patient',\n          name: [{ given: ['John'], family: 'Doe' }]\n        };\n\n        mockRequest.body = patientData;\n\n        mockFhirValidationService.validateResource.mockResolvedValue({\n          valid: true,\n          errors: [],\n          warnings: []\n        });\n\n        const createError = new Error('Database connection failed');\n        mockFhirResourcesService.createPatient.mockRejectedValue(createError);\n\n        await fhirController.createPatient(\n          mockRequest as Request,\n          mockResponse as Response,\n          mockNext\n        );\n\n        expect(mockNext).toHaveBeenCalledWith(createError);\n      });\n    });\n\n    describe('GET /fhir/Patient/:id', () => {\n      it('should retrieve a patient by ID', async () => {\n        const patient: Patient = {\n          resourceType: 'Patient',\n          id: 'patient-123',\n          name: [{ given: ['John'], family: 'Doe' }],\n          gender: 'male'\n        };\n\n        mockRequest.params = { id: 'patient-123' };\n\n        mockFhirResourcesService.getPatient.mockResolvedValue(patient);\n\n        await fhirController.getPatient(\n          mockRequest as Request,\n          mockResponse as Response,\n          mockNext\n        );\n\n        expect(mockFhirResourcesService.getPatient).toHaveBeenCalledWith('patient-123');\n        expect(mockResponse.status).toHaveBeenCalledWith(200);\n        expect(mockResponse.json).toHaveBeenCalledWith(patient);\n      });\n\n      it('should return 404 for non-existent patient', async () => {\n        mockRequest.params = { id: 'non-existent' };\n\n        const notFoundError = new Error('Patient not found');\n        notFoundError.name = 'NotFoundError';\n        mockFhirResourcesService.getPatient.mockRejectedValue(notFoundError);\n\n        await fhirController.getPatient(\n          mockRequest as Request,\n          mockResponse as Response,\n          mockNext\n        );\n\n        expect(mockResponse.status).toHaveBeenCalledWith(404);\n        expect(mockResponse.json).toHaveBeenCalledWith({\n          resourceType: 'OperationOutcome',\n          issue: [\n            {\n              severity: 'error',\n              code: 'not-found',\n              diagnostics: 'Patient with ID non-existent not found'\n            }\n          ]\n        });\n      });\n    });\n\n    describe('PUT /fhir/Patient/:id', () => {\n      it('should update a patient successfully', async () => {\n        const updatedPatient: Patient = {\n          resourceType: 'Patient',\n          id: 'patient-123',\n          name: [{ given: ['John', 'Updated'], family: 'Doe' }],\n          gender: 'male'\n        };\n\n        mockRequest.params = { id: 'patient-123' };\n        mockRequest.body = updatedPatient;\n\n        mockFhirValidationService.validateResource.mockResolvedValue({\n          valid: true,\n          errors: [],\n          warnings: []\n        });\n\n        mockFhirResourcesService.updatePatient.mockResolvedValue(updatedPatient);\n\n        await fhirController.updatePatient(\n          mockRequest as Request,\n          mockResponse as Response,\n          mockNext\n        );\n\n        expect(mockFhirValidationService.validateResource).toHaveBeenCalledWith(updatedPatient);\n        expect(mockFhirResourcesService.updatePatient).toHaveBeenCalledWith(updatedPatient);\n        expect(mockResponse.status).toHaveBeenCalledWith(200);\n        expect(mockResponse.json).toHaveBeenCalledWith(updatedPatient);\n      });\n    });\n\n    describe('GET /fhir/Patient', () => {\n      it('should search patients with parameters', async () => {\n        const searchResults: Bundle<Patient> = {\n          resourceType: 'Bundle',\n          type: 'searchset',\n          total: 1,\n          entry: [\n            {\n              resource: {\n                resourceType: 'Patient',\n                id: 'patient-123',\n                name: [{ given: ['John'], family: 'Doe' }]\n              }\n            }\n          ]\n        };\n\n        mockRequest.query = {\n          family: 'Doe',\n          given: 'John',\n          _count: '10'\n        };\n\n        mockFhirResourcesService.searchPatients.mockResolvedValue(searchResults);\n\n        await fhirController.searchPatients(\n          mockRequest as Request,\n          mockResponse as Response,\n          mockNext\n        );\n\n        expect(mockFhirResourcesService.searchPatients).toHaveBeenCalledWith({\n          family: 'Doe',\n          given: 'John',\n          _count: 10\n        });\n        expect(mockResponse.status).toHaveBeenCalledWith(200);\n        expect(mockResponse.json).toHaveBeenCalledWith(searchResults);\n      });\n\n      it('should handle invalid search parameters', async () => {\n        mockRequest.query = {\n          _count: 'invalid-number'\n        };\n\n        await fhirController.searchPatients(\n          mockRequest as Request,\n          mockResponse as Response,\n          mockNext\n        );\n\n        expect(mockResponse.status).toHaveBeenCalledWith(400);\n        expect(mockResponse.json).toHaveBeenCalledWith({\n          resourceType: 'OperationOutcome',\n          issue: [\n            {\n              severity: 'error',\n              code: 'invalid',\n              diagnostics: 'Invalid search parameter: _count must be a number'\n            }\n          ]\n        });\n      });\n    });\n  });\n\n  describe('Encounter Operations', () => {\n    describe('POST /fhir/Encounter', () => {\n      it('should create an encounter successfully', async () => {\n        const encounterData: Encounter = {\n          resourceType: 'Encounter',\n          status: 'planned',\n          class: {\n            system: 'http://terminology.hl7.org/CodeSystem/v3-ActCode',\n            code: 'AMB'\n          },\n          subject: { reference: 'Patient/patient-123' }\n        };\n\n        const createdEncounter: Encounter = {\n          ...encounterData,\n          id: 'encounter-456'\n        };\n\n        mockRequest.body = encounterData;\n\n        mockFhirValidationService.validateResource.mockResolvedValue({\n          valid: true,\n          errors: [],\n          warnings: []\n        });\n\n        mockFhirResourcesService.createEncounter.mockResolvedValue(createdEncounter);\n\n        await fhirController.createEncounter(\n          mockRequest as Request,\n          mockResponse as Response,\n          mockNext\n        );\n\n        expect(mockFhirResourcesService.createEncounter).toHaveBeenCalledWith(encounterData);\n        expect(mockResponse.status).toHaveBeenCalledWith(201);\n        expect(mockResponse.json).toHaveBeenCalledWith(createdEncounter);\n      });\n    });\n  });\n\n  describe('Observation Operations', () => {\n    describe('POST /fhir/Observation', () => {\n      it('should create an observation successfully', async () => {\n        const observationData: Observation = {\n          resourceType: 'Observation',\n          status: 'final',\n          category: [{\n            coding: [{\n              system: 'http://terminology.hl7.org/CodeSystem/observation-category',\n              code: 'vital-signs'\n            }]\n          }],\n          code: {\n            coding: [{\n              system: 'http://loinc.org',\n              code: '8310-5',\n              display: 'Body temperature'\n            }]\n          },\n          subject: { reference: 'Patient/patient-123' },\n          valueQuantity: {\n            value: 98.6,\n            unit: '°F'\n          }\n        };\n\n        const createdObservation: Observation = {\n          ...observationData,\n          id: 'observation-789'\n        };\n\n        mockRequest.body = observationData;\n\n        mockFhirValidationService.validateResource.mockResolvedValue({\n          valid: true,\n          errors: [],\n          warnings: []\n        });\n\n        mockFhirResourcesService.createObservation.mockResolvedValue(createdObservation);\n\n        await fhirController.createObservation(\n          mockRequest as Request,\n          mockResponse as Response,\n          mockNext\n        );\n\n        expect(mockFhirResourcesService.createObservation).toHaveBeenCalledWith(observationData);\n        expect(mockResponse.status).toHaveBeenCalledWith(201);\n        expect(mockResponse.json).toHaveBeenCalledWith(createdObservation);\n      });\n    });\n\n    describe('POST /fhir/Patient/:id/vitals', () => {\n      it('should create vital signs observations', async () => {\n        const vitalsData = {\n          temperature: 98.6,\n          bloodPressureSystolic: 120,\n          bloodPressureDiastolic: 80,\n          heartRate: 72\n        };\n\n        const createdObservations: Observation[] = [\n          {\n            resourceType: 'Observation',\n            id: 'obs-temp',\n            status: 'final',\n            code: { coding: [{ code: '8310-5' }] },\n            subject: { reference: 'Patient/patient-123' },\n            valueQuantity: { value: 98.6, unit: '°F' }\n          }\n        ];\n\n        mockRequest.params = { id: 'patient-123' };\n        mockRequest.body = vitalsData;\n\n        mockFhirResourcesService.createVitalSigns.mockResolvedValue(createdObservations);\n\n        await fhirController.createVitalSigns(\n          mockRequest as Request,\n          mockResponse as Response,\n          mockNext\n        );\n\n        expect(mockFhirResourcesService.createVitalSigns).toHaveBeenCalledWith(\n          'patient-123',\n          undefined,\n          vitalsData\n        );\n        expect(mockResponse.status).toHaveBeenCalledWith(201);\n        expect(mockResponse.json).toHaveBeenCalledWith({\n          resourceType: 'Bundle',\n          type: 'transaction-response',\n          entry: createdObservations.map(obs => ({\n            resource: obs,\n            response: {\n              status: '201',\n              location: `/fhir/Observation/${obs.id}`\n            }\n          }))\n        });\n      });\n    });\n  });\n\n  describe('Bundle Operations', () => {\n    describe('POST /fhir/Bundle', () => {\n      it('should process a transaction bundle', async () => {\n        const transactionBundle: Bundle = {\n          resourceType: 'Bundle',\n          type: 'transaction',\n          entry: [\n            {\n              request: {\n                method: 'POST',\n                url: 'Patient'\n              },\n              resource: {\n                resourceType: 'Patient',\n                name: [{ given: ['Jane'], family: 'Smith' }]\n              }\n            }\n          ]\n        };\n\n        const responseBundle: Bundle = {\n          resourceType: 'Bundle',\n          type: 'transaction-response',\n          entry: [\n            {\n              response: {\n                status: '201',\n                location: 'Patient/patient-456'\n              },\n              resource: {\n                resourceType: 'Patient',\n                id: 'patient-456',\n                name: [{ given: ['Jane'], family: 'Smith' }]\n              }\n            }\n          ]\n        };\n\n        mockRequest.body = transactionBundle;\n\n        mockFhirValidationService.validateBundle.mockResolvedValue({\n          valid: true,\n          errors: [],\n          warnings: []\n        });\n\n        mockFhirResourcesService.processBundle.mockResolvedValue(responseBundle);\n\n        await fhirController.processBundle(\n          mockRequest as Request,\n          mockResponse as Response,\n          mockNext\n        );\n\n        expect(mockFhirValidationService.validateBundle).toHaveBeenCalledWith(transactionBundle);\n        expect(mockFhirResourcesService.processBundle).toHaveBeenCalledWith(transactionBundle);\n        expect(mockResponse.status).toHaveBeenCalledWith(200);\n        expect(mockResponse.json).toHaveBeenCalledWith(responseBundle);\n      });\n    });\n  });\n\n  describe('Validation Operations', () => {\n    describe('POST /fhir/$validate', () => {\n      it('should validate a FHIR resource', async () => {\n        const resourceToValidate: Patient = {\n          resourceType: 'Patient',\n          name: [{ given: ['Test'], family: 'Patient' }]\n        };\n\n        const validationResult = {\n          valid: true,\n          errors: [],\n          warnings: []\n        };\n\n        mockRequest.body = resourceToValidate;\n\n        mockFhirValidationService.validateResource.mockResolvedValue(validationResult);\n\n        await fhirController.validateResource(\n          mockRequest as Request,\n          mockResponse as Response,\n          mockNext\n        );\n\n        expect(mockFhirValidationService.validateResource).toHaveBeenCalledWith(resourceToValidate);\n        expect(mockResponse.status).toHaveBeenCalledWith(200);\n        expect(mockResponse.json).toHaveBeenCalledWith({\n          resourceType: 'OperationOutcome',\n          issue: [\n            {\n              severity: 'information',\n              code: 'informational',\n              diagnostics: 'Resource is valid'\n            }\n          ]\n        });\n      });\n\n      it('should return validation errors', async () => {\n        const invalidResource = {\n          resourceType: 'Patient',\n          birthDate: 'invalid-date'\n        };\n\n        const validationResult = {\n          valid: false,\n          errors: [\n            {\n              path: 'Patient.birthDate',\n              message: 'Invalid date format',\n              severity: 'error' as const,\n              code: 'invalid-format'\n            }\n          ],\n          warnings: []\n        };\n\n        mockRequest.body = invalidResource;\n\n        mockFhirValidationService.validateResource.mockResolvedValue(validationResult);\n\n        await fhirController.validateResource(\n          mockRequest as Request,\n          mockResponse as Response,\n          mockNext\n        );\n\n        expect(mockResponse.status).toHaveBeenCalledWith(400);\n        expect(mockResponse.json).toHaveBeenCalledWith({\n          resourceType: 'OperationOutcome',\n          issue: [\n            {\n              severity: 'error',\n              code: 'invalid',\n              diagnostics: 'Invalid date format',\n              location: ['Patient.birthDate']\n            }\n          ]\n        });\n      });\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle unsupported content type', async () => {\n      mockRequest.headers = {\n        'content-type': 'application/xml'\n      };\n\n      await fhirController.createPatient(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      expect(mockResponse.status).toHaveBeenCalledWith(415);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        resourceType: 'OperationOutcome',\n        issue: [\n          {\n            severity: 'error',\n            code: 'not-supported',\n            diagnostics: 'Unsupported content type. Expected application/fhir+json'\n          }\n        ]\n      });\n    });\n\n    it('should handle malformed JSON', async () => {\n      const malformedError = new SyntaxError('Unexpected token');\n      mockNext.mockImplementation((err) => {\n        expect(err).toBeInstanceOf(SyntaxError);\n      });\n\n      // Simulate malformed JSON by directly calling next with error\n      await fhirController.createPatient(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      // This would be handled by Express error middleware\n    });\n\n    it('should handle missing resource type', async () => {\n      mockRequest.body = {\n        name: [{ given: ['Test'] }]\n        // Missing resourceType\n      };\n\n      await fhirController.createPatient(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      expect(mockResponse.status).toHaveBeenCalledWith(400);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        resourceType: 'OperationOutcome',\n        issue: [\n          {\n            severity: 'error',\n            code: 'required',\n            diagnostics: 'resourceType is required'\n          }\n        ]\n      });\n    });\n  });\n\n  describe('Authorization', () => {\n    it('should check user permissions for resource access', async () => {\n      mockRequest.user = {\n        id: 'test-user-1',\n        role: 'nurse',\n        permissions: ['patient:read'] // No write permission\n      };\n\n      const patientData: Patient = {\n        resourceType: 'Patient',\n        name: [{ given: ['Test'] }]\n      };\n\n      mockRequest.body = patientData;\n\n      await fhirController.createPatient(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      expect(mockResponse.status).toHaveBeenCalledWith(403);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        resourceType: 'OperationOutcome',\n        issue: [\n          {\n            severity: 'error',\n            code: 'forbidden',\n            diagnostics: 'Insufficient permissions to create Patient resource'\n          }\n        ]\n      });\n    });\n\n    it('should allow authorized operations', async () => {\n      mockRequest.user = {\n        id: 'test-user-1',\n        role: 'physician',\n        permissions: ['fhir:read', 'fhir:write', 'patient:write']\n      };\n\n      const patient: Patient = {\n        resourceType: 'Patient',\n        id: 'patient-123',\n        name: [{ given: ['John'], family: 'Doe' }]\n      };\n\n      mockRequest.params = { id: 'patient-123' };\n\n      mockFhirResourcesService.getPatient.mockResolvedValue(patient);\n\n      await fhirController.getPatient(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      expect(mockFhirResourcesService.getPatient).toHaveBeenCalledWith('patient-123');\n      expect(mockResponse.status).toHaveBeenCalledWith(200);\n    });\n  });\n});"],"version":3}