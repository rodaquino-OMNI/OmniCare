ea89c109be1635ee8573df3a48ee8727
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Mock services
jest.mock('../../../src/services/fhir-resources.service');
jest.mock('../../../src/services/integration/fhir/fhir-validation.service');
jest.mock('../../../src/services/fhir-transformation.service');
jest.mock('../../../src/utils/logger');
const fhir_controller_1 = require("../../../src/controllers/fhir.controller");
const fhir_resources_service_1 = require("../../../src/services/fhir-resources.service");
const fhir_validation_service_1 = require("../../../src/services/integration/fhir/fhir-validation.service");
const fhir_transformation_service_1 = require("../../../src/services/fhir-transformation.service");
describe('FHIR Controller', () => {
    let mockRequest;
    let mockResponse;
    let mockNext;
    const mockFhirResourcesService = fhir_resources_service_1.fhirResourcesService;
    const mockFhirValidationService = fhir_validation_service_1.fhirValidationService;
    const mockFhirTransformationService = fhir_transformation_service_1.fhirTransformationService;
    beforeEach(() => {
        mockRequest = {
            params: {},
            query: {},
            body: {},
            headers: {
                'content-type': 'application/fhir+json',
                'accept': 'application/fhir+json'
            },
            user: {
                id: 'test-user-1',
                role: 'physician',
                permissions: ['fhir:read', 'fhir:write']
            }
        };
        mockResponse = {
            status: jest.fn().mockReturnThis(),
            json: jest.fn().mockReturnThis(),
            send: jest.fn().mockReturnThis(),
            set: jest.fn().mockReturnThis()
        };
        mockNext = jest.fn();
        jest.clearAllMocks();
    });
    describe('Patient Operations', () => {
        describe('POST /fhir/Patient', () => {
            it('should create a patient successfully', async () => {
                const patientData = {
                    resourceType: 'Patient',
                    name: [{ given: ['John'], family: 'Doe' }],
                    gender: 'male',
                    birthDate: '1990-01-01'
                };
                const createdPatient = {
                    ...patientData,
                    id: 'patient-123'
                };
                mockRequest.body = patientData;
                mockFhirValidationService.validateResource.mockResolvedValue({
                    valid: true,
                    errors: [],
                    warnings: []
                });
                mockFhirResourcesService.createPatient.mockResolvedValue(createdPatient);
                await fhir_controller_1.fhirController.createPatient(mockRequest, mockResponse, mockNext);
                expect(mockFhirValidationService.validateResource).toHaveBeenCalledWith(patientData);
                expect(mockFhirResourcesService.createPatient).toHaveBeenCalledWith(patientData);
                expect(mockResponse.status).toHaveBeenCalledWith(201);
                expect(mockResponse.json).toHaveBeenCalledWith(createdPatient);
                expect(mockResponse.set).toHaveBeenCalledWith('Location', '/fhir/Patient/patient-123');
            });
            it('should return validation errors for invalid patient data', async () => {
                const invalidPatient = {
                    resourceType: 'Patient',
                    birthDate: '2030-01-01' // Future birth date
                };
                mockRequest.body = invalidPatient;
                mockFhirValidationService.validateResource.mockResolvedValue({
                    valid: false,
                    errors: [
                        {
                            path: 'Patient.birthDate',
                            message: 'Birth date cannot be in the future',
                            severity: 'error',
                            code: 'invalid-value'
                        }
                    ],
                    warnings: []
                });
                await fhir_controller_1.fhirController.createPatient(mockRequest, mockResponse, mockNext);
                expect(mockResponse.status).toHaveBeenCalledWith(400);
                expect(mockResponse.json).toHaveBeenCalledWith({
                    resourceType: 'OperationOutcome',
                    issue: [
                        {
                            severity: 'error',
                            code: 'invalid',
                            diagnostics: 'Birth date cannot be in the future',
                            location: ['Patient.birthDate']
                        }
                    ]
                });
            });
            it('should handle resource creation errors', async () => {
                const patientData = {
                    resourceType: 'Patient',
                    name: [{ given: ['John'], family: 'Doe' }]
                };
                mockRequest.body = patientData;
                mockFhirValidationService.validateResource.mockResolvedValue({
                    valid: true,
                    errors: [],
                    warnings: []
                });
                const createError = new Error('Database connection failed');
                mockFhirResourcesService.createPatient.mockRejectedValue(createError);
                await fhir_controller_1.fhirController.createPatient(mockRequest, mockResponse, mockNext);
                expect(mockNext).toHaveBeenCalledWith(createError);
            });
        });
        describe('GET /fhir/Patient/:id', () => {
            it('should retrieve a patient by ID', async () => {
                const patient = {
                    resourceType: 'Patient',
                    id: 'patient-123',
                    name: [{ given: ['John'], family: 'Doe' }],
                    gender: 'male'
                };
                mockRequest.params = { id: 'patient-123' };
                mockFhirResourcesService.getPatient.mockResolvedValue(patient);
                await fhir_controller_1.fhirController.getPatient(mockRequest, mockResponse, mockNext);
                expect(mockFhirResourcesService.getPatient).toHaveBeenCalledWith('patient-123');
                expect(mockResponse.status).toHaveBeenCalledWith(200);
                expect(mockResponse.json).toHaveBeenCalledWith(patient);
            });
            it('should return 404 for non-existent patient', async () => {
                mockRequest.params = { id: 'non-existent' };
                const notFoundError = new Error('Patient not found');
                notFoundError.name = 'NotFoundError';
                mockFhirResourcesService.getPatient.mockRejectedValue(notFoundError);
                await fhir_controller_1.fhirController.getPatient(mockRequest, mockResponse, mockNext);
                expect(mockResponse.status).toHaveBeenCalledWith(404);
                expect(mockResponse.json).toHaveBeenCalledWith({
                    resourceType: 'OperationOutcome',
                    issue: [
                        {
                            severity: 'error',
                            code: 'not-found',
                            diagnostics: 'Patient with ID non-existent not found'
                        }
                    ]
                });
            });
        });
        describe('PUT /fhir/Patient/:id', () => {
            it('should update a patient successfully', async () => {
                const updatedPatient = {
                    resourceType: 'Patient',
                    id: 'patient-123',
                    name: [{ given: ['John', 'Updated'], family: 'Doe' }],
                    gender: 'male'
                };
                mockRequest.params = { id: 'patient-123' };
                mockRequest.body = updatedPatient;
                mockFhirValidationService.validateResource.mockResolvedValue({
                    valid: true,
                    errors: [],
                    warnings: []
                });
                mockFhirResourcesService.updatePatient.mockResolvedValue(updatedPatient);
                await fhir_controller_1.fhirController.updatePatient(mockRequest, mockResponse, mockNext);
                expect(mockFhirValidationService.validateResource).toHaveBeenCalledWith(updatedPatient);
                expect(mockFhirResourcesService.updatePatient).toHaveBeenCalledWith(updatedPatient);
                expect(mockResponse.status).toHaveBeenCalledWith(200);
                expect(mockResponse.json).toHaveBeenCalledWith(updatedPatient);
            });
        });
        describe('GET /fhir/Patient', () => {
            it('should search patients with parameters', async () => {
                const searchResults = {
                    resourceType: 'Bundle',
                    type: 'searchset',
                    total: 1,
                    entry: [
                        {
                            resource: {
                                resourceType: 'Patient',
                                id: 'patient-123',
                                name: [{ given: ['John'], family: 'Doe' }]
                            }
                        }
                    ]
                };
                mockRequest.query = {
                    family: 'Doe',
                    given: 'John',
                    _count: '10'
                };
                mockFhirResourcesService.searchPatients.mockResolvedValue(searchResults);
                await fhir_controller_1.fhirController.searchPatients(mockRequest, mockResponse, mockNext);
                expect(mockFhirResourcesService.searchPatients).toHaveBeenCalledWith({
                    family: 'Doe',
                    given: 'John',
                    _count: 10
                });
                expect(mockResponse.status).toHaveBeenCalledWith(200);
                expect(mockResponse.json).toHaveBeenCalledWith(searchResults);
            });
            it('should handle invalid search parameters', async () => {
                mockRequest.query = {
                    _count: 'invalid-number'
                };
                await fhir_controller_1.fhirController.searchPatients(mockRequest, mockResponse, mockNext);
                expect(mockResponse.status).toHaveBeenCalledWith(400);
                expect(mockResponse.json).toHaveBeenCalledWith({
                    resourceType: 'OperationOutcome',
                    issue: [
                        {
                            severity: 'error',
                            code: 'invalid',
                            diagnostics: 'Invalid search parameter: _count must be a number'
                        }
                    ]
                });
            });
        });
    });
    describe('Encounter Operations', () => {
        describe('POST /fhir/Encounter', () => {
            it('should create an encounter successfully', async () => {
                const encounterData = {
                    resourceType: 'Encounter',
                    status: 'planned',
                    class: {
                        system: 'http://terminology.hl7.org/CodeSystem/v3-ActCode',
                        code: 'AMB'
                    },
                    subject: { reference: 'Patient/patient-123' }
                };
                const createdEncounter = {
                    ...encounterData,
                    id: 'encounter-456'
                };
                mockRequest.body = encounterData;
                mockFhirValidationService.validateResource.mockResolvedValue({
                    valid: true,
                    errors: [],
                    warnings: []
                });
                mockFhirResourcesService.createEncounter.mockResolvedValue(createdEncounter);
                await fhir_controller_1.fhirController.createEncounter(mockRequest, mockResponse, mockNext);
                expect(mockFhirResourcesService.createEncounter).toHaveBeenCalledWith(encounterData);
                expect(mockResponse.status).toHaveBeenCalledWith(201);
                expect(mockResponse.json).toHaveBeenCalledWith(createdEncounter);
            });
        });
    });
    describe('Observation Operations', () => {
        describe('POST /fhir/Observation', () => {
            it('should create an observation successfully', async () => {
                const observationData = {
                    resourceType: 'Observation',
                    status: 'final',
                    category: [{
                            coding: [{
                                    system: 'http://terminology.hl7.org/CodeSystem/observation-category',
                                    code: 'vital-signs'
                                }]
                        }],
                    code: {
                        coding: [{
                                system: 'http://loinc.org',
                                code: '8310-5',
                                display: 'Body temperature'
                            }]
                    },
                    subject: { reference: 'Patient/patient-123' },
                    valueQuantity: {
                        value: 98.6,
                        unit: '°F'
                    }
                };
                const createdObservation = {
                    ...observationData,
                    id: 'observation-789'
                };
                mockRequest.body = observationData;
                mockFhirValidationService.validateResource.mockResolvedValue({
                    valid: true,
                    errors: [],
                    warnings: []
                });
                mockFhirResourcesService.createObservation.mockResolvedValue(createdObservation);
                await fhir_controller_1.fhirController.createObservation(mockRequest, mockResponse, mockNext);
                expect(mockFhirResourcesService.createObservation).toHaveBeenCalledWith(observationData);
                expect(mockResponse.status).toHaveBeenCalledWith(201);
                expect(mockResponse.json).toHaveBeenCalledWith(createdObservation);
            });
        });
        describe('POST /fhir/Patient/:id/vitals', () => {
            it('should create vital signs observations', async () => {
                const vitalsData = {
                    temperature: 98.6,
                    bloodPressureSystolic: 120,
                    bloodPressureDiastolic: 80,
                    heartRate: 72
                };
                const createdObservations = [
                    {
                        resourceType: 'Observation',
                        id: 'obs-temp',
                        status: 'final',
                        code: { coding: [{ code: '8310-5' }] },
                        subject: { reference: 'Patient/patient-123' },
                        valueQuantity: { value: 98.6, unit: '°F' }
                    }
                ];
                mockRequest.params = { id: 'patient-123' };
                mockRequest.body = vitalsData;
                mockFhirResourcesService.createVitalSigns.mockResolvedValue(createdObservations);
                await fhir_controller_1.fhirController.createVitalSigns(mockRequest, mockResponse, mockNext);
                expect(mockFhirResourcesService.createVitalSigns).toHaveBeenCalledWith('patient-123', undefined, vitalsData);
                expect(mockResponse.status).toHaveBeenCalledWith(201);
                expect(mockResponse.json).toHaveBeenCalledWith({
                    resourceType: 'Bundle',
                    type: 'transaction-response',
                    entry: createdObservations.map(obs => ({
                        resource: obs,
                        response: {
                            status: '201',
                            location: `/fhir/Observation/${obs.id}`
                        }
                    }))
                });
            });
        });
    });
    describe('Bundle Operations', () => {
        describe('POST /fhir/Bundle', () => {
            it('should process a transaction bundle', async () => {
                const transactionBundle = {
                    resourceType: 'Bundle',
                    type: 'transaction',
                    entry: [
                        {
                            request: {
                                method: 'POST',
                                url: 'Patient'
                            },
                            resource: {
                                resourceType: 'Patient',
                                name: [{ given: ['Jane'], family: 'Smith' }]
                            }
                        }
                    ]
                };
                const responseBundle = {
                    resourceType: 'Bundle',
                    type: 'transaction-response',
                    entry: [
                        {
                            response: {
                                status: '201',
                                location: 'Patient/patient-456'
                            },
                            resource: {
                                resourceType: 'Patient',
                                id: 'patient-456',
                                name: [{ given: ['Jane'], family: 'Smith' }]
                            }
                        }
                    ]
                };
                mockRequest.body = transactionBundle;
                mockFhirValidationService.validateBundle.mockResolvedValue({
                    valid: true,
                    errors: [],
                    warnings: []
                });
                mockFhirResourcesService.processBundle.mockResolvedValue(responseBundle);
                await fhir_controller_1.fhirController.processBundle(mockRequest, mockResponse, mockNext);
                expect(mockFhirValidationService.validateBundle).toHaveBeenCalledWith(transactionBundle);
                expect(mockFhirResourcesService.processBundle).toHaveBeenCalledWith(transactionBundle);
                expect(mockResponse.status).toHaveBeenCalledWith(200);
                expect(mockResponse.json).toHaveBeenCalledWith(responseBundle);
            });
        });
    });
    describe('Validation Operations', () => {
        describe('POST /fhir/$validate', () => {
            it('should validate a FHIR resource', async () => {
                const resourceToValidate = {
                    resourceType: 'Patient',
                    name: [{ given: ['Test'], family: 'Patient' }]
                };
                const validationResult = {
                    valid: true,
                    errors: [],
                    warnings: []
                };
                mockRequest.body = resourceToValidate;
                mockFhirValidationService.validateResource.mockResolvedValue(validationResult);
                await fhir_controller_1.fhirController.validateResource(mockRequest, mockResponse, mockNext);
                expect(mockFhirValidationService.validateResource).toHaveBeenCalledWith(resourceToValidate);
                expect(mockResponse.status).toHaveBeenCalledWith(200);
                expect(mockResponse.json).toHaveBeenCalledWith({
                    resourceType: 'OperationOutcome',
                    issue: [
                        {
                            severity: 'information',
                            code: 'informational',
                            diagnostics: 'Resource is valid'
                        }
                    ]
                });
            });
            it('should return validation errors', async () => {
                const invalidResource = {
                    resourceType: 'Patient',
                    birthDate: 'invalid-date'
                };
                const validationResult = {
                    valid: false,
                    errors: [
                        {
                            path: 'Patient.birthDate',
                            message: 'Invalid date format',
                            severity: 'error',
                            code: 'invalid-format'
                        }
                    ],
                    warnings: []
                };
                mockRequest.body = invalidResource;
                mockFhirValidationService.validateResource.mockResolvedValue(validationResult);
                await fhir_controller_1.fhirController.validateResource(mockRequest, mockResponse, mockNext);
                expect(mockResponse.status).toHaveBeenCalledWith(400);
                expect(mockResponse.json).toHaveBeenCalledWith({
                    resourceType: 'OperationOutcome',
                    issue: [
                        {
                            severity: 'error',
                            code: 'invalid',
                            diagnostics: 'Invalid date format',
                            location: ['Patient.birthDate']
                        }
                    ]
                });
            });
        });
    });
    describe('Error Handling', () => {
        it('should handle unsupported content type', async () => {
            mockRequest.headers = {
                'content-type': 'application/xml'
            };
            await fhir_controller_1.fhirController.createPatient(mockRequest, mockResponse, mockNext);
            expect(mockResponse.status).toHaveBeenCalledWith(415);
            expect(mockResponse.json).toHaveBeenCalledWith({
                resourceType: 'OperationOutcome',
                issue: [
                    {
                        severity: 'error',
                        code: 'not-supported',
                        diagnostics: 'Unsupported content type. Expected application/fhir+json'
                    }
                ]
            });
        });
        it('should handle malformed JSON', async () => {
            const malformedError = new SyntaxError('Unexpected token');
            mockNext.mockImplementation((err) => {
                expect(err).toBeInstanceOf(SyntaxError);
            });
            // Simulate malformed JSON by directly calling next with error
            await fhir_controller_1.fhirController.createPatient(mockRequest, mockResponse, mockNext);
            // This would be handled by Express error middleware
        });
        it('should handle missing resource type', async () => {
            mockRequest.body = {
                name: [{ given: ['Test'] }]
                // Missing resourceType
            };
            await fhir_controller_1.fhirController.createPatient(mockRequest, mockResponse, mockNext);
            expect(mockResponse.status).toHaveBeenCalledWith(400);
            expect(mockResponse.json).toHaveBeenCalledWith({
                resourceType: 'OperationOutcome',
                issue: [
                    {
                        severity: 'error',
                        code: 'required',
                        diagnostics: 'resourceType is required'
                    }
                ]
            });
        });
    });
    describe('Authorization', () => {
        it('should check user permissions for resource access', async () => {
            mockRequest.user = {
                id: 'test-user-1',
                role: 'nurse',
                permissions: ['patient:read'] // No write permission
            };
            const patientData = {
                resourceType: 'Patient',
                name: [{ given: ['Test'] }]
            };
            mockRequest.body = patientData;
            await fhir_controller_1.fhirController.createPatient(mockRequest, mockResponse, mockNext);
            expect(mockResponse.status).toHaveBeenCalledWith(403);
            expect(mockResponse.json).toHaveBeenCalledWith({
                resourceType: 'OperationOutcome',
                issue: [
                    {
                        severity: 'error',
                        code: 'forbidden',
                        diagnostics: 'Insufficient permissions to create Patient resource'
                    }
                ]
            });
        });
        it('should allow authorized operations', async () => {
            mockRequest.user = {
                id: 'test-user-1',
                role: 'physician',
                permissions: ['fhir:read', 'fhir:write', 'patient:write']
            };
            const patient = {
                resourceType: 'Patient',
                id: 'patient-123',
                name: [{ given: ['John'], family: 'Doe' }]
            };
            mockRequest.params = { id: 'patient-123' };
            mockFhirResourcesService.getPatient.mockResolvedValue(patient);
            await fhir_controller_1.fhirController.getPatient(mockRequest, mockResponse, mockNext);
            expect(mockFhirResourcesService.getPatient).toHaveBeenCalledWith('patient-123');
            expect(mockResponse.status).toHaveBeenCalledWith(200);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,