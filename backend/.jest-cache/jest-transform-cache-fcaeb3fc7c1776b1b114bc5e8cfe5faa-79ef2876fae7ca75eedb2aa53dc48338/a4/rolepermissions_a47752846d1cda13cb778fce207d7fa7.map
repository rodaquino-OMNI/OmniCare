{"file":"/Users/rodrigo/claude-projects/OmniCare/backend/src/auth/role-permissions.ts","mappings":";AAAA;;;;;GAKG;;;AAoBH,gDAEC;AAMD,sCAEC;AAMD,kCAEC;AAnCD,8EAKyC;AAEzC;;;GAGG;AACU,QAAA,gBAAgB,GAAG,mDAAwB,CAAC;AAEzD;;;GAGG;AACH,SAAgB,kBAAkB,CAAC,IAAc;IAC/C,OAAO,IAAA,6CAAyB,EAAC,IAAI,CAAC,CAAC;AACzC,CAAC;AAED;;;GAGG;AACH,SAAgB,aAAa,CAAC,IAAc,EAAE,UAAsB;IAClE,OAAO,IAAA,wCAAoB,EAAC,IAAI,EAAE,UAAU,CAAC,CAAC;AAChD,CAAC;AAED;;;GAGG;AACH,SAAgB,WAAW,CAAC,IAAc;IACxC,OAAO,IAAA,sCAAkB,EAAC,IAAI,CAAC,CAAC;AAClC,CAAC;AAED;;;GAGG;AACH,iEAA4D;AAAnD,oHAAA,cAAc,OAAA;AAEvB;;;GAGG;AACH,iEAA2D;AAAlD,mHAAA,aAAa,OAAA","names":[],"sources":["/Users/rodrigo/claude-projects/OmniCare/backend/src/auth/role-permissions.ts"],"sourcesContent":["/**\n * OmniCare EMR Backend - Role-Based Access Control (RBAC) Permissions\n * HIPAA-Compliant Permission Definitions\n * \n * @deprecated Use @/auth/unified-role-permissions instead for full role support\n */\n\nimport { UserRole, Permission, RolePermissions } from '@/types/auth.types';\nimport { \n  UNIFIED_ROLE_PERMISSIONS, \n  getRolePermissions as getUnifiedRolePermissions,\n  hasPermission as hasUnifiedPermission,\n  getRoleInfo as getUnifiedRoleInfo\n} from '@/auth/unified-role-permissions';\n\n/**\n * Basic Role-Based Permission Matrix for Backend (Legacy Support)\n * @deprecated Use UNIFIED_ROLE_PERMISSIONS from @/auth/unified-role-permissions instead\n */\nexport const ROLE_PERMISSIONS = UNIFIED_ROLE_PERMISSIONS;\n\n/**\n * Helper function to get permissions for a specific role\n * @deprecated Use getUnifiedRolePermissions instead\n */\nexport function getRolePermissions(role: UserRole): Permission[] {\n  return getUnifiedRolePermissions(role);\n}\n\n/**\n * Helper function to check if a role has a specific permission\n * @deprecated Use hasUnifiedPermission instead\n */\nexport function hasPermission(role: UserRole, permission: Permission): boolean {\n  return hasUnifiedPermission(role, permission);\n}\n\n/**\n * Helper function to get role description\n * @deprecated Use getUnifiedRoleInfo instead\n */\nexport function getRoleInfo(role: UserRole): Omit<RolePermissions, 'permissions'> {\n  return getUnifiedRoleInfo(role);\n}\n\n/**\n * Permission hierarchy for role-based overrides\n * @deprecated Import ROLE_HIERARCHY from @/types/unified-user-roles instead\n */\nexport { ROLE_HIERARCHY } from '@/types/unified-user-roles';\n\n/**\n * Check if roleA has higher hierarchy than roleB\n * @deprecated Import hasHigherRole from @/types/unified-user-roles instead\n */\nexport { hasHigherRole } from '@/types/unified-user-roles';\n"],"version":3}