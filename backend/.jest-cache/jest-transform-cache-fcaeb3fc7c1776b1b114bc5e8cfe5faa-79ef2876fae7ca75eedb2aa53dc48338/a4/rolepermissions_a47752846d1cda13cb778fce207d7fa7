686de80c54c00fbd459876ad45f5ee32
"use strict";
/**
 * OmniCare EMR Backend - Role-Based Access Control (RBAC) Permissions
 * HIPAA-Compliant Permission Definitions
 *
 * @deprecated Use @/auth/unified-role-permissions instead for full role support
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.hasHigherRole = exports.ROLE_HIERARCHY = exports.ROLE_PERMISSIONS = void 0;
exports.getRolePermissions = getRolePermissions;
exports.hasPermission = hasPermission;
exports.getRoleInfo = getRoleInfo;
const unified_role_permissions_1 = require("@/auth/unified-role-permissions");
/**
 * Basic Role-Based Permission Matrix for Backend (Legacy Support)
 * @deprecated Use UNIFIED_ROLE_PERMISSIONS from @/auth/unified-role-permissions instead
 */
exports.ROLE_PERMISSIONS = unified_role_permissions_1.UNIFIED_ROLE_PERMISSIONS;
/**
 * Helper function to get permissions for a specific role
 * @deprecated Use getUnifiedRolePermissions instead
 */
function getRolePermissions(role) {
    return (0, unified_role_permissions_1.getRolePermissions)(role);
}
/**
 * Helper function to check if a role has a specific permission
 * @deprecated Use hasUnifiedPermission instead
 */
function hasPermission(role, permission) {
    return (0, unified_role_permissions_1.hasPermission)(role, permission);
}
/**
 * Helper function to get role description
 * @deprecated Use getUnifiedRoleInfo instead
 */
function getRoleInfo(role) {
    return (0, unified_role_permissions_1.getRoleInfo)(role);
}
/**
 * Permission hierarchy for role-based overrides
 * @deprecated Import ROLE_HIERARCHY from @/types/unified-user-roles instead
 */
var unified_user_roles_1 = require("@/types/unified-user-roles");
Object.defineProperty(exports, "ROLE_HIERARCHY", { enumerable: true, get: function () { return unified_user_roles_1.ROLE_HIERARCHY; } });
/**
 * Check if roleA has higher hierarchy than roleB
 * @deprecated Import hasHigherRole from @/types/unified-user-roles instead
 */
var unified_user_roles_2 = require("@/types/unified-user-roles");
Object.defineProperty(exports, "hasHigherRole", { enumerable: true, get: function () { return unified_user_roles_2.hasHigherRole; } });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3JvZHJpZ28vY2xhdWRlLXByb2plY3RzL09tbmlDYXJlL2JhY2tlbmQvc3JjL2F1dGgvcm9sZS1wZXJtaXNzaW9ucy50cyIsIm1hcHBpbmdzIjoiO0FBQUE7Ozs7O0dBS0c7OztBQW9CSCxnREFFQztBQU1ELHNDQUVDO0FBTUQsa0NBRUM7QUFuQ0QsOEVBS3lDO0FBRXpDOzs7R0FHRztBQUNVLFFBQUEsZ0JBQWdCLEdBQUcsbURBQXdCLENBQUM7QUFFekQ7OztHQUdHO0FBQ0gsU0FBZ0Isa0JBQWtCLENBQUMsSUFBYztJQUMvQyxPQUFPLElBQUEsNkNBQXlCLEVBQUMsSUFBSSxDQUFDLENBQUM7QUFDekMsQ0FBQztBQUVEOzs7R0FHRztBQUNILFNBQWdCLGFBQWEsQ0FBQyxJQUFjLEVBQUUsVUFBc0I7SUFDbEUsT0FBTyxJQUFBLHdDQUFvQixFQUFDLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQztBQUNoRCxDQUFDO0FBRUQ7OztHQUdHO0FBQ0gsU0FBZ0IsV0FBVyxDQUFDLElBQWM7SUFDeEMsT0FBTyxJQUFBLHNDQUFrQixFQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2xDLENBQUM7QUFFRDs7O0dBR0c7QUFDSCxpRUFBNEQ7QUFBbkQsb0hBQUEsY0FBYyxPQUFBO0FBRXZCOzs7R0FHRztBQUNILGlFQUEyRDtBQUFsRCxtSEFBQSxhQUFhLE9BQUEiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL3JvZHJpZ28vY2xhdWRlLXByb2plY3RzL09tbmlDYXJlL2JhY2tlbmQvc3JjL2F1dGgvcm9sZS1wZXJtaXNzaW9ucy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE9tbmlDYXJlIEVNUiBCYWNrZW5kIC0gUm9sZS1CYXNlZCBBY2Nlc3MgQ29udHJvbCAoUkJBQykgUGVybWlzc2lvbnNcbiAqIEhJUEFBLUNvbXBsaWFudCBQZXJtaXNzaW9uIERlZmluaXRpb25zXG4gKiBcbiAqIEBkZXByZWNhdGVkIFVzZSBAL2F1dGgvdW5pZmllZC1yb2xlLXBlcm1pc3Npb25zIGluc3RlYWQgZm9yIGZ1bGwgcm9sZSBzdXBwb3J0XG4gKi9cblxuaW1wb3J0IHsgVXNlclJvbGUsIFBlcm1pc3Npb24sIFJvbGVQZXJtaXNzaW9ucyB9IGZyb20gJ0AvdHlwZXMvYXV0aC50eXBlcyc7XG5pbXBvcnQgeyBcbiAgVU5JRklFRF9ST0xFX1BFUk1JU1NJT05TLCBcbiAgZ2V0Um9sZVBlcm1pc3Npb25zIGFzIGdldFVuaWZpZWRSb2xlUGVybWlzc2lvbnMsXG4gIGhhc1Blcm1pc3Npb24gYXMgaGFzVW5pZmllZFBlcm1pc3Npb24sXG4gIGdldFJvbGVJbmZvIGFzIGdldFVuaWZpZWRSb2xlSW5mb1xufSBmcm9tICdAL2F1dGgvdW5pZmllZC1yb2xlLXBlcm1pc3Npb25zJztcblxuLyoqXG4gKiBCYXNpYyBSb2xlLUJhc2VkIFBlcm1pc3Npb24gTWF0cml4IGZvciBCYWNrZW5kIChMZWdhY3kgU3VwcG9ydClcbiAqIEBkZXByZWNhdGVkIFVzZSBVTklGSUVEX1JPTEVfUEVSTUlTU0lPTlMgZnJvbSBAL2F1dGgvdW5pZmllZC1yb2xlLXBlcm1pc3Npb25zIGluc3RlYWRcbiAqL1xuZXhwb3J0IGNvbnN0IFJPTEVfUEVSTUlTU0lPTlMgPSBVTklGSUVEX1JPTEVfUEVSTUlTU0lPTlM7XG5cbi8qKlxuICogSGVscGVyIGZ1bmN0aW9uIHRvIGdldCBwZXJtaXNzaW9ucyBmb3IgYSBzcGVjaWZpYyByb2xlXG4gKiBAZGVwcmVjYXRlZCBVc2UgZ2V0VW5pZmllZFJvbGVQZXJtaXNzaW9ucyBpbnN0ZWFkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRSb2xlUGVybWlzc2lvbnMocm9sZTogVXNlclJvbGUpOiBQZXJtaXNzaW9uW10ge1xuICByZXR1cm4gZ2V0VW5pZmllZFJvbGVQZXJtaXNzaW9ucyhyb2xlKTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gdG8gY2hlY2sgaWYgYSByb2xlIGhhcyBhIHNwZWNpZmljIHBlcm1pc3Npb25cbiAqIEBkZXByZWNhdGVkIFVzZSBoYXNVbmlmaWVkUGVybWlzc2lvbiBpbnN0ZWFkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoYXNQZXJtaXNzaW9uKHJvbGU6IFVzZXJSb2xlLCBwZXJtaXNzaW9uOiBQZXJtaXNzaW9uKTogYm9vbGVhbiB7XG4gIHJldHVybiBoYXNVbmlmaWVkUGVybWlzc2lvbihyb2xlLCBwZXJtaXNzaW9uKTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gdG8gZ2V0IHJvbGUgZGVzY3JpcHRpb25cbiAqIEBkZXByZWNhdGVkIFVzZSBnZXRVbmlmaWVkUm9sZUluZm8gaW5zdGVhZFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Um9sZUluZm8ocm9sZTogVXNlclJvbGUpOiBPbWl0PFJvbGVQZXJtaXNzaW9ucywgJ3Blcm1pc3Npb25zJz4ge1xuICByZXR1cm4gZ2V0VW5pZmllZFJvbGVJbmZvKHJvbGUpO1xufVxuXG4vKipcbiAqIFBlcm1pc3Npb24gaGllcmFyY2h5IGZvciByb2xlLWJhc2VkIG92ZXJyaWRlc1xuICogQGRlcHJlY2F0ZWQgSW1wb3J0IFJPTEVfSElFUkFSQ0hZIGZyb20gQC90eXBlcy91bmlmaWVkLXVzZXItcm9sZXMgaW5zdGVhZFxuICovXG5leHBvcnQgeyBST0xFX0hJRVJBUkNIWSB9IGZyb20gJ0AvdHlwZXMvdW5pZmllZC11c2VyLXJvbGVzJztcblxuLyoqXG4gKiBDaGVjayBpZiByb2xlQSBoYXMgaGlnaGVyIGhpZXJhcmNoeSB0aGFuIHJvbGVCXG4gKiBAZGVwcmVjYXRlZCBJbXBvcnQgaGFzSGlnaGVyUm9sZSBmcm9tIEAvdHlwZXMvdW5pZmllZC11c2VyLXJvbGVzIGluc3RlYWRcbiAqL1xuZXhwb3J0IHsgaGFzSGlnaGVyUm9sZSB9IGZyb20gJ0AvdHlwZXMvdW5pZmllZC11c2VyLXJvbGVzJztcbiJdLCJ2ZXJzaW9uIjozfQ==