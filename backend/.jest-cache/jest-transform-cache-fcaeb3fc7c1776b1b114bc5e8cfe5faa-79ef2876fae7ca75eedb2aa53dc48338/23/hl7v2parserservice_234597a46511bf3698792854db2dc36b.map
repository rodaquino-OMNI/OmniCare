{"file":"/Users/rodrigo/claude-projects/OmniCare/backend/src/services/integration/hl7v2/hl7v2-parser.service.ts","mappings":"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","names":[],"sources":["/Users/rodrigo/claude-projects/OmniCare/backend/src/services/integration/hl7v2/hl7v2-parser.service.ts"],"sourcesContent":["import {\n  HL7v2Message,\n  HL7v2Segment,\n  HL7v2Field,\n  HL7v2Component,\n  HL7v2Subcomponent,\n  HL7v2ParsingOptions,\n  HL7v2ValidationConfig,\n  HL7v2ProcessingResult,\n  HL7v2Acknowledgment,\n  HL7v2AckCode,\n  HL7v2ErrorCondition\n} from '../types/hl7v2.types';\nimport { IntegrationValidationResult } from '../types/integration.types';\nimport logger from '@/utils/logger';\nimport { getErrorMessage } from '@/utils/error.utils';\n\n/**\n * HL7 v2 Parser Service\n * Handles parsing, validation, and processing of HL7 v2 messages\n */\nexport class HL7v2ParserService {\n  private defaultParsingOptions: HL7v2ParsingOptions = {\n    fieldSeparator: '|',\n    componentSeparator: '^',\n    repetitionSeparator: '~',\n    escapeCharacter: '\\\\',\n    subcomponentSeparator: '&',\n    truncateExtraFields: false,\n    allowEmptyFields: true,\n    preserveWhitespace: false\n  };\n\n  private defaultValidationConfig: HL7v2ValidationConfig = {\n    validateStructure: true,\n    validateDataTypes: true,\n    validateTableValues: false,\n    validateConformance: true,\n    strictMode: false,\n    version: '2.5.1'\n  };\n\n  /**\n   * Parse HL7 v2 message string into structured object\n   */\n  parseMessage(\n    messageString: string,\n    options: Partial<HL7v2ParsingOptions> = {}\n  ): HL7v2Message {\n    try {\n      const parsingOptions = { ...this.defaultParsingOptions, ...options };\n      \n      // Clean the message string\n      const cleanMessage = this.cleanMessageString(messageString);\n      \n      // Split into segments\n      const segmentStrings = cleanMessage.split(/\\r\\n|\\r|\\n/).filter(s => s.trim());\n      \n      if (segmentStrings.length === 0) {\n        throw new Error('Empty message');\n      }\n\n      // Parse MSH segment first to get encoding characters\n      const mshSegment = this.parseMSHSegment(segmentStrings[0], parsingOptions);\n      \n      // Update parsing options with encoding characters from MSH\n      if (mshSegment.fields.length > 1) {\n        const encodingChars = mshSegment.fields[1].value as string;\n        if (encodingChars.length >= 4) {\n          parsingOptions.componentSeparator = encodingChars[0];\n          parsingOptions.repetitionSeparator = encodingChars[1];\n          parsingOptions.escapeCharacter = encodingChars[2];\n          parsingOptions.subcomponentSeparator = encodingChars[3];\n        }\n      }\n\n      // Parse all segments\n      const segments: HL7v2Segment[] = [];\n      for (const segmentString of segmentStrings) {\n        const segment = this.parseSegment(segmentString, parsingOptions);\n        segments.push(segment);\n      }\n\n      // Extract message header information\n      const messageInfo = this.extractMessageInfo(mshSegment);\n\n      const message: HL7v2Message = {\n        messageType: messageInfo.messageType,\n        triggerEvent: messageInfo.triggerEvent,\n        messageStructure: messageInfo.messageStructure,\n        messageControlId: messageInfo.messageControlId,\n        sendingApplication: messageInfo.sendingApplication,\n        sendingFacility: messageInfo.sendingFacility,\n        receivingApplication: messageInfo.receivingApplication,\n        receivingFacility: messageInfo.receivingFacility,\n        timestamp: messageInfo.timestamp,\n        processingId: messageInfo.processingId,\n        versionId: messageInfo.versionId,\n        sequenceNumber: messageInfo.sequenceNumber,\n        continuationPointer: messageInfo.continuationPointer,\n        acceptAcknowledgmentType: messageInfo.acceptAcknowledgmentType,\n        applicationAcknowledgmentType: messageInfo.applicationAcknowledgmentType,\n        countryCode: messageInfo.countryCode,\n        characterSet: messageInfo.characterSet,\n        principalLanguage: messageInfo.principalLanguage,\n        segments,\n        rawMessage: messageString\n      };\n\n      logger.debug('HL7 v2 message parsed successfully', {\n        messageType: message.messageType,\n        triggerEvent: message.triggerEvent,\n        messageControlId: message.messageControlId,\n        segmentCount: segments.length\n      });\n\n      return message;\n    } catch (error) {\n      logger.error('Failed to parse HL7 v2 message:', error);\n      throw new Error(`HL7 v2 parsing failed: ${getErrorMessage(error)}`);\n    }\n  }\n\n  /**\n   * Parse MSH segment with special handling for encoding characters\n   */\n  private parseMSHSegment(\n    segmentString: string,\n    options: HL7v2ParsingOptions\n  ): HL7v2Segment {\n    const fields: HL7v2Field[] = [];\n    const parts = segmentString.split(options.fieldSeparator);\n    \n    if (parts[0] !== 'MSH') {\n      throw new Error('First segment must be MSH');\n    }\n\n    // MSH segment has special structure\n    // MSH|^~\\&|...\n    // Field 1 is the encoding characters\n    for (let i = 1; i < parts.length; i++) {\n      if (i === 1) {\n        // Encoding characters field\n        fields.push({ value: parts[i] });\n      } else {\n        // Regular field parsing\n        const field = this.parseField(parts[i], options);\n        fields.push(field);\n      }\n    }\n\n    return {\n      segmentType: 'MSH',\n      fields\n    };\n  }\n\n  /**\n   * Parse a single segment\n   */\n  private parseSegment(\n    segmentString: string,\n    options: HL7v2ParsingOptions\n  ): HL7v2Segment {\n    const parts = segmentString.split(options.fieldSeparator);\n    const segmentType = parts[0];\n    const fields: HL7v2Field[] = [];\n\n    // Skip the segment type (index 0)\n    for (let i = 1; i < parts.length; i++) {\n      const fieldString = parts[i];\n      const field = this.parseField(fieldString, options);\n      fields.push(field);\n    }\n\n    return {\n      segmentType,\n      fields\n    };\n  }\n\n  /**\n   * Parse a field\n   */\n  private parseField(\n    fieldString: string,\n    options: HL7v2ParsingOptions\n  ): HL7v2Field {\n    if (!fieldString) {\n      return { value: '' };\n    }\n\n    // Check for repetitions first\n    if (fieldString.includes(options.repetitionSeparator)) {\n      const repetitions = fieldString.split(options.repetitionSeparator);\n      const repetitionFields: HL7v2Field[] = [];\n      \n      for (const repetition of repetitions) {\n        repetitionFields.push(this.parseField(repetition, options));\n      }\n      \n      return {\n        value: repetitionFields,\n        repetitions: repetitionFields\n      };\n    }\n\n    // Check for components\n    if (fieldString.includes(options.componentSeparator)) {\n      const componentStrings = fieldString.split(options.componentSeparator);\n      const components: HL7v2Component[] = [];\n      \n      for (const componentString of componentStrings) {\n        const component = this.parseComponent(componentString, options);\n        components.push(component);\n      }\n      \n      return {\n        value: components,\n        components\n      };\n    }\n\n    // Simple field with no components or repetitions\n    return {\n      value: this.unescapeString(fieldString, options)\n    };\n  }\n\n  /**\n   * Parse a component\n   */\n  private parseComponent(\n    componentString: string,\n    options: HL7v2ParsingOptions\n  ): HL7v2Component {\n    if (!componentString) {\n      return { value: '' };\n    }\n\n    // Check for subcomponents\n    if (componentString.includes(options.subcomponentSeparator)) {\n      const subcomponentStrings = componentString.split(options.subcomponentSeparator);\n      const subcomponents: HL7v2Subcomponent[] = [];\n      \n      for (const subcomponentString of subcomponentStrings) {\n        subcomponents.push({\n          value: this.unescapeString(subcomponentString, options)\n        });\n      }\n      \n      return {\n        value: subcomponents,\n        subcomponents\n      };\n    }\n\n    // Simple component with no subcomponents\n    return {\n      value: this.unescapeString(componentString, options)\n    };\n  }\n\n  /**\n   * Unescape HL7 v2 escape sequences\n   */\n  private unescapeString(\n    str: string,\n    options: HL7v2ParsingOptions\n  ): string {\n    if (!str || !str.includes(options.escapeCharacter)) {\n      return str;\n    }\n\n    const escapeChar = options.escapeCharacter;\n    return str\n      .replace(new RegExp(`${escapeChar}F${escapeChar}`, 'g'), options.fieldSeparator)\n      .replace(new RegExp(`${escapeChar}S${escapeChar}`, 'g'), options.componentSeparator)\n      .replace(new RegExp(`${escapeChar}T${escapeChar}`, 'g'), options.subcomponentSeparator)\n      .replace(new RegExp(`${escapeChar}R${escapeChar}`, 'g'), options.repetitionSeparator)\n      .replace(new RegExp(`${escapeChar}E${escapeChar}`, 'g'), options.escapeCharacter)\n      .replace(new RegExp(`${escapeChar}\\.br${escapeChar}`, 'g'), '\\n');\n  }\n\n  /**\n   * Clean message string by removing MLLP wrappers and normalizing line endings\n   */\n  private cleanMessageString(messageString: string): string {\n    let cleaned = messageString;\n    \n    // Remove MLLP start and end blocks\n    cleaned = cleaned.replace(/^\\x0B/, ''); // Start block\n    cleaned = cleaned.replace(/\\x1C\\x0D$/, ''); // End block and carriage return\n    cleaned = cleaned.replace(/\\x1C$/, ''); // End block only\n    cleaned = cleaned.replace(/\\x0D$/, ''); // Carriage return only\n    \n    return cleaned.trim();\n  }\n\n  /**\n   * Extract message information from MSH segment\n   */\n  private extractMessageInfo(mshSegment: HL7v2Segment): any {\n    const fields = mshSegment.fields;\n    \n    // Parse message type (MSH.9) - adjust for 0-based indexing\n    let messageType = '';\n    let triggerEvent = '';\n    let messageStructure = '';\n    \n    if (fields.length > 7 && fields[7].value) {\n      const msgTypeField = fields[7];\n      if (msgTypeField.components && msgTypeField.components.length > 0) {\n        messageType = this.getComponentValue(msgTypeField.components[0]);\n        if (msgTypeField.components.length > 1) {\n          triggerEvent = this.getComponentValue(msgTypeField.components[1]);\n        }\n        if (msgTypeField.components.length > 2) {\n          messageStructure = this.getComponentValue(msgTypeField.components[2]);\n        }\n      } else {\n        // Simple string format like \"ADT^A01\"\n        const msgTypeString = String(msgTypeField.value);\n        const parts = msgTypeString.split('^');\n        messageType = parts[0] || '';\n        triggerEvent = parts[1] || '';\n        messageStructure = parts[2] || '';\n      }\n    }\n\n    return {\n      messageType,\n      triggerEvent,\n      messageStructure,\n      messageControlId: this.getFieldValue(fields, 8) || '',\n      sendingApplication: this.getFieldValue(fields, 1) || '',\n      sendingFacility: this.getFieldValue(fields, 2) || '',\n      receivingApplication: this.getFieldValue(fields, 3) || '',\n      receivingFacility: this.getFieldValue(fields, 4) || '',\n      timestamp: this.parseHL7DateTime(this.getFieldValue(fields, 5) || ''),\n      processingId: this.getFieldValue(fields, 9) || '',\n      versionId: this.getFieldValue(fields, 10) || '',\n      sequenceNumber: this.parseNumber(this.getFieldValue(fields, 12)),\n      continuationPointer: this.getFieldValue(fields, 13),\n      acceptAcknowledgmentType: this.getFieldValue(fields, 14),\n      applicationAcknowledgmentType: this.getFieldValue(fields, 15),\n      countryCode: this.getFieldValue(fields, 16),\n      characterSet: this.getFieldValue(fields, 17),\n      principalLanguage: this.getFieldValue(fields, 18)\n    };\n  }\n\n  /**\n   * Get field value as string\n   */\n  private getFieldValue(fields: HL7v2Field[], index: number): string | undefined {\n    if (index >= fields.length) {\n      return undefined;\n    }\n    \n    const field = fields[index];\n    if (field.components && field.components.length > 0) {\n      return this.getComponentValue(field.components[0]);\n    }\n    \n    return String(field.value || '');\n  }\n\n  /**\n   * Get component value as string\n   */\n  private getComponentValue(component: HL7v2Component): string {\n    if (component.subcomponents && component.subcomponents.length > 0) {\n      return component.subcomponents[0].value;\n    }\n    \n    return String(component.value || '');\n  }\n\n  /**\n   * Parse HL7 date/time string\n   */\n  private parseHL7DateTime(dateTimeString: string): Date {\n    if (!dateTimeString) {\n      return new Date();\n    }\n\n    // HL7 format: YYYYMMDDHHMMSS[.SSSS][+/-ZZZZ]\n    const cleanDateTime = dateTimeString.replace(/[^0-9]/g, '');\n    \n    if (cleanDateTime.length < 8) {\n      return new Date();\n    }\n\n    const year = parseInt(cleanDateTime.substring(0, 4), 10);\n    const month = parseInt(cleanDateTime.substring(4, 6), 10) - 1; // JS months are 0-based\n    const day = parseInt(cleanDateTime.substring(6, 8), 10);\n    const hour = cleanDateTime.length > 8 ? parseInt(cleanDateTime.substring(8, 10), 10) : 0;\n    const minute = cleanDateTime.length > 10 ? parseInt(cleanDateTime.substring(10, 12), 10) : 0;\n    const second = cleanDateTime.length > 12 ? parseInt(cleanDateTime.substring(12, 14), 10) : 0;\n\n    return new Date(year, month, day, hour, minute, second);\n  }\n\n  /**\n   * Parse number from string\n   */\n  private parseNumber(value: string | undefined): number | undefined {\n    if (!value) {\n      return undefined;\n    }\n    \n    const num = parseInt(value, 10);\n    return isNaN(num) ? undefined : num;\n  }\n\n  /**\n   * Validate HL7 v2 message\n   */\n  validateMessage(\n    message: HL7v2Message,\n    config: Partial<HL7v2ValidationConfig> = {}\n  ): ValidationResult {\n    const validationConfig = { ...this.defaultValidationConfig, ...config };\n    const errors: any[] = [];\n    const warnings: any[] = [];\n\n    try {\n      // Structure validation\n      if (validationConfig.validateStructure) {\n        this.validateMessageStructure(message, errors, warnings);\n      }\n\n      // Data type validation\n      if (validationConfig.validateDataTypes) {\n        this.validateDataTypes(message, errors, warnings);\n      }\n\n      // Conformance validation\n      if (validationConfig.validateConformance) {\n        this.validateConformance(message, errors, warnings, validationConfig);\n      }\n\n      return {\n        valid: errors.length === 0,\n        errors,\n        warnings,\n        validatedAt: new Date()\n      };\n    } catch (error) {\n      logger.error('HL7 v2 validation failed:', error);\n      return {\n        valid: false,\n        errors: [{\n          path: 'root',\n          message: `Validation failed: ${getErrorMessage(error)}`,\n          code: 'validation-error',\n          severity: 'error'\n        }],\n        warnings: [],\n        validatedAt: new Date()\n      };\n    }\n  }\n\n  /**\n   * Validate message structure\n   */\n  private validateMessageStructure(\n    message: HL7v2Message,\n    errors: any[],\n    warnings: any[]\n  ): void {\n    // Check for required MSH segment\n    if (!message.segments.find(s => s.segmentType === 'MSH')) {\n      errors.push({\n        path: 'segments',\n        message: 'MSH segment is required',\n        code: 'required-segment',\n        severity: 'error'\n      });\n    }\n\n    // Check message type\n    if (!message.messageType) {\n      errors.push({\n        path: 'messageType',\n        message: 'Message type is required',\n        code: 'required-field',\n        severity: 'error'\n      });\n    }\n\n    // Check message control ID\n    if (!message.messageControlId) {\n      errors.push({\n        path: 'messageControlId',\n        message: 'Message control ID is required',\n        code: 'required-field',\n        severity: 'error'\n      });\n    }\n  }\n\n  /**\n   * Validate data types\n   */\n  private validateDataTypes(\n    message: HL7v2Message,\n    errors: any[],\n    warnings: any[]\n  ): void {\n    // Basic data type validation\n    for (const segment of message.segments) {\n      for (let i = 0; i < segment.fields.length; i++) {\n        const field = segment.fields[i];\n        // Add specific data type validation logic here\n        // This would depend on the segment type and field position\n      }\n    }\n  }\n\n  /**\n   * Validate conformance\n   */\n  private validateConformance(\n    message: HL7v2Message,\n    errors: any[],\n    warnings: any[],\n    config: HL7v2ValidationConfig\n  ): void {\n    // Conformance validation would check against message profiles\n    // This is a placeholder for more complex conformance checking\n    if (config.messageProfile) {\n      // Load and validate against message profile\n      warnings.push({\n        path: 'root',\n        message: 'Message profile validation not yet implemented',\n        code: 'not-implemented',\n        severity: 'warning'\n      });\n    }\n  }\n\n  /**\n   * Generate ACK message\n   */\n  generateAcknowledgment(\n    originalMessage: HL7v2Message,\n    ackCode: HL7v2AckCode,\n    textMessage?: string,\n    errorCondition?: HL7v2ErrorCondition\n  ): HL7v2Acknowledgment {\n    return {\n      messageType: 'ACK',\n      messageControlId: originalMessage.messageControlId,\n      acknowledgmentCode: ackCode,\n      textMessage,\n      errorCondition,\n      timestamp: new Date()\n    };\n  }\n\n  /**\n   * Convert acknowledgment to HL7 v2 string\n   */\n  acknowledgeToString(\n    ack: HL7v2Acknowledgment,\n    sendingApplication: string = 'OMNICARE',\n    sendingFacility: string = 'OMNICARE',\n    receivingApplication?: string,\n    receivingFacility?: string\n  ): string {\n    const timestamp = this.formatHL7DateTime(ack.timestamp);\n    const processingId = 'P'; // Production\n    const versionId = '2.5.1';\n    \n    let msh = `MSH|^~\\\\&|${sendingApplication}|${sendingFacility}|${receivingApplication || ''}|${receivingFacility || ''}|${timestamp}||ACK|${ack.messageControlId}|${processingId}|${versionId}`;\n    \n    let msa = `MSA|${ack.acknowledgmentCode}|${ack.messageControlId}`;\n    if (ack.textMessage) {\n      msa += `|${ack.textMessage}`;\n    }\n    \n    let ackString = msh + '\\r' + msa;\n    \n    if (ack.errorCondition) {\n      let err = `ERR|||${ack.errorCondition.errorCode}`;\n      if (ack.errorCondition.errorDescription) {\n        err += `||||${ack.errorCondition.errorDescription}`;\n      }\n      ackString += '\\r' + err;\n    }\n    \n    return ackString;\n  }\n\n  /**\n   * Format date to HL7 v2 format\n   */\n  private formatHL7DateTime(date: Date): string {\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n    const hour = String(date.getHours()).padStart(2, '0');\n    const minute = String(date.getMinutes()).padStart(2, '0');\n    const second = String(date.getSeconds()).padStart(2, '0');\n    \n    return `${year}${month}${day}${hour}${minute}${second}`;\n  }\n\n  /**\n   * Get service health status\n   */\n  async getHealth(): Promise<{ status: string; details: any }> {\n    return {\n      status: 'UP',\n      details: {\n        parserVersion: '1.0.0',\n        supportedHL7Version: '2.5.1',\n        supportedMessageTypes: [\n          'ADT', 'ORM', 'ORU', 'SIU', 'DFT', 'MFN', 'RAS', 'RDE', 'RDS', 'MDM'\n        ]\n      }\n    };\n  }\n}\n\n// Export singleton instance\nexport const hl7v2ParserService = new HL7v2ParserService();"],"version":3}