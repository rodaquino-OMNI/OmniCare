21b043a2aaa280a1391452c2180a078a
"use strict";
/**
 * Global Test Setup for Backend
 * Runs once before all tests start
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = globalSetup;
const typeorm_1 = require("typeorm");
const redis_1 = require("redis");
async function globalSetup() {
    console.log('🚀 Starting backend test environment setup...');
    try {
        // Initialize test database
        await setupTestDatabase();
        // Initialize test cache
        await setupTestCache();
        // Setup test data
        await setupTestData();
        // Initialize external service mocks
        await setupExternalServiceMocks();
        console.log('✅ Backend test environment setup completed successfully');
    }
    catch (error) {
        console.error('❌ Failed to setup backend test environment:', error);
        process.exit(1);
    }
}
async function setupTestDatabase() {
    if (process.env.SKIP_DB_SETUP === 'true') {
        console.log('📊 Skipping database setup (SKIP_DB_SETUP=true)');
        return;
    }
    try {
        console.log('📊 Setting up test database...');
        // Create test database connection
        const connection = await (0, typeorm_1.createConnection)({
            type: 'postgres',
            host: process.env.DB_HOST || 'localhost',
            port: parseInt(process.env.DB_PORT || '5432'),
            username: process.env.DB_USER || 'test_user',
            password: process.env.DB_PASSWORD || 'test_password',
            database: process.env.DB_NAME || 'omnicare_test',
            synchronize: true, // Auto-create schema for tests
            dropSchema: true, // Clean start for each test run
            logging: false,
            entities: ['src/models/*.ts'],
            migrations: ['src/migrations/*.ts'],
        });
        // Run initial migrations if needed
        await connection.runMigrations();
        console.log('✅ Test database setup completed');
        // Store connection for cleanup
        global.testDbConnection = connection;
    }
    catch (error) {
        console.error('❌ Failed to setup test database:', error);
        throw error;
    }
}
async function setupTestCache() {
    if (process.env.SKIP_CACHE_SETUP === 'true') {
        console.log('💾 Skipping cache setup (SKIP_CACHE_SETUP=true)');
        return;
    }
    try {
        console.log('💾 Setting up test cache...');
        const redisClient = (0, redis_1.createClient)({
            url: process.env.REDIS_URL || 'redis://localhost:6379/1',
        });
        await redisClient.connect();
        // Clear any existing test data
        await redisClient.flushDb();
        console.log('✅ Test cache setup completed');
        // Store client for cleanup
        global.testCacheClient = redisClient;
    }
    catch (error) {
        console.warn('⚠️ Failed to setup test cache (continuing without cache):', error);
        // Don't fail the entire setup if cache is unavailable
    }
}
async function setupTestData() {
    try {
        console.log('📝 Setting up test data...');
        // Create test users, roles, and permissions
        const testData = {
            users: [
                {
                    id: 'test-user-doctor',
                    email: 'doctor@test.com',
                    role: 'physician',
                    active: true,
                },
                {
                    id: 'test-user-nurse',
                    email: 'nurse@test.com',
                    role: 'nurse',
                    active: true,
                },
                {
                    id: 'test-user-admin',
                    email: 'admin@test.com',
                    role: 'admin',
                    active: true,
                },
            ],
            patients: [
                {
                    id: 'test-patient-1',
                    name: 'John Doe',
                    mrn: 'MRN001',
                    active: true,
                },
                {
                    id: 'test-patient-2',
                    name: 'Jane Smith',
                    mrn: 'MRN002',
                    active: true,
                },
            ],
        };
        // Store test data globally for tests to use
        global.testData = testData;
        console.log('✅ Test data setup completed');
    }
    catch (error) {
        console.error('❌ Failed to setup test data:', error);
        throw error;
    }
}
async function setupExternalServiceMocks() {
    try {
        console.log('🎭 Setting up external service mocks...');
        // Setup Medplum mock server
        if (process.env.MOCK_EXTERNAL_SERVICES === 'true') {
            const mockServer = {
                baseUrl: 'http://localhost:8080',
                endpoints: [
                    '/auth/login',
                    '/fhir/R4/Patient',
                    '/fhir/R4/Encounter',
                    '/fhir/R4/Observation',
                ],
            };
            global.mockMedplumServer = mockServer;
        }
        // Setup other external service mocks (SMART on FHIR, etc.)
        const externalMocks = {
            smartFhir: {
                authorizationServer: 'http://localhost:8081',
                tokenEndpoint: '/oauth2/token',
                userInfoEndpoint: '/oauth2/userinfo',
            },
            directTrust: {
                endpoint: 'http://localhost:8082/direct',
                certificate: 'test-certificate',
            },
        };
        global.externalMocks = externalMocks;
        console.log('✅ External service mocks setup completed');
    }
    catch (error) {
        console.error('❌ Failed to setup external service mocks:', error);
        throw error;
    }
}
// Graceful shutdown handler
process.on('SIGTERM', async () => {
    console.log('🛑 Received SIGTERM, cleaning up test environment...');
    if (global.testDbConnection) {
        await global.testDbConnection.close();
    }
    if (global.testCacheClient) {
        await global.testCacheClient.quit();
    }
    process.exit(0);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,