{"file":"/Users/rodrigo/claude-projects/OmniCare/backend/tests/unit/services/medplum.service.test.ts","mappings":"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","names":[],"sources":["/Users/rodrigo/claude-projects/OmniCare/backend/tests/unit/services/medplum.service.test.ts"],"sourcesContent":["import { MedplumService } from '../../../src/services/medplum.service';\nimport { MedplumClient } from '@medplum/core';\nimport logger from '../../../src/utils/logger';\nimport config from '../../../src/config';\n\n// Mock dependencies\njest.mock('@medplum/core');\njest.mock('../../../src/utils/logger');\njest.mock('../../../src/config', () => ({\n  medplum: {\n    baseUrl: 'https://api.medplum.com/',\n    clientId: 'test-client-id',\n    clientSecret: 'test-client-secret',\n    projectId: 'test-project-id',\n    selfHosted: false,\n    selfHostedUrl: 'http://localhost:8103',\n  },\n}));\n\ndescribe('MedplumService', () => {\n  let service: MedplumService;\n  let mockMedplumClient: jest.Mocked<MedplumClient>;\n  const mockLogger = logger as jest.Mocked<typeof logger>;\n\n  beforeEach(() => {\n    // Create mock MedplumClient instance  \n    mockMedplumClient = {\n      startClientLogin: jest.fn(),\n      createResource: jest.fn(),\n      readResource: jest.fn(),\n      updateResource: jest.fn(),\n      deleteResource: jest.fn(),\n      searchResources: jest.fn(),\n      executeBatch: jest.fn(),\n      get: jest.fn(),\n      graphql: jest.fn(),\n      validateResource: jest.fn(),\n    } as any;\n\n    // Mock MedplumClient constructor\n    (MedplumClient as jest.MockedClass<typeof MedplumClient>).mockImplementation(() => mockMedplumClient);\n\n    service = new MedplumService();\n    jest.clearAllMocks();\n  });\n\n  describe('Initialization', () => {\n    it('should initialize with correct configuration for SaaS', async () => {\n      const mockProfile = { resourceType: 'ProfileResource', id: 'profile-123' };\n      mockMedplumClient.startClientLogin.mockResolvedValue(mockProfile as any);\n      mockMedplumClient.readResource.mockRejectedValue(new Error('Not found')); // For test connection\n\n      await service.initialize();\n\n      expect(MedplumClient).toHaveBeenCalledWith({\n        baseUrl: config.medplum.baseUrl,\n        clientId: config.medplum.clientId,\n        fhirUrlPath: '/fhir/R4',\n        tokenUrl: `${config.medplum.baseUrl}oauth2/token`,\n        authorizeUrl: `${config.medplum.baseUrl}oauth2/authorize`,\n      });\n\n      expect(mockMedplumClient.startClientLogin).toHaveBeenCalledWith(\n        config.medplum.clientId,\n        config.medplum.clientSecret\n      );\n      expect(mockLogger.info).toHaveBeenCalledWith('Medplum FHIR server connection established successfully');\n    });\n\n    it('should initialize with correct configuration for self-hosted', async () => {\n      // Mock self-hosted configuration\n      const originalConfig = { ...config.medplum };\n      config.medplum.selfHosted = true;\n\n      const mockProfile = { resourceType: 'ProfileResource', id: 'profile-123' };\n      mockMedplumClient.startClientLogin.mockResolvedValue(mockProfile as any);\n      mockMedplumClient.readResource.mockRejectedValue(new Error('Not found'));\n\n      await service.initialize();\n\n      expect(MedplumClient).toHaveBeenCalledWith({\n        baseUrl: config.medplum.selfHostedUrl,\n        clientId: config.medplum.clientId,\n        fhirUrlPath: '/fhir/R4',\n        tokenUrl: `${config.medplum.selfHostedUrl}/oauth2/token`,\n        authorizeUrl: `${config.medplum.selfHostedUrl}/oauth2/authorize`,\n      });\n\n      // Restore original config\n      config.medplum = originalConfig;\n    });\n\n    it('should handle initialization failure with retry', async () => {\n      const error = new Error('Connection failed');\n      mockMedplumClient.startClientLogin.mockRejectedValue(error);\n\n      // Use fake timers to control setTimeout\n      jest.useFakeTimers();\n      \n      const initPromise = service.initialize();\n      \n      // Advance timers to trigger retry\n      jest.advanceTimersByTime(2000);\n      \n      // Second attempt should also fail\n      mockMedplumClient.startClientLogin.mockRejectedValue(error);\n      \n      jest.useRealTimers();\n\n      await expect(initPromise).rejects.toThrow('Connection failed');\n      expect(mockLogger.error).toHaveBeenCalledWith('Failed to initialize Medplum connection:', error);\n    });\n\n    it('should throw error after max reconnection attempts', async () => {\n      const error = new Error('Persistent connection failure');\n      mockMedplumClient.startClientLogin.mockRejectedValue(error);\n\n      // Mock multiple failed attempts\n      for (let i = 0; i < 6; i++) {\n        mockMedplumClient.startClientLogin.mockRejectedValueOnce(error);\n      }\n\n      await expect(service.initialize()).rejects.toThrow(\n        'Failed to establish Medplum connection after 5 attempts'\n      );\n    });\n  });\n\n  describe('Resource Management', () => {\n    beforeEach(async () => {\n      // Initialize service for resource management tests\n      const mockProfile = { resourceType: 'ProfileResource', id: 'profile-123' };\n      mockMedplumClient.startClientLogin.mockResolvedValue(mockProfile as any);\n      mockMedplumClient.readResource.mockRejectedValue(new Error('Not found'));\n      await service.initialize();\n    });\n\n    describe('createResource', () => {\n      it('should create a resource successfully', async () => {\n        const resource = (global as any).createMockPatient();\n        const createdResource = { ...resource, id: 'created-patient-1' };\n\n        mockMedplumClient.createResource.mockResolvedValue(createdResource);\n\n        const result = await service.createResource(resource);\n\n        expect(mockMedplumClient.createResource).toHaveBeenCalledWith(resource);\n        expect(mockLogger.info).toHaveBeenCalledWith(\n          `Successfully created ${resource.resourceType} with ID: ${createdResource.id}`\n        );\n        expect(result).toEqual(createdResource);\n      });\n\n      it('should handle creation errors', async () => {\n        const resource = (global as any).createMockPatient();\n        const error = new Error('Creation failed');\n\n        mockMedplumClient.createResource.mockRejectedValue(error);\n\n        await expect(service.createResource(resource)).rejects.toThrow('Creation failed');\n        expect(mockLogger.error).toHaveBeenCalledWith(\n          `Failed to create ${resource.resourceType} resource:`,\n          error\n        );\n      });\n\n      it('should handle FHIR operation outcome errors', async () => {\n        const resource = (global as any).createMockPatient();\n        const fhirError = {\n          outcome: {\n            issue: [\n              {\n                severity: 'error',\n                code: 'required',\n                diagnostics: 'Missing required field: name',\n              },\n            ],\n          },\n        };\n\n        mockMedplumClient.createResource.mockRejectedValue(fhirError);\n\n        await expect(service.createResource(resource)).rejects.toThrow(\n          'FHIR Error: Missing required field: name'\n        );\n      });\n    });\n\n    describe('readResource', () => {\n      it('should read a resource successfully', async () => {\n        const resourceType = 'Patient';\n        const resourceId = 'test-patient-1';\n        const resource = (global as any).createMockPatient();\n\n        mockMedplumClient.readResource.mockResolvedValue(resource);\n\n        const result = await service.readResource(resourceType, resourceId);\n\n        expect(mockMedplumClient.readResource).toHaveBeenCalledWith(resourceType, resourceId);\n        expect(mockLogger.debug).toHaveBeenCalledWith(\n          `Successfully retrieved ${resourceType} with ID: ${resourceId}`\n        );\n        expect(result).toEqual(resource);\n      });\n\n      it('should handle read errors', async () => {\n        const resourceType = 'Patient';\n        const resourceId = 'non-existent-patient';\n        const error = new Error('Resource not found');\n\n        mockMedplumClient.readResource.mockRejectedValue(error);\n\n        await expect(service.readResource(resourceType, resourceId)).rejects.toThrow(\n          'Resource not found'\n        );\n        expect(mockLogger.error).toHaveBeenCalledWith(\n          `Failed to read ${resourceType} resource with ID ${resourceId}:`,\n          error\n        );\n      });\n    });\n\n    describe('updateResource', () => {\n      it('should update a resource successfully', async () => {\n        const resource = { ...(global as any).createMockPatient(), id: 'test-patient-1' };\n        const updatedResource = { ...resource, name: [{ given: ['Updated'], family: 'Name' }] };\n\n        mockMedplumClient.updateResource.mockResolvedValue(updatedResource);\n\n        const result = await service.updateResource(resource);\n\n        expect(mockMedplumClient.updateResource).toHaveBeenCalledWith(resource);\n        expect(mockLogger.info).toHaveBeenCalledWith(\n          `Successfully updated ${resource.resourceType} with ID: ${resource.id}`\n        );\n        expect(result).toEqual(updatedResource);\n      });\n\n      it('should throw error for resource without ID', async () => {\n        const resource = (global as any).createMockPatient();\n        delete resource.id;\n\n        await expect(service.updateResource(resource)).rejects.toThrow(\n          'Resource must have an ID to be updated'\n        );\n        expect(mockMedplumClient.updateResource).not.toHaveBeenCalled();\n      });\n\n      it('should handle update errors', async () => {\n        const resource = { ...(global as any).createMockPatient(), id: 'test-patient-1' };\n        const error = new Error('Update failed');\n\n        mockMedplumClient.updateResource.mockRejectedValue(error);\n\n        await expect(service.updateResource(resource)).rejects.toThrow('Update failed');\n        expect(mockLogger.error).toHaveBeenCalledWith(\n          `Failed to update ${resource.resourceType} resource:`,\n          error\n        );\n      });\n    });\n\n    describe('deleteResource', () => {\n      it('should delete a resource successfully', async () => {\n        const resourceType = 'Patient';\n        const resourceId = 'test-patient-1';\n\n        mockMedplumClient.deleteResource.mockResolvedValue(undefined);\n\n        await service.deleteResource(resourceType, resourceId);\n\n        expect(mockMedplumClient.deleteResource).toHaveBeenCalledWith(resourceType, resourceId);\n        expect(mockLogger.info).toHaveBeenCalledWith(\n          `Successfully deleted ${resourceType} with ID: ${resourceId}`\n        );\n      });\n\n      it('should handle delete errors', async () => {\n        const resourceType = 'Patient';\n        const resourceId = 'test-patient-1';\n        const error = new Error('Delete failed');\n\n        mockMedplumClient.deleteResource.mockRejectedValue(error);\n\n        await expect(service.deleteResource(resourceType, resourceId)).rejects.toThrow(\n          'Delete failed'\n        );\n        expect(mockLogger.error).toHaveBeenCalledWith(\n          `Failed to delete ${resourceType} resource with ID ${resourceId}:`,\n          error\n        );\n      });\n    });\n  });\n\n  describe('Search Operations', () => {\n    beforeEach(async () => {\n      const mockProfile = { resourceType: 'ProfileResource', id: 'profile-123' };\n      mockMedplumClient.startClientLogin.mockResolvedValue(mockProfile as any);\n      mockMedplumClient.readResource.mockRejectedValue(new Error('Not found'));\n      await service.initialize();\n    });\n\n    it('should search resources successfully', async () => {\n      const resourceType = 'Patient';\n      const searchParams = { family: 'Doe', given: 'John' };\n      const mockPatient = (global as any).createMockPatient();\n      \n      // Mock searchResources to return ResourceArray structure\n      const resourceArray = Object.assign([mockPatient], {\n        bundle: {\n          resourceType: 'Bundle' as const,\n          type: 'searchset' as const,\n          total: 1,\n          entry: [{ resource: mockPatient }]\n        }\n      });\n      \n      mockMedplumClient.searchResources.mockResolvedValue(resourceArray);\n\n      const result = await service.searchResources(resourceType, searchParams);\n\n      expect(mockMedplumClient.searchResources).toHaveBeenCalledWith(resourceType, {\n        family: 'Doe',\n        given: 'John'\n      });\n      \n      expect(result).toEqual({\n        resourceType: 'Bundle',\n        type: 'searchset',\n        total: 1,\n        entry: [{\n          resource: mockPatient,\n          fullUrl: `${mockPatient.resourceType}/${mockPatient.id}`\n        }]\n      });\n    });\n\n    it('should handle search with special parameters', async () => {\n      const resourceType = 'Patient';\n      const searchParams = {\n        family: 'Doe',\n        _count: 10,\n        _offset: 0,\n        _sort: 'family:asc,given:desc',\n        _include: 'Patient:general-practitioner',\n        _revinclude: 'Encounter:patient',\n        _elements: 'id,name,birthDate',\n      };\n\n      // Mock searchResources to return empty ResourceArray\n      const emptyResourceArray = Object.assign([], {\n        bundle: {\n          resourceType: 'Bundle' as const,\n          type: 'searchset' as const,\n          total: 0,\n          entry: []\n        }\n      });\n      \n      mockMedplumClient.searchResources.mockResolvedValue(emptyResourceArray);\n\n      await service.searchResources(resourceType, searchParams);\n\n      expect(mockMedplumClient.searchResources).toHaveBeenCalledWith(resourceType, {\n        family: 'Doe',\n        _count: 10,\n        _offset: 0,\n        _sort: 'family:asc,given:desc',\n        _include: 'Patient:general-practitioner',\n        _revinclude: 'Encounter:patient',\n        _elements: 'id,name,birthDate'\n      });\n    });\n\n    it('should handle search errors', async () => {\n      const resourceType = 'Patient';\n      const searchParams = { family: 'Doe' };\n      const error = new Error('Search failed');\n\n      mockMedplumClient.searchResources.mockRejectedValue(error);\n\n      await expect(service.searchResources(resourceType, searchParams)).rejects.toThrow(\n        'Search failed'\n      );\n      expect(mockLogger.error).toHaveBeenCalledWith(\n        `Failed to search ${resourceType} resources:`,\n        error\n      );\n    });\n  });\n\n  describe('Batch Operations', () => {\n    beforeEach(async () => {\n      const mockProfile = { resourceType: 'ProfileResource', id: 'profile-123' };\n      mockMedplumClient.startClientLogin.mockResolvedValue(mockProfile as any);\n      mockMedplumClient.readResource.mockRejectedValue(new Error('Not found'));\n      await service.initialize();\n    });\n\n    it('should execute batch bundle successfully', async () => {\n      const bundleRequest = {\n        resourceType: 'Bundle',\n        type: 'batch' as const,\n        resources: [\n          (global as any).createMockPatient(),\n          { ...(global as any).createMockPatient(), id: 'existing-patient-1' },\n        ],\n        timestamp: '2024-01-01T12:00:00Z',\n      };\n\n      const batchResponse = {\n        resourceType: 'Bundle' as const,\n        type: 'batch-response' as const,\n        entry: [\n          { response: { status: '201', location: 'Patient/new-patient-1' } },\n          { response: { status: '200', location: 'Patient/existing-patient-1' } },\n        ],\n      };\n\n      mockMedplumClient.executeBatch.mockResolvedValue(batchResponse);\n\n      const result = await service.executeBatch(bundleRequest);\n\n      expect(mockMedplumClient.executeBatch).toHaveBeenCalledWith({\n        resourceType: 'Bundle',\n        type: 'batch',\n        timestamp: '2024-01-01T12:00:00Z',\n        entry: [\n          {\n            request: { method: 'POST', url: 'Patient' },\n            resource: bundleRequest.resources[0],\n          },\n          {\n            request: { method: 'PUT', url: 'Patient/existing-patient-1' },\n            resource: bundleRequest.resources[1],\n          },\n        ],\n      });\n      expect(mockLogger.info).toHaveBeenCalledWith('Successfully executed batch bundle');\n      expect(result).toEqual(batchResponse);\n    });\n\n    it('should handle batch execution errors', async () => {\n      const bundleRequest = {\n        resourceType: 'Bundle',\n        type: 'batch' as const,\n        resources: [(global as any).createMockPatient()],\n      };\n\n      const error = new Error('Batch execution failed');\n      mockMedplumClient.executeBatch.mockRejectedValue(error);\n\n      await expect(service.executeBatch(bundleRequest)).rejects.toThrow(\n        'Batch execution failed'\n      );\n      expect(mockLogger.error).toHaveBeenCalledWith('Failed to execute batch bundle:', error);\n    });\n  });\n\n  describe('Utility Operations', () => {\n    beforeEach(async () => {\n      const mockProfile = { resourceType: 'ProfileResource', id: 'profile-123' };\n      mockMedplumClient.startClientLogin.mockResolvedValue(mockProfile as any);\n      mockMedplumClient.readResource.mockRejectedValue(new Error('Not found'));\n      await service.initialize();\n    });\n\n    it('should get capability statement', async () => {\n      const capabilityStatement = {\n        resourceType: 'CapabilityStatement',\n        status: 'active',\n        kind: 'instance',\n      };\n\n      mockMedplumClient.get.mockResolvedValue(capabilityStatement);\n\n      const result = await service.getCapabilityStatement();\n\n      expect(mockMedplumClient.get).toHaveBeenCalledWith('metadata');\n      expect(result).toEqual(capabilityStatement);\n    });\n\n    it('should execute GraphQL query', async () => {\n      const query = 'query { Patient { id name } }';\n      const variables = { limit: 10 };\n      const graphqlResponse = { data: { Patient: [] } };\n\n      mockMedplumClient.graphql.mockResolvedValue(graphqlResponse);\n\n      const result = await service.graphql(query, variables);\n\n      expect(mockMedplumClient.graphql).toHaveBeenCalledWith(query, variables);\n      expect(result).toEqual(graphqlResponse);\n    });\n\n    it('should validate resource', async () => {\n      const resource = (global as any).createMockPatient();\n      const validationResult = {\n        resourceType: 'OperationOutcome' as const,\n        issue: [],\n      };\n\n      mockMedplumClient.validateResource.mockResolvedValue(validationResult);\n\n      const result = await service.validateResource(resource);\n\n      expect(mockMedplumClient.validateResource).toHaveBeenCalledWith(resource);\n      expect(result).toEqual(validationResult);\n    });\n\n    it('should create subscription', async () => {\n      const criteria = 'Patient?active=true';\n      const channelType = 'webhook';\n      const endpoint = 'https://example.com/webhook';\n\n      const subscription = {\n        resourceType: 'Subscription' as const,\n        id: 'sub-123',\n        status: 'active' as const,\n        reason: 'OmniCare EMR Integration',\n        criteria,\n        channel: { \n          type: channelType as 'rest-hook',\n          endpoint,\n          payload: 'application/fhir+json'\n        },\n      };\n\n      mockMedplumClient.createResource.mockResolvedValue(subscription as any);\n\n      const result = await service.createSubscription(criteria, channelType, endpoint);\n\n      expect(mockMedplumClient.createResource).toHaveBeenCalledWith({\n        resourceType: 'Subscription',\n        status: 'requested',\n        reason: 'OmniCare EMR Integration',\n        criteria,\n        channel: {\n          type: channelType,\n          endpoint,\n          payload: 'application/fhir+json',\n        },\n      });\n      expect(result).toEqual(subscription);\n    });\n  });\n\n  describe('Health Status', () => {\n    it('should return DOWN status when not initialized', async () => {\n      const result = await service.getHealthStatus();\n\n      expect(result).toEqual({\n        status: 'DOWN',\n        details: { reason: 'Not initialized' },\n      });\n    });\n\n    it('should return UP status when healthy', async () => {\n      const mockProfile = { resourceType: 'ProfileResource', id: 'profile-123' };\n      mockMedplumClient.startClientLogin.mockResolvedValue(mockProfile as any);\n      mockMedplumClient.readResource.mockRejectedValue(new Error('Not found'));\n      mockMedplumClient.get.mockResolvedValue({ resourceType: 'CapabilityStatement' });\n\n      await service.initialize();\n      const result = await service.getHealthStatus();\n\n      expect(result.status).toBe('UP');\n      expect(result.details).toMatchObject({\n        baseUrl: config.medplum.baseUrl,\n        selfHosted: config.medplum.selfHosted,\n        initialized: true,\n      });\n      expect(result.details.responseTime).toMatch(/\\d+ms/);\n    });\n\n    it('should return DOWN status when unhealthy', async () => {\n      const mockProfile = { resourceType: 'ProfileResource', id: 'profile-123' };\n      mockMedplumClient.startClientLogin.mockResolvedValue(mockProfile as any);\n      mockMedplumClient.readResource.mockRejectedValue(new Error('Not found'));\n      await service.initialize();\n\n      const error = new Error('Service unavailable');\n      mockMedplumClient.get.mockRejectedValue(error);\n\n      const result = await service.getHealthStatus();\n\n      expect(result).toEqual({\n        status: 'DOWN',\n        details: {\n          error: 'Service unavailable',\n          reconnectAttempts: 0,\n        },\n      });\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should throw error when not initialized', async () => {\n      await expect(service.createResource((global as any).createMockPatient())).rejects.toThrow(\n        'MedplumService not initialized. Call initialize() first.'\n      );\n    });\n\n    it('should handle FHIR operation outcome in response data', async () => {\n      const mockProfile = { resourceType: 'ProfileResource', id: 'profile-123' };\n      mockMedplumClient.startClientLogin.mockResolvedValue(mockProfile as any);\n      mockMedplumClient.readResource.mockRejectedValue(new Error('Not found'));\n      await service.initialize();\n\n      const fhirError = {\n        response: {\n          data: {\n            resourceType: 'OperationOutcome',\n            issue: [\n              {\n                severity: 'error',\n                code: 'invalid',\n                details: { text: 'Invalid resource format' },\n              },\n            ],\n          },\n        },\n      };\n\n      mockMedplumClient.createResource.mockRejectedValue(fhirError);\n\n      await expect(service.createResource((global as any).createMockPatient())).rejects.toThrow(\n        'FHIR Error: Invalid resource format'\n      );\n    });\n\n    it('should handle non-Error objects', async () => {\n      const mockProfile = { resourceType: 'ProfileResource', id: 'profile-123' };\n      mockMedplumClient.startClientLogin.mockResolvedValue(mockProfile as any);\n      mockMedplumClient.readResource.mockRejectedValue(new Error('Not found'));\n      await service.initialize();\n\n      mockMedplumClient.createResource.mockRejectedValue('String error');\n\n      await expect(service.createResource((global as any).createMockPatient())).rejects.toThrow(\n        'String error'\n      );\n    });\n  });\n\n  describe('Shutdown', () => {\n    it('should shutdown service properly', async () => {\n      const mockProfile = { resourceType: 'ProfileResource', id: 'profile-123' };\n      mockMedplumClient.startClientLogin.mockResolvedValue(mockProfile as any);\n      mockMedplumClient.readResource.mockRejectedValue(new Error('Not found'));\n      await service.initialize();\n\n      await service.shutdown();\n\n      expect(mockLogger.info).toHaveBeenCalledWith('Shutting down Medplum service...');\n      \n      // Service should not be initialized after shutdown\n      await expect(service.createResource((global as any).createMockPatient())).rejects.toThrow(\n        'MedplumService not initialized. Call initialize() first.'\n      );\n    });\n  });\n});"],"version":3}