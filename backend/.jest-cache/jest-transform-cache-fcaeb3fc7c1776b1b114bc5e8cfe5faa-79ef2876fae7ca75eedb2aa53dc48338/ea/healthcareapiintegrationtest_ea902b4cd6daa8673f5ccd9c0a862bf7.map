{"file":"/Users/rodrigo/claude-projects/OmniCare/backend/tests/integration/healthcare-api.integration.test.ts","mappings":"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","names":[],"sources":["/Users/rodrigo/claude-projects/OmniCare/backend/tests/integration/healthcare-api.integration.test.ts"],"sourcesContent":["import request from 'supertest';\nimport { app } from '../../src/app';\nimport { medplumService } from '../../src/services/medplum.service';\nimport { fhirResourcesService } from '../../src/services/fhir-resources.service';\nimport { smartFHIRService } from '../../src/services/smart-fhir.service';\nimport { fhirValidationService } from '../../src/services/integration/fhir/fhir-validation.service';\nimport { directTrustService } from '../../src/services/integration/direct/direct-trust.service';\nimport { hl7v2ParserService } from '../../src/services/integration/hl7v2/hl7v2-parser.service';\nimport { Patient, Encounter, Observation, Bundle } from '@medplum/fhirtypes';\nimport logger from '../../src/utils/logger';\n\n/**\n * Healthcare API Integration Tests\n * Tests end-to-end FHIR API operations including CRUD, search, and validation\n */\ndescribe('Healthcare API Integration Tests', () => {\n  let testPatientId: string;\n  let testEncounterId: string;\n  let testPractitionerId: string;\n  let accessToken: string;\n\n  beforeAll(async () => {\n    // Initialize all services\n    await medplumService.initialize();\n    await setupTestData();\n  });\n\n  afterAll(async () => {\n    // Cleanup test data\n    await cleanupTestData();\n  });\n\n  describe('FHIR Server Integration (Medplum)', () => {\n    test('should connect to Medplum FHIR server', async () => {\n      const healthStatus = await medplumService.getHealthStatus();\n      expect(healthStatus.status).toBe('UP');\n      expect(healthStatus.details.initialized).toBe(true);\n    });\n\n    test('should retrieve FHIR capability statement', async () => {\n      const capabilityStatement = await medplumService.getCapabilityStatement();\n      expect(capabilityStatement).toBeDefined();\n      expect(capabilityStatement.resourceType).toBe('CapabilityStatement');\n    });\n\n    test('should validate FHIR server compliance', async () => {\n      const capabilityStatement = await medplumService.getCapabilityStatement();\n      expect(capabilityStatement.fhirVersion).toMatch(/4\\.0\\.\\d+/);\n      expect(capabilityStatement.status).toBe('active');\n      expect(capabilityStatement.kind).toBe('instance');\n    });\n  });\n\n  describe('Patient Data Flow Integration', () => {\n    test('should create, read, update, and delete patient records', async () => {\n      // CREATE\n      const patientData = {\n        name: [{ given: ['Integration'], family: 'Test' }],\n        gender: 'male' as const,\n        birthDate: '1990-01-01',\n        telecom: [\n          { system: 'phone' as const, value: '555-0123', use: 'mobile' as const }\n        ],\n        address: [{\n          use: 'home',\n          line: ['123 Test St'],\n          city: 'Test City',\n          state: 'TS',\n          postalCode: '12345'\n        }]\n      };\n\n      const createdPatient = await fhirResourcesService.createPatient(patientData);\n      expect(createdPatient.id).toBeDefined();\n      expect(createdPatient.resourceType).toBe('Patient');\n      testPatientId = createdPatient.id!;\n\n      // READ\n      const retrievedPatient = await fhirResourcesService.getPatient(testPatientId);\n      expect(retrievedPatient.id).toBe(testPatientId);\n      expect(retrievedPatient.name?.[0]?.family).toBe('Test');\n\n      // UPDATE\n      const updatedPatientData = {\n        ...retrievedPatient,\n        name: [{ given: ['Integration', 'Updated'], family: 'Test' }]\n      };\n      const updatedPatient = await fhirResourcesService.updatePatient(updatedPatientData);\n      expect(updatedPatient.name?.[0]?.given).toContain('Updated');\n\n      // SEARCH\n      const searchResults = await fhirResourcesService.searchPatients({\n        family: 'Test',\n        given: 'Integration'\n      });\n      expect(searchResults.total).toBeGreaterThan(0);\n      expect(searchResults.entry?.length).toBeGreaterThan(0);\n    });\n\n    test('should handle patient data validation', async () => {\n      const invalidPatient = {\n        resourceType: 'Patient',\n        // Missing required fields\n      };\n\n      const validationResult = await fhirValidationService.validateResource(invalidPatient);\n      expect(validationResult.valid).toBe(false);\n      expect(validationResult.errors.length).toBeGreaterThan(0);\n    });\n\n    test('should retrieve patient everything bundle', async () => {\n      const everythingBundle = await fhirResourcesService.getPatientEverything(testPatientId);\n      expect(everythingBundle.resourceType).toBe('Bundle');\n      expect(everythingBundle.type).toBe('searchset');\n      expect(everythingBundle.entry).toBeDefined();\n    });\n  });\n\n  describe('Clinical Encounter Management', () => {\n    test('should create and manage encounters', async () => {\n      const encounterData = {\n        status: 'planned' as const,\n        subject: { reference: `Patient/${testPatientId}` },\n        period: {\n          start: new Date().toISOString(),\n          end: new Date(Date.now() + 3600000).toISOString() // 1 hour later\n        },\n        appointmentType: 'routine',\n        chiefComplaint: 'Integration test encounter'\n      };\n\n      const createdEncounter = await fhirResourcesService.createEncounter(encounterData);\n      expect(createdEncounter.id).toBeDefined();\n      expect(createdEncounter.status).toBe('planned');\n      testEncounterId = createdEncounter.id!;\n    });\n\n    test('should create vital signs observations', async () => {\n      const vitals = {\n        temperature: 98.6,\n        bloodPressureSystolic: 120,\n        bloodPressureDiastolic: 80,\n        heartRate: 72,\n        respiratoryRate: 16,\n        oxygenSaturation: 98\n      };\n\n      const vitalObservations = await fhirResourcesService.createVitalSigns(\n        testPatientId,\n        testEncounterId,\n        vitals\n      );\n\n      expect(vitalObservations.length).toBeGreaterThan(0);\n      vitalObservations.forEach(obs => {\n        expect(obs.resourceType).toBe('Observation');\n        expect(obs.status).toBe('final');\n        expect(obs.subject?.reference).toBe(`Patient/${testPatientId}`);\n        expect(obs.encounter?.reference).toBe(`Encounter/${testEncounterId}`);\n      });\n    });\n  });\n\n  describe('FHIR Validation Service Integration', () => {\n    test('should validate FHIR resources against R4 schema', async () => {\n      const validPatient: Patient = {\n        resourceType: 'Patient',\n        active: true,\n        name: [{ given: ['Valid'], family: 'Patient' }],\n        gender: 'male',\n        birthDate: '1990-01-01'\n      };\n\n      const validationResult = await fhirValidationService.validateResource(validPatient);\n      expect(validationResult.valid).toBe(true);\n      expect(validationResult.errors.length).toBe(0);\n    });\n\n    test('should detect validation errors', async () => {\n      const invalidPatient = {\n        resourceType: 'Patient',\n        birthDate: '2030-01-01', // Future birth date - business rule violation\n        gender: 'invalid-gender' // Invalid gender value\n      };\n\n      const validationResult = await fhirValidationService.validateResource(invalidPatient);\n      expect(validationResult.valid).toBe(false);\n      expect(validationResult.errors.length).toBeGreaterThan(0);\n    });\n\n    test('should validate bundle resources', async () => {\n      const bundle: Bundle = {\n        resourceType: 'Bundle',\n        type: 'collection',\n        entry: [\n          {\n            resource: {\n              resourceType: 'Patient',\n              active: true,\n              name: [{ given: ['Bundle'], family: 'Test' }],\n              gender: 'female'\n            }\n          }\n        ]\n      };\n\n      const bundleValidation = await fhirValidationService.validateBundle(bundle);\n      expect(bundleValidation.valid).toBe(true);\n    });\n  });\n\n  describe('SMART on FHIR Integration', () => {\n    test('should initiate SMART authorization flow', async () => {\n      const clientId = 'test-client-id';\n      const redirectUri = 'http://localhost:3000/callback';\n      const scopes = ['patient/Patient.read', 'patient/Observation.read'];\n\n      const authFlow = await smartFHIRService.initiateAuthorization(\n        clientId,\n        redirectUri,\n        scopes\n      );\n\n      expect(authFlow.authorizationUrl).toBeDefined();\n      expect(authFlow.state).toBeDefined();\n      expect(authFlow.authorizationUrl).toContain('response_type=code');\n      expect(authFlow.authorizationUrl).toContain(`client_id=${clientId}`);\n    });\n\n    test('should get SMART configuration from EHR', async () => {\n      const mockFhirBaseUrl = 'https://fhir.epic.com/interconnect-fhir-oauth';\n      \n      try {\n        const smartConfig = await smartFHIRService.getSMARTConfiguration(mockFhirBaseUrl);\n        expect(smartConfig).toBeDefined();\n        expect(smartConfig.authorization_endpoint).toBeDefined();\n        expect(smartConfig.token_endpoint).toBeDefined();\n      } catch (error) {\n        // Expected for mock URL - test structure is valid\n        expect(error).toBeDefined();\n      }\n    });\n\n    test('should validate JWT tokens', () => {\n      const mockJWT = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c';\n      \n      try {\n        const decoded = smartFHIRService.validateJWT(mockJWT);\n        expect(decoded).toBeDefined();\n      } catch (error) {\n        // Expected with mock JWT - test structure is valid\n        expect(error).toBeDefined();\n      }\n    });\n  });\n\n  describe('Batch Operations Integration', () => {\n    test('should execute FHIR batch bundle', async () => {\n      const batchResources = [\n        {\n          resourceType: 'Patient',\n          name: [{ given: ['Batch'], family: 'Test1' }],\n          gender: 'male'\n        },\n        {\n          resourceType: 'Patient',\n          name: [{ given: ['Batch'], family: 'Test2' }],\n          gender: 'female'\n        }\n      ];\n\n      const batchRequest = {\n        type: 'batch' as const,\n        resources: batchResources,\n        timestamp: new Date().toISOString()\n      };\n\n      const batchResult = await medplumService.executeBatch(batchRequest);\n      expect(batchResult.resourceType).toBe('Bundle');\n      expect(batchResult.type).toBe('batch-response');\n    });\n\n    test('should handle transaction bundles', async () => {\n      const transactionResources = [\n        {\n          resourceType: 'Patient',\n          name: [{ given: ['Transaction'], family: 'Test' }],\n          gender: 'other'\n        }\n      ];\n\n      const transactionRequest = {\n        type: 'transaction' as const,\n        resources: transactionResources,\n        timestamp: new Date().toISOString()\n      };\n\n      const transactionResult = await medplumService.executeBatch(transactionRequest);\n      expect(transactionResult.resourceType).toBe('Bundle');\n    });\n  });\n\n  describe('Error Handling and Resilience', () => {\n    test('should handle FHIR server connection errors gracefully', async () => {\n      // Simulate connection error by using invalid resource type\n      try {\n        await medplumService.readResource('InvalidResourceType' as any, 'invalid-id');\n      } catch (error) {\n        expect(error).toBeDefined();\n        expect(error.message).toContain('FHIR Error');\n      }\n    });\n\n    test('should handle validation errors for malformed resources', async () => {\n      const malformedResource = {\n        resourceType: 'Patient',\n        name: 'This should be an array, not a string'\n      };\n\n      const validationResult = await fhirValidationService.validateResource(malformedResource);\n      expect(validationResult.valid).toBe(false);\n      expect(validationResult.errors.length).toBeGreaterThan(0);\n    });\n\n    test('should handle network timeouts gracefully', async () => {\n      // Test timeout handling by using very long search\n      const searchParams = {\n        _count: 1000000,\n        _sort: 'name'\n      };\n\n      try {\n        const results = await fhirResourcesService.searchPatients(searchParams);\n        expect(results).toBeDefined();\n      } catch (error) {\n        // Timeout or other network error is acceptable\n        expect(error).toBeDefined();\n      }\n    });\n  });\n\n  describe('Performance and Load Testing', () => {\n    test('should handle concurrent patient creation', async () => {\n      const patientPromises = Array(5).fill(0).map((_, i) => {\n        const patientData = {\n          name: [{ given: ['Concurrent'], family: `Test${i}` }],\n          gender: 'unknown' as const,\n          birthDate: '1990-01-01'\n        };\n        return fhirResourcesService.createPatient(patientData);\n      });\n\n      const patients = await Promise.allSettled(patientPromises);\n      const successfulPatients = patients.filter(p => p.status === 'fulfilled');\n      expect(successfulPatients.length).toBeGreaterThan(0);\n    });\n\n    test('should handle large search result sets', async () => {\n      const searchParams = {\n        _count: 100,\n        active: 'true'\n      };\n\n      const startTime = Date.now();\n      const results = await fhirResourcesService.searchPatients(searchParams);\n      const endTime = Date.now();\n\n      expect(results).toBeDefined();\n      expect(endTime - startTime).toBeLessThan(10000); // Should complete within 10 seconds\n    });\n  });\n\n  // Helper functions\n  async function setupTestData(): Promise<void> {\n    try {\n      // Create test practitioner\n      const practitionerData = {\n        name: [{ given: ['Test'], family: 'Practitioner' }],\n        identifier: [{\n          system: 'http://hl7.org/fhir/sid/us-npi',\n          value: '1234567890'\n        }]\n      };\n      const practitioner = await fhirResourcesService.createPractitioner(practitionerData);\n      testPractitionerId = practitioner.id!;\n    } catch (error) {\n      logger.warn('Failed to setup test data:', error);\n    }\n  }\n\n  async function cleanupTestData(): Promise<void> {\n    try {\n      // Cleanup is handled by the test environment\n      // In production, you would delete test resources here\n      if (testPatientId) {\n        await medplumService.deleteResource('Patient', testPatientId);\n      }\n      if (testEncounterId) {\n        await medplumService.deleteResource('Encounter', testEncounterId);\n      }\n      if (testPractitionerId) {\n        await medplumService.deleteResource('Practitioner', testPractitionerId);\n      }\n    } catch (error) {\n      logger.warn('Failed to cleanup test data:', error);\n    }\n  }\n});"],"version":3}