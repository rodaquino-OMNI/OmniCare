630bdf381f032487006d3eb09b70aa2d
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const winston_1 = __importDefault(require("winston"));
// Import config with fallback for tests
let config;
try {
    config = require('../config').default;
}
catch (error) {
    // Mock config for tests
    config = {
        server: { env: process.env.NODE_ENV || 'test' },
        logging: { level: 'info', file: '/tmp/test.log' }
    };
}
// Custom format for structured logging
const customFormat = winston_1.default.format.combine(winston_1.default.format.timestamp({
    format: 'YYYY-MM-DD HH:mm:ss',
}), winston_1.default.format.errors({ stack: true }), winston_1.default.format.json());
// Console format for development
const consoleFormat = winston_1.default.format.combine(winston_1.default.format.timestamp({
    format: 'HH:mm:ss',
}), winston_1.default.format.colorize(), winston_1.default.format.simple());
// Create transports array
const transports = [];
// Console transport for all environments
transports.push(new winston_1.default.transports.Console({
    level: config.server.env === 'development' ? 'debug' : 'info',
    format: config.server.env === 'development' ? consoleFormat : customFormat,
    handleExceptions: true,
    handleRejections: true,
}));
// File transport for production
if (config.server.env === 'production') {
    // Ensure logs directory exists
    const logDir = path_1.default.dirname(config.logging.file);
    transports.push(
    // General log file
    new winston_1.default.transports.File({
        filename: config.logging.file,
        level: config.logging.level,
        format: customFormat,
        maxsize: 10 * 1024 * 1024, // 10MB
        maxFiles: 5,
        tailable: true,
        handleExceptions: true,
        handleRejections: true,
    }), 
    // Error log file
    new winston_1.default.transports.File({
        filename: path_1.default.join(logDir, 'error.log'),
        level: 'error',
        format: customFormat,
        maxsize: 10 * 1024 * 1024, // 10MB
        maxFiles: 5,
        tailable: true,
        handleExceptions: true,
        handleRejections: true,
    }));
}
// Create the logger instance
const logger = winston_1.default.createLogger({
    level: config.logging.level,
    format: customFormat,
    transports,
    exitOnError: false,
});
// Extend logger with custom methods
const customLogger = logger;
customLogger.fhir = (message, meta) => {
    logger.info(message, { context: 'FHIR', ...meta });
};
customLogger.security = (message, meta) => {
    logger.warn(message, { context: 'SECURITY', ...meta });
};
customLogger.performance = (message, meta) => {
    logger.info(message, { context: 'PERFORMANCE', ...meta });
};
customLogger.audit = (message, meta) => {
    logger.info(message, { context: 'AUDIT', ...meta });
};
customLogger.integration = (message, meta) => {
    logger.info(message, { context: 'INTEGRATION', ...meta });
};
// Handle uncaught exceptions and rejections
process.on('uncaughtException', (error) => {
    logger.error('Uncaught Exception:', error);
    process.exit(1);
});
process.on('unhandledRejection', (reason, promise) => {
    logger.error('Unhandled Rejection at:', promise, 'reason:', reason);
    process.exit(1);
});
exports.default = customLogger;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,