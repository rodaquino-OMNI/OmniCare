{"file":"/Users/rodrigo/claude-projects/OmniCare/backend/src/utils/logger.ts","mappings":"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","names":[],"sources":["/Users/rodrigo/claude-projects/OmniCare/backend/src/utils/logger.ts"],"sourcesContent":["import path from 'path';\n\nimport winston from 'winston';\n\n// Import config with fallback for tests\nlet config: any;\ntry {\n  const configModule = require('../config');\n  config = configModule.default || configModule;\n  // Ensure config is properly structured\n  if (!config || !config.server) {\n    throw new Error('Invalid config structure');\n  }\n} catch (error) {\n  // Mock config for tests\n  config = {\n    server: { env: process.env.NODE_ENV || 'test' },\n    logging: { level: 'info', file: '/tmp/test.log' }\n  };\n}\n\n// Custom format for structured logging\nconst customFormat = winston.format.combine(\n  winston.format.timestamp({\n    format: 'YYYY-MM-DD HH:mm:ss',\n  }),\n  winston.format.errors({ stack: true }),\n  winston.format.json()\n);\n\n// Console format for development\nconst consoleFormat = winston.format.combine(\n  winston.format.timestamp({\n    format: 'HH:mm:ss',\n  }),\n  winston.format.colorize(),\n  winston.format.printf(({ timestamp, level, message, ...meta }) => {\n    return `${timestamp} [${level}]: ${message} ${Object.keys(meta).length ? JSON.stringify(meta, null, 2) : ''}`;\n  })\n);\n\n// Create transports array\nconst transports: winston.transport[] = [];\n\n// Console transport for all environments\ntransports.push(\n  new winston.transports.Console({\n    level: config.server.env === 'development' ? 'debug' : 'info',\n    format: config.server.env === 'development' ? consoleFormat : customFormat,\n    handleExceptions: true,\n    handleRejections: true,\n  })\n);\n\n// File transport for production\nif (config.server.env === 'production') {\n  // Ensure logs directory exists\n  const logDir = path.dirname(config.logging.file);\n  \n  transports.push(\n    // General log file\n    new winston.transports.File({\n      filename: config.logging.file,\n      level: config.logging.level,\n      format: customFormat,\n      maxsize: 10 * 1024 * 1024, // 10MB\n      maxFiles: 5,\n      tailable: true,\n      handleExceptions: true,\n      handleRejections: true,\n    }),\n    \n    // Error log file\n    new winston.transports.File({\n      filename: path.join(logDir, 'error.log'),\n      level: 'error',\n      format: customFormat,\n      maxsize: 10 * 1024 * 1024, // 10MB\n      maxFiles: 5,\n      tailable: true,\n      handleExceptions: true,\n      handleRejections: true,\n    })\n  );\n}\n\n// Create the logger instance\nconst logger = winston.createLogger({\n  level: config.logging.level,\n  format: customFormat,\n  transports,\n  exitOnError: false,\n});\n\n// Add custom logging methods for different contexts\ninterface CustomLogger extends winston.Logger {\n  fhir: (message: string, meta?: any) => void;\n  security: (message: string, meta?: any) => void;\n  performance: (message: string, meta?: any) => void;\n  audit: (message: string, meta?: any) => void;\n  integration: (message: string, meta?: any) => void;\n}\n\n// Extend logger with custom methods\nconst customLogger = logger as CustomLogger;\n\ncustomLogger.fhir = (message: string, meta?: any) => {\n  logger.info(message, { context: 'FHIR', ...meta });\n};\n\ncustomLogger.security = (message: string, meta?: any) => {\n  logger.warn(message, { context: 'SECURITY', ...meta });\n};\n\ncustomLogger.performance = (message: string, meta?: any) => {\n  logger.info(message, { context: 'PERFORMANCE', ...meta });\n};\n\ncustomLogger.audit = (message: string, meta?: any) => {\n  logger.info(message, { context: 'AUDIT', ...meta });\n};\n\ncustomLogger.integration = (message: string, meta?: any) => {\n  logger.info(message, { context: 'INTEGRATION', ...meta });\n};\n\n// Handle uncaught exceptions and rejections\nprocess.on('uncaughtException', (error) => {\n  logger.error('Uncaught Exception:', error);\n  process.exit(1);\n});\n\nprocess.on('unhandledRejection', (reason, promise) => {\n  logger.error('Unhandled Rejection at:', promise, 'reason:', reason);\n  process.exit(1);\n});\n\nexport default customLogger;"],"version":3}