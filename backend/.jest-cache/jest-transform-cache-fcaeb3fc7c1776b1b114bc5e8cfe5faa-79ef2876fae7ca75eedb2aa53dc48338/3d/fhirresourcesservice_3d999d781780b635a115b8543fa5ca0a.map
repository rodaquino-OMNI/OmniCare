{"file":"/Users/rodrigo/claude-projects/OmniCare/backend/src/services/fhir-resources.service.ts","mappings":"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","names":[],"sources":["/Users/rodrigo/claude-projects/OmniCare/backend/src/services/fhir-resources.service.ts"],"sourcesContent":["import {\n  Patient,\n  Practitioner,\n  Organization,\n  Location,\n  Encounter,\n  Observation,\n  Medication,\n  MedicationRequest,\n  ServiceRequest,\n  DiagnosticReport,\n  CarePlan,\n  Communication,\n  Task,\n  DocumentReference,\n  Condition,\n  Procedure,\n  AllergyIntolerance,\n  Immunization,\n  Bundle,\n} from '@medplum/fhirtypes';\n\nimport { medplumService } from './medplum.service';\n\nimport { \n  OmniCarePatient, \n  OmniCareEncounter, \n  OmniCareObservation,\n  FHIRSearchParams,\n  ValidationResult,\n} from '@/types/fhir';\nimport logger from '@/utils/logger';\n\n/**\n * FHIR Resources Service\n * Implements FHIR R4 resource management for all clinical data types\n * used in the OmniCare EMR system\n */\nexport class FHIRResourcesService {\n  \n  // ===============================\n  // PATIENT RESOURCES\n  // ===============================\n\n  /**\n   * Create a new patient record\n   */\n  async createPatient(patientData: Partial<OmniCarePatient>): Promise<Patient> {\n    try {\n      const patient: Patient = {\n        resourceType: 'Patient',\n        active: true,\n        name: patientData.name || [],\n        gender: patientData.gender,\n        birthDate: patientData.birthDate,\n        address: patientData.address || [],\n        telecom: patientData.telecom || [],\n        identifier: [\n          ...(patientData.identifier || []),\n          {\n            system: 'http://omnicare.com/patient-id',\n            value: patientData.omnicarePatientId || `P${Date.now()}`,\n          },\n        ],\n        contact: patientData.contact || [],\n        communication: patientData.communication || [],\n        generalPractitioner: patientData.generalPractitioner || [],\n        managingOrganization: patientData.managingOrganization,\n        extension: [\n          ...(patientData.extension || []),\n          // Add OmniCare-specific extensions\n          {\n            url: 'http://omnicare.com/fhir/StructureDefinition/registration-date',\n            valueDateTime: patientData.registrationDate || new Date().toISOString(),\n          },\n          {\n            url: 'http://omnicare.com/fhir/StructureDefinition/preferred-language',\n            valueString: patientData.preferredLanguage || 'en',\n          },\n        ],\n      };\n\n      const result = await medplumService.createResource(patient);\n      logger.fhir('Patient created successfully', { patientId: result.id });\n      return result;\n    } catch (error) {\n      logger.error('Failed to create patient:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Search for patients with various criteria\n   */\n  async searchPatients(searchParams: FHIRSearchParams): Promise<Bundle<Patient>> {\n    try {\n      const result = await medplumService.searchResources<Patient>('Patient', searchParams);\n      logger.fhir('Patient search completed', { \n        resultCount: result.entry?.length || 0,\n        total: result.total,\n      });\n      return result;\n    } catch (error) {\n      logger.error('Failed to search patients:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get patient by ID\n   */\n  async getPatient(patientId: string): Promise<Patient> {\n    try {\n      const result = await medplumService.readResource<Patient>('Patient', patientId);\n      logger.fhir('Patient retrieved', { patientId });\n      return result;\n    } catch (error) {\n      logger.error('Failed to get patient:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Update patient information\n   */\n  async updatePatient(patient: Patient): Promise<Patient> {\n    try {\n      const result = await medplumService.updateResource(patient);\n      logger.fhir('Patient updated successfully', { patientId: result.id });\n      return result;\n    } catch (error) {\n      logger.error('Failed to update patient:', error);\n      throw error;\n    }\n  }\n\n  // ===============================\n  // PRACTITIONER RESOURCES\n  // ===============================\n\n  /**\n   * Create a new practitioner record\n   */\n  async createPractitioner(practitionerData: Partial<Practitioner>): Promise<Practitioner> {\n    try {\n      const practitioner: Practitioner = {\n        resourceType: 'Practitioner',\n        active: true,\n        name: practitionerData.name || [],\n        identifier: [\n          ...(practitionerData.identifier || []),\n          {\n            system: 'http://omnicare.com/practitioner-id',\n            value: `PR${Date.now()}`,\n          },\n        ],\n        telecom: practitionerData.telecom || [],\n        address: practitionerData.address || [],\n        gender: practitionerData.gender,\n        birthDate: practitionerData.birthDate,\n        qualification: practitionerData.qualification || [],\n        communication: practitionerData.communication || [],\n      };\n\n      const result = await medplumService.createResource(practitioner);\n      logger.fhir('Practitioner created successfully', { practitionerId: result.id });\n      return result;\n    } catch (error) {\n      logger.error('Failed to create practitioner:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Search for practitioners\n   */\n  async searchPractitioners(searchParams: FHIRSearchParams): Promise<Bundle<Practitioner>> {\n    try {\n      const result = await medplumService.searchResources<Practitioner>('Practitioner', searchParams);\n      logger.fhir('Practitioner search completed', { \n        resultCount: result.entry?.length || 0 \n      });\n      return result;\n    } catch (error) {\n      logger.error('Failed to search practitioners:', error);\n      throw error;\n    }\n  }\n\n  // ===============================\n  // ENCOUNTER RESOURCES\n  // ===============================\n\n  /**\n   * Create a new encounter\n   */\n  async createEncounter(encounterData: Partial<OmniCareEncounter>): Promise<Encounter> {\n    try {\n      const encounter: Encounter = {\n        resourceType: 'Encounter',\n        status: encounterData.status || 'planned',\n        class: encounterData.class || {\n          system: 'http://terminology.hl7.org/CodeSystem/v3-ActCode',\n          code: 'AMB',\n          display: 'Ambulatory',\n        },\n        type: encounterData.type || [],\n        subject: encounterData.subject || { reference: '' },\n        participant: encounterData.participant || [],\n        period: encounterData.period,\n        reasonCode: encounterData.reasonCode || [],\n        serviceProvider: encounterData.serviceProvider,\n        identifier: [\n          ...(encounterData.identifier || []),\n          {\n            system: 'http://omnicare.com/encounter-id',\n            value: encounterData.omnicareEncounterId || `E${Date.now()}`,\n          },\n        ],\n        extension: [\n          ...(encounterData.extension || []),\n          {\n            url: 'http://omnicare.com/fhir/StructureDefinition/appointment-type',\n            valueString: encounterData.appointmentType || 'routine',\n          },\n          {\n            url: 'http://omnicare.com/fhir/StructureDefinition/chief-complaint',\n            valueString: encounterData.chiefComplaint || '',\n          },\n        ],\n      };\n\n      const result = await medplumService.createResource(encounter);\n      logger.fhir('Encounter created successfully', { encounterId: result.id });\n      return result;\n    } catch (error) {\n      logger.error('Failed to create encounter:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Search for encounters\n   */\n  async searchEncounters(searchParams: FHIRSearchParams): Promise<Bundle<Encounter>> {\n    try {\n      const result = await medplumService.searchResources<Encounter>('Encounter', searchParams);\n      logger.fhir('Encounter search completed', { \n        resultCount: result.entry?.length || 0 \n      });\n      return result;\n    } catch (error) {\n      logger.error('Failed to search encounters:', error);\n      throw error;\n    }\n  }\n\n  // ===============================\n  // OBSERVATION RESOURCES\n  // ===============================\n\n  /**\n   * Create a new observation\n   */\n  async createObservation(observationData: Partial<OmniCareObservation>): Promise<Observation> {\n    try {\n      const observation: Observation = {\n        resourceType: 'Observation',\n        status: observationData.status || 'final',\n        category: observationData.category || [{\n          coding: [{\n            system: 'http://terminology.hl7.org/CodeSystem/observation-category',\n            code: 'vital-signs',\n            display: 'Vital Signs',\n          }],\n        }],\n        code: observationData.code || {\n          coding: [{\n            system: 'http://loinc.org',\n            code: '8310-5',\n            display: 'Body temperature',\n          }],\n        },\n        subject: observationData.subject || { reference: '' },\n        encounter: observationData.encounter,\n        effectiveDateTime: observationData.effectiveDateTime || new Date().toISOString(),\n        performer: observationData.performer || [],\n        valueQuantity: observationData.valueQuantity,\n        valueCodeableConcept: observationData.valueCodeableConcept,\n        valueString: observationData.valueString,\n        valueBoolean: observationData.valueBoolean,\n        identifier: [\n          ...(observationData.identifier || []),\n          {\n            system: 'http://omnicare.com/observation-id',\n            value: observationData.omnicareObservationId || `O${Date.now()}`,\n          },\n        ],\n        extension: [\n          ...(observationData.extension || []),\n          {\n            url: 'http://omnicare.com/fhir/StructureDefinition/device-used',\n            valueString: observationData.deviceUsed || '',\n          },\n        ],\n      };\n\n      const result = await medplumService.createResource(observation);\n      logger.fhir('Observation created successfully', { observationId: result.id });\n      return result;\n    } catch (error) {\n      logger.error('Failed to create observation:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Create vital signs observations\n   */\n  async createVitalSigns(\n    patientId: string,\n    encounterId: string,\n    vitals: {\n      temperature?: number;\n      bloodPressureSystolic?: number;\n      bloodPressureDiastolic?: number;\n      heartRate?: number;\n      respiratoryRate?: number;\n      oxygenSaturation?: number;\n      weight?: number;\n      height?: number;\n    }\n  ): Promise<Observation[]> {\n    const observations: Observation[] = [];\n\n    try {\n      // Temperature\n      if (vitals.temperature) {\n        const tempObservation = await this.createObservation({\n          status: 'final',\n          category: [{\n            coding: [{\n              system: 'http://terminology.hl7.org/CodeSystem/observation-category',\n              code: 'vital-signs',\n              display: 'Vital Signs',\n            }],\n          }],\n          code: {\n            coding: [{\n              system: 'http://loinc.org',\n              code: '8310-5',\n              display: 'Body temperature',\n            }],\n          },\n          subject: { reference: `Patient/${patientId}` },\n          encounter: { reference: `Encounter/${encounterId}` },\n          valueQuantity: {\n            value: vitals.temperature,\n            unit: '°F',\n            system: 'http://unitsofmeasure.org',\n            code: '[degF]',\n          },\n        });\n        observations.push(tempObservation);\n      }\n\n      // Blood Pressure\n      if (vitals.bloodPressureSystolic && vitals.bloodPressureDiastolic) {\n        const bpObservation = await this.createObservation({\n          status: 'final',\n          category: [{\n            coding: [{\n              system: 'http://terminology.hl7.org/CodeSystem/observation-category',\n              code: 'vital-signs',\n              display: 'Vital Signs',\n            }],\n          }],\n          code: {\n            coding: [{\n              system: 'http://loinc.org',\n              code: '85354-9',\n              display: 'Blood pressure panel with all children optional',\n            }],\n          },\n          subject: { reference: `Patient/${patientId}` },\n          encounter: { reference: `Encounter/${encounterId}` },\n          component: [\n            {\n              code: {\n                coding: [{\n                  system: 'http://loinc.org',\n                  code: '8480-6',\n                  display: 'Systolic blood pressure',\n                }],\n              },\n              valueQuantity: {\n                value: vitals.bloodPressureSystolic,\n                unit: 'mmHg',\n                system: 'http://unitsofmeasure.org',\n                code: 'mm[Hg]',\n              },\n            },\n            {\n              code: {\n                coding: [{\n                  system: 'http://loinc.org',\n                  code: '8462-4',\n                  display: 'Diastolic blood pressure',\n                }],\n              },\n              valueQuantity: {\n                value: vitals.bloodPressureDiastolic,\n                unit: 'mmHg',\n                system: 'http://unitsofmeasure.org',\n                code: 'mm[Hg]',\n              },\n            },\n          ],\n        });\n        observations.push(bpObservation);\n      }\n\n      // Heart Rate\n      if (vitals.heartRate) {\n        const hrObservation = await this.createObservation({\n          status: 'final',\n          category: [{\n            coding: [{\n              system: 'http://terminology.hl7.org/CodeSystem/observation-category',\n              code: 'vital-signs',\n              display: 'Vital Signs',\n            }],\n          }],\n          code: {\n            coding: [{\n              system: 'http://loinc.org',\n              code: '8867-4',\n              display: 'Heart rate',\n            }],\n          },\n          subject: { reference: `Patient/${patientId}` },\n          encounter: { reference: `Encounter/${encounterId}` },\n          valueQuantity: {\n            value: vitals.heartRate,\n            unit: 'beats/min',\n            system: 'http://unitsofmeasure.org',\n            code: '/min',\n          },\n        });\n        observations.push(hrObservation);\n      }\n\n      logger.fhir('Vital signs created successfully', { \n        patientId,\n        encounterId,\n        vitalsCount: observations.length,\n      });\n\n      return observations;\n    } catch (error) {\n      logger.error('Failed to create vital signs:', error);\n      throw error;\n    }\n  }\n\n  // ===============================\n  // MEDICATION RESOURCES\n  // ===============================\n\n  /**\n   * Create a medication request (prescription)\n   */\n  async createMedicationRequest(medicationRequestData: Partial<MedicationRequest>): Promise<MedicationRequest> {\n    try {\n      const medicationRequest: MedicationRequest = {\n        resourceType: 'MedicationRequest',\n        status: medicationRequestData.status || 'active',\n        intent: medicationRequestData.intent || 'order',\n        category: medicationRequestData.category || [],\n        priority: medicationRequestData.priority || 'routine',\n        medicationCodeableConcept: medicationRequestData.medicationCodeableConcept,\n        medicationReference: medicationRequestData.medicationReference,\n        subject: medicationRequestData.subject || { reference: '' },\n        encounter: medicationRequestData.encounter,\n        authoredOn: medicationRequestData.authoredOn || new Date().toISOString(),\n        requester: medicationRequestData.requester,\n        reasonCode: medicationRequestData.reasonCode || [],\n        dosageInstruction: medicationRequestData.dosageInstruction || [],\n        dispenseRequest: medicationRequestData.dispenseRequest,\n        identifier: [\n          ...(medicationRequestData.identifier || []),\n          {\n            system: 'http://omnicare.com/medication-request-id',\n            value: `MR${Date.now()}`,\n          },\n        ],\n      };\n\n      const result = await medplumService.createResource(medicationRequest);\n      logger.fhir('Medication request created successfully', { medicationRequestId: result.id });\n      return result;\n    } catch (error) {\n      logger.error('Failed to create medication request:', error);\n      throw error;\n    }\n  }\n\n  // ===============================\n  // SERVICE REQUEST RESOURCES\n  // ===============================\n\n  /**\n   * Create a service request (order)\n   */\n  async createServiceRequest(serviceRequestData: Partial<ServiceRequest>): Promise<ServiceRequest> {\n    try {\n      const serviceRequest: ServiceRequest = {\n        resourceType: 'ServiceRequest',\n        status: serviceRequestData.status || 'active',\n        intent: serviceRequestData.intent || 'order',\n        category: serviceRequestData.category || [],\n        priority: serviceRequestData.priority || 'routine',\n        code: serviceRequestData.code || {\n          coding: [{\n            system: 'http://snomed.info/sct',\n            code: '15220000',\n            display: 'Laboratory test',\n          }],\n        },\n        subject: serviceRequestData.subject || { reference: '' },\n        encounter: serviceRequestData.encounter,\n        occurrenceDateTime: serviceRequestData.occurrenceDateTime,\n        authoredOn: serviceRequestData.authoredOn || new Date().toISOString(),\n        requester: serviceRequestData.requester,\n        reasonCode: serviceRequestData.reasonCode || [],\n        identifier: [\n          ...(serviceRequestData.identifier || []),\n          {\n            system: 'http://omnicare.com/service-request-id',\n            value: `SR${Date.now()}`,\n          },\n        ],\n      };\n\n      const result = await medplumService.createResource(serviceRequest);\n      logger.fhir('Service request created successfully', { serviceRequestId: result.id });\n      return result;\n    } catch (error) {\n      logger.error('Failed to create service request:', error);\n      throw error;\n    }\n  }\n\n  // ===============================\n  // DIAGNOSTIC REPORT RESOURCES\n  // ===============================\n\n  /**\n   * Create a diagnostic report\n   */\n  async createDiagnosticReport(diagnosticReportData: Partial<DiagnosticReport>): Promise<DiagnosticReport> {\n    try {\n      const diagnosticReport: DiagnosticReport = {\n        resourceType: 'DiagnosticReport',\n        status: diagnosticReportData.status || 'final',\n        category: diagnosticReportData.category || [{\n          coding: [{\n            system: 'http://terminology.hl7.org/CodeSystem/v2-0074',\n            code: 'LAB',\n            display: 'Laboratory',\n          }],\n        }],\n        code: diagnosticReportData.code || {\n          coding: [{\n            system: 'http://loinc.org',\n            code: '11502-2',\n            display: 'Laboratory report',\n          }],\n        },\n        subject: diagnosticReportData.subject || { reference: '' },\n        encounter: diagnosticReportData.encounter,\n        effectiveDateTime: diagnosticReportData.effectiveDateTime || new Date().toISOString(),\n        issued: diagnosticReportData.issued || new Date().toISOString(),\n        performer: diagnosticReportData.performer || [],\n        result: diagnosticReportData.result || [],\n        conclusion: diagnosticReportData.conclusion,\n        identifier: [\n          ...(diagnosticReportData.identifier || []),\n          {\n            system: 'http://omnicare.com/diagnostic-report-id',\n            value: `DR${Date.now()}`,\n          },\n        ],\n      };\n\n      const result = await medplumService.createResource(diagnosticReport);\n      logger.fhir('Diagnostic report created successfully', { diagnosticReportId: result.id });\n      return result;\n    } catch (error) {\n      logger.error('Failed to create diagnostic report:', error);\n      throw error;\n    }\n  }\n\n  // ===============================\n  // CARE PLAN RESOURCES\n  // ===============================\n\n  /**\n   * Create a care plan\n   */\n  async createCarePlan(carePlanData: Partial<CarePlan>): Promise<CarePlan> {\n    try {\n      const carePlan: CarePlan = {\n        resourceType: 'CarePlan',\n        status: carePlanData.status || 'active',\n        intent: carePlanData.intent || 'plan',\n        category: carePlanData.category || [{\n          coding: [{\n            system: 'http://snomed.info/sct',\n            code: '734163000',\n            display: 'Care plan',\n          }],\n        }],\n        title: carePlanData.title,\n        description: carePlanData.description,\n        subject: carePlanData.subject || { reference: '' },\n        encounter: carePlanData.encounter,\n        period: carePlanData.period,\n        created: carePlanData.created || new Date().toISOString(),\n        author: carePlanData.author,\n        contributor: carePlanData.contributor || [],\n        careTeam: carePlanData.careTeam || [],\n        addresses: carePlanData.addresses || [],\n        goal: carePlanData.goal || [],\n        activity: carePlanData.activity || [],\n        identifier: [\n          ...(carePlanData.identifier || []),\n          {\n            system: 'http://omnicare.com/care-plan-id',\n            value: `CP${Date.now()}`,\n          },\n        ],\n      };\n\n      const result = await medplumService.createResource(carePlan);\n      logger.fhir('Care plan created successfully', { carePlanId: result.id });\n      return result;\n    } catch (error) {\n      logger.error('Failed to create care plan:', error);\n      throw error;\n    }\n  }\n\n  // ===============================\n  // UTILITY METHODS\n  // ===============================\n\n  /**\n   * Validate a FHIR resource\n   */\n  async validateResource<T>(resource: T): Promise<ValidationResult> {\n    try {\n      const result = await medplumService.validateResource(resource);\n      \n      // Parse validation results\n      const validationResult: ValidationResult = {\n        valid: !result.issue || result.issue.length === 0,\n        errors: [],\n        warnings: [],\n      };\n\n      if (result.issue) {\n        result.issue.forEach((issue: any) => {\n          if (issue.severity === 'error' || issue.severity === 'fatal') {\n            validationResult.errors.push({\n              path: issue.expression?.[0] || issue.location?.[0] || '',\n              message: issue.diagnostics || issue.details?.text || 'Validation error',\n              code: issue.code || 'unknown',\n              severity: issue.severity,\n            });\n          } else {\n            validationResult.warnings.push({\n              path: issue.expression?.[0] || issue.location?.[0] || '',\n              message: issue.diagnostics || issue.details?.text || 'Validation warning',\n              code: issue.code || 'unknown',\n              severity: issue.severity,\n            });\n          }\n        });\n      }\n\n      logger.fhir('Resource validation completed', {\n        valid: validationResult.valid,\n        errors: validationResult.errors.length,\n        warnings: validationResult.warnings.length,\n      });\n\n      return validationResult;\n    } catch (error) {\n      logger.error('Failed to validate resource:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get all resources for a patient\n   */\n  async getPatientEverything(patientId: string): Promise<Bundle> {\n    try {\n      const result = await medplumService.searchResources('Patient', {\n        _id: patientId,\n        _include: '*',\n        _revinclude: '*',\n      });\n\n      logger.fhir('Patient everything retrieved', {\n        patientId,\n        resourceCount: result.entry?.length || 0,\n      });\n\n      return result;\n    } catch (error) {\n      logger.error('Failed to get patient everything:', error);\n      throw error;\n    }\n  }\n}\n\n// Export singleton instance\nexport const fhirResourcesService = new FHIRResourcesService();"],"version":3}