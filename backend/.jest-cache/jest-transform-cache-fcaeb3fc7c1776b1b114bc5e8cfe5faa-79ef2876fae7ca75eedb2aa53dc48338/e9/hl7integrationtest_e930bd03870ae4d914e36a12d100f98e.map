{"file":"/Users/rodrigo/claude-projects/OmniCare/backend/tests/integration/hl7-integration.test.ts","mappings":"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","names":[],"sources":["/Users/rodrigo/claude-projects/OmniCare/backend/tests/integration/hl7-integration.test.ts"],"sourcesContent":["import { hl7v2ParserService } from '../../src/services/integration/hl7v2/hl7v2-parser.service';\nimport { fhirResourcesService } from '../../src/services/fhir-resources.service';\nimport { medplumService } from '../../src/services/medplum.service';\nimport { HL7v2Message, HL7v2AckCode } from '../../src/services/integration/types/hl7v2.types';\nimport logger from '../../src/utils/logger';\n\n/**\n * HL7 Message Processing Integration Tests\n * Tests end-to-end HL7 v2 message parsing, validation, and FHIR transformation\n */\ndescribe('HL7 Message Processing Integration', () => {\n  let testPatientId: string;\n\n  beforeAll(async () => {\n    await medplumService.initialize();\n  });\n\n  describe('HL7 v2 Message Parsing', () => {\n    test('should parse ADT^A01 (Patient Admission) message', () => {\n      const hl7Message = `MSH|^~\\\\&|SENDING_APP|SENDING_FACILITY|RECEIVING_APP|RECEIVING_FACILITY|20240101120000||ADT^A01^ADT_A01|MSG001|P|2.5.1\nEVN||202401011200|||^SMITH^JOHN^J^^^DR\nPID|1||123456789^^^MRN^MR||DOE^JOHN^MIDDLE^^JR|MAIDEN|19900101|M||2106-3|123 MAIN ST^^ANYTOWN^ST^12345^USA||(555)555-1234|(555)555-5678|EN|M|CHR|123456789|||N|USA||||||||||20240101\nNK1|1|DOE^JANE^|SPO|123 MAIN ST^^ANYTOWN^ST^12345^USA|(555)555-1234\nPV1|1|I|2000^2012^01||||1234567^ATTENDING^DOCTOR|||SUR||||A|||1234567^ATTENDING^DOCTOR|INP|^^^VISIT001||||||||||||||||||||||||202401011200`;\n\n      const parsedMessage = hl7v2ParserService.parseMessage(hl7Message);\n\n      expect(parsedMessage.messageType).toBe('ADT');\n      expect(parsedMessage.triggerEvent).toBe('A01');\n      expect(parsedMessage.messageControlId).toBe('MSG001');\n      expect(parsedMessage.sendingApplication).toBe('SENDING_APP');\n      expect(parsedMessage.receivingApplication).toBe('RECEIVING_APP');\n      expect(parsedMessage.segments.length).toBeGreaterThan(0);\n\n      // Verify MSH segment\n      const mshSegment = parsedMessage.segments.find(s => s.segmentType === 'MSH');\n      expect(mshSegment).toBeDefined();\n\n      // Verify PID segment\n      const pidSegment = parsedMessage.segments.find(s => s.segmentType === 'PID');\n      expect(pidSegment).toBeDefined();\n      expect(pidSegment?.fields.length).toBeGreaterThan(0);\n\n      // Verify PV1 segment\n      const pv1Segment = parsedMessage.segments.find(s => s.segmentType === 'PV1');\n      expect(pv1Segment).toBeDefined();\n    });\n\n    test('should parse ORU^R01 (Observation Result) message', () => {\n      const hl7Message = `MSH|^~\\\\&|LAB_SYSTEM|LAB_FACILITY|EMR_SYSTEM|HOSPITAL|20240101130000||ORU^R01^ORU_R01|LAB001|P|2.5.1\nPID|1||123456789^^^MRN^MR||DOE^JOHN^MIDDLE^^JR||19900101|M\nOBR|1|ORDER001|RESULT001|CBC^COMPLETE BLOOD COUNT^LN|||20240101120000|20240101125000||||||||||1234567^ORDERING^DOCTOR||||||20240101130000||F|||\nOBX|1|NM|4544-3^HEMATOCRIT^LN||42.0|%|40.0-50.0|N|||F|||20240101125000\nOBX|2|NM|718-7^HEMOGLOBIN^LN||14.2|g/dL|12.0-16.0|N|||F|||20240101125000\nOBX|3|NM|4515-3^LEUKOCYTES^LN||7.5|K/uL|4.0-11.0|N|||F|||20240101125000`;\n\n      const parsedMessage = hl7v2ParserService.parseMessage(hl7Message);\n\n      expect(parsedMessage.messageType).toBe('ORU');\n      expect(parsedMessage.triggerEvent).toBe('R01');\n      expect(parsedMessage.sendingApplication).toBe('LAB_SYSTEM');\n\n      // Verify OBR segment\n      const obrSegment = parsedMessage.segments.find(s => s.segmentType === 'OBR');\n      expect(obrSegment).toBeDefined();\n\n      // Verify OBX segments\n      const obxSegments = parsedMessage.segments.filter(s => s.segmentType === 'OBX');\n      expect(obxSegments.length).toBe(3);\n    });\n\n    test('should parse SIU^S12 (Appointment Scheduling) message', () => {\n      const hl7Message = `MSH|^~\\\\&|SCHEDULING|CLINIC|EMR|HOSPITAL|20240101140000||SIU^S12^SIU_S12|SCH001|P|2.5.1\nSCH|SCHEDULED|||20240102090000|20240102100000|||||30^MINUTES|^SCHEDULED||||||ROUTINE|\nPID|1||123456789^^^MRN^MR||DOE^JOHN^MIDDLE^^JR||19900101|M\nRGS|1\nAIS|1||OFFICE^OFFICE VISIT|||20240102090000|30^MINUTES|||SCHEDULED|`;\n\n      const parsedMessage = hl7v2ParserService.parseMessage(hl7Message);\n\n      expect(parsedMessage.messageType).toBe('SIU');\n      expect(parsedMessage.triggerEvent).toBe('S12');\n      \n      const schSegment = parsedMessage.segments.find(s => s.segmentType === 'SCH');\n      expect(schSegment).toBeDefined();\n    });\n  });\n\n  describe('HL7 Message Validation', () => {\n    test('should validate message structure', () => {\n      const validMessage = `MSH|^~\\\\&|APP|FACILITY|REC|HOSPITAL|20240101120000||ADT^A01|MSG001|P|2.5.1\nPID|1||123456789|||DOE^JOHN|||M|`;\n\n      const parsedMessage = hl7v2ParserService.parseMessage(validMessage);\n      const validationResult = hl7v2ParserService.validateMessage(parsedMessage);\n\n      expect(validationResult.valid).toBe(true);\n      expect(validationResult.errors.length).toBe(0);\n    });\n\n    test('should detect validation errors', () => {\n      // Message without required MSH segment\n      const invalidMessage: HL7v2Message = {\n        messageType: '',\n        triggerEvent: '',\n        messageStructure: '',\n        messageControlId: '',\n        sendingApplication: '',\n        sendingFacility: '',\n        receivingApplication: '',\n        receivingFacility: '',\n        timestamp: new Date(),\n        processingId: '',\n        versionId: '',\n        segments: [], // Empty segments - should fail validation\n        rawMessage: ''\n      };\n\n      const validationResult = hl7v2ParserService.validateMessage(invalidMessage);\n      expect(validationResult.valid).toBe(false);\n      expect(validationResult.errors.length).toBeGreaterThan(0);\n    });\n\n    test('should validate data types', () => {\n      const messageWithInvalidDate = `MSH|^~\\\\&|APP|FACILITY|REC|HOSPITAL|INVALID_DATE||ADT^A01|MSG001|P|2.5.1\nPID|1||123456789|||DOE^JOHN|||M|`;\n\n      try {\n        const parsedMessage = hl7v2ParserService.parseMessage(messageWithInvalidDate);\n        expect(parsedMessage).toBeDefined();\n        // Parser should handle invalid dates gracefully\n      } catch (error) {\n        expect(error.message).toContain('parsing failed');\n      }\n    });\n  });\n\n  describe('HL7 to FHIR Transformation', () => {\n    test('should transform ADT^A01 message to FHIR Patient resource', async () => {\n      const adtMessage = `MSH|^~\\\\&|EMR|HOSPITAL|FHIR|SYSTEM|20240101120000||ADT^A01|MSG001|P|2.5.1\nPID|1||MRN123456789^^^MRN^MR||DOE^JOHN^MIDDLE^^JR||19900101|M||2106-3|123 MAIN ST^^ANYTOWN^ST^12345^USA||(555)555-1234|(555)555-5678|EN|M|CHR|`;\n\n      const parsedMessage = hl7v2ParserService.parseMessage(adtMessage);\n      const pidSegment = parsedMessage.segments.find(s => s.segmentType === 'PID');\n      \n      expect(pidSegment).toBeDefined();\n\n      // Transform PID segment data to FHIR Patient\n      const patientData = {\n        name: [{ given: ['JOHN', 'MIDDLE'], family: 'DOE', suffix: ['JR'] }],\n        gender: 'male' as const,\n        birthDate: '1990-01-01',\n        identifier: [{\n          system: 'http://hospital.org/mrn',\n          value: 'MRN123456789'\n        }],\n        telecom: [\n          { system: 'phone' as const, value: '(555)555-1234', use: 'home' as const },\n          { system: 'phone' as const, value: '(555)555-5678', use: 'work' as const }\n        ],\n        address: [{\n          use: 'home',\n          line: ['123 MAIN ST'],\n          city: 'ANYTOWN',\n          state: 'ST',\n          postalCode: '12345',\n          country: 'USA'\n        }]\n      };\n\n      const fhirPatient = await fhirResourcesService.createPatient(patientData);\n      expect(fhirPatient.id).toBeDefined();\n      expect(fhirPatient.resourceType).toBe('Patient');\n      testPatientId = fhirPatient.id!;\n    });\n\n    test('should transform ORU^R01 message to FHIR Observation resources', async () => {\n      const oruMessage = `MSH|^~\\\\&|LAB|HOSPITAL|FHIR|SYSTEM|20240101130000||ORU^R01|LAB001|P|2.5.1\nPID|1||${testPatientId}|||DOE^JOHN|||M|\nOBR|1|ORDER001|RESULT001|CBC^COMPLETE BLOOD COUNT|||20240101120000||||||||1234567^DOCTOR^ORDERING||||||20240101130000||F\nOBX|1|NM|718-7^HEMOGLOBIN^LN||14.2|g/dL|12.0-16.0|N|||F|||20240101125000`;\n\n      const parsedMessage = hl7v2ParserService.parseMessage(oruMessage);\n      const obxSegments = parsedMessage.segments.filter(s => s.segmentType === 'OBX');\n      \n      expect(obxSegments.length).toBe(1);\n\n      // Transform OBX segment to FHIR Observation\n      const observationData = {\n        status: 'final' as const,\n        category: [{\n          coding: [{\n            system: 'http://terminology.hl7.org/CodeSystem/observation-category',\n            code: 'laboratory',\n            display: 'Laboratory'\n          }]\n        }],\n        code: {\n          coding: [{\n            system: 'http://loinc.org',\n            code: '718-7',\n            display: 'Hemoglobin'\n          }]\n        },\n        subject: { reference: `Patient/${testPatientId}` },\n        valueQuantity: {\n          value: 14.2,\n          unit: 'g/dL',\n          system: 'http://unitsofmeasure.org',\n          code: 'g/dL'\n        },\n        referenceRange: [{\n          low: { value: 12.0, unit: 'g/dL' },\n          high: { value: 16.0, unit: 'g/dL' }\n        }]\n      };\n\n      const fhirObservation = await fhirResourcesService.createObservation(observationData);\n      expect(fhirObservation.id).toBeDefined();\n      expect(fhirObservation.resourceType).toBe('Observation');\n    });\n  });\n\n  describe('HL7 Acknowledgment Processing', () => {\n    test('should generate ACK for successful message processing', () => {\n      const originalMessage = hl7v2ParserService.parseMessage(\n        `MSH|^~\\\\&|APP|FACILITY|REC|HOSPITAL|20240101120000||ADT^A01|MSG001|P|2.5.1`\n      );\n\n      const ack = hl7v2ParserService.generateAcknowledgment(\n        originalMessage,\n        HL7v2AckCode.APPLICATION_ACCEPT,\n        'Message processed successfully'\n      );\n\n      expect(ack.messageType).toBe('ACK');\n      expect(ack.messageControlId).toBe('MSG001');\n      expect(ack.acknowledgmentCode).toBe(HL7v2AckCode.APPLICATION_ACCEPT);\n      expect(ack.textMessage).toBe('Message processed successfully');\n    });\n\n    test('should generate NACK for failed message processing', () => {\n      const originalMessage = hl7v2ParserService.parseMessage(\n        `MSH|^~\\\\&|APP|FACILITY|REC|HOSPITAL|20240101120000||ADT^A01|MSG002|P|2.5.1`\n      );\n\n      const ack = hl7v2ParserService.generateAcknowledgment(\n        originalMessage,\n        HL7v2AckCode.APPLICATION_ERROR,\n        'Validation failed',\n        {\n          errorCode: 'VAL001',\n          errorDescription: 'Required field missing in PID segment'\n        }\n      );\n\n      expect(ack.acknowledgmentCode).toBe(HL7v2AckCode.APPLICATION_ERROR);\n      expect(ack.errorCondition).toBeDefined();\n      expect(ack.errorCondition?.errorCode).toBe('VAL001');\n    });\n\n    test('should convert acknowledgment to HL7 string format', () => {\n      const originalMessage = hl7v2ParserService.parseMessage(\n        `MSH|^~\\\\&|APP|FACILITY|REC|HOSPITAL|20240101120000||ADT^A01|MSG003|P|2.5.1`\n      );\n\n      const ack = hl7v2ParserService.generateAcknowledgment(\n        originalMessage,\n        HL7v2AckCode.APPLICATION_ACCEPT\n      );\n\n      const ackString = hl7v2ParserService.acknowledgeToString(\n        ack,\n        'OMNICARE',\n        'HOSPITAL',\n        'APP',\n        'FACILITY'\n      );\n\n      expect(ackString).toContain('MSH|^~\\\\&|OMNICARE|HOSPITAL|APP|FACILITY');\n      expect(ackString).toContain('ACK|MSG003');\n      expect(ackString).toContain(`MSA|${HL7v2AckCode.APPLICATION_ACCEPT}|MSG003`);\n    });\n  });\n\n  describe('HL7 Error Handling', () => {\n    test('should handle malformed HL7 messages', () => {\n      const malformedMessage = 'This is not a valid HL7 message';\n\n      expect(() => {\n        hl7v2ParserService.parseMessage(malformedMessage);\n      }).toThrow();\n    });\n\n    test('should handle messages with missing required segments', () => {\n      const messageWithoutMSH = 'PID|1||123456789|||DOE^JOHN|||M|';\n\n      expect(() => {\n        hl7v2ParserService.parseMessage(messageWithoutMSH);\n      }).toThrow('First segment must be MSH');\n    });\n\n    test('should handle unsupported message types gracefully', () => {\n      const unsupportedMessage = `MSH|^~\\\\&|APP|FACILITY|REC|HOSPITAL|20240101120000||XXX^Y99|MSG001|P|2.5.1`;\n\n      const parsedMessage = hl7v2ParserService.parseMessage(unsupportedMessage);\n      expect(parsedMessage.messageType).toBe('XXX');\n      expect(parsedMessage.triggerEvent).toBe('Y99');\n      \n      // Should still parse but validation might flag it\n      const validationResult = hl7v2ParserService.validateMessage(parsedMessage);\n      expect(validationResult).toBeDefined();\n    });\n  });\n\n  describe('HL7 Performance Testing', () => {\n    test('should handle large HL7 messages efficiently', () => {\n      // Create a large HL7 message with many OBX segments\n      let largeMessage = `MSH|^~\\\\&|LAB|HOSPITAL|FHIR|SYSTEM|20240101130000||ORU^R01|LAB001|P|2.5.1\nPID|1||123456789|||DOE^JOHN|||M|\nOBR|1|ORDER001|RESULT001|CBC^COMPLETE BLOOD COUNT|||20240101120000||||||||1234567^DOCTOR||||||20240101130000||F`;\n\n      // Add 100 OBX segments\n      for (let i = 1; i <= 100; i++) {\n        largeMessage += `\\nOBX|${i}|NM|${1000 + i}-7^TEST${i}^LN||${(Math.random() * 100).toFixed(1)}|mg/dL|0.0-100.0|N|||F|||20240101125000`;\n      }\n\n      const startTime = Date.now();\n      const parsedMessage = hl7v2ParserService.parseMessage(largeMessage);\n      const endTime = Date.now();\n\n      expect(parsedMessage.segments.length).toBeGreaterThan(100);\n      expect(endTime - startTime).toBeLessThan(1000); // Should parse within 1 second\n    });\n\n    test('should handle concurrent HL7 message parsing', async () => {\n      const messages = Array(10).fill(0).map((_, i) => \n        `MSH|^~\\\\&|APP${i}|FACILITY|REC|HOSPITAL|20240101120000||ADT^A01|MSG${i.toString().padStart(3, '0')}|P|2.5.1\nPID|1||${i.toString().padStart(9, '0')}|||DOE^PATIENT${i}|||M|`\n      );\n\n      const parsePromises = messages.map(msg => \n        Promise.resolve(hl7v2ParserService.parseMessage(msg))\n      );\n\n      const results = await Promise.allSettled(parsePromises);\n      const successful = results.filter(r => r.status === 'fulfilled');\n      \n      expect(successful.length).toBe(10);\n    });\n  });\n\n  afterAll(async () => {\n    // Cleanup test patient if created\n    if (testPatientId) {\n      try {\n        await medplumService.deleteResource('Patient', testPatientId);\n      } catch (error) {\n        logger.warn('Failed to cleanup test patient:', error);\n      }\n    }\n  });\n});"],"version":3}