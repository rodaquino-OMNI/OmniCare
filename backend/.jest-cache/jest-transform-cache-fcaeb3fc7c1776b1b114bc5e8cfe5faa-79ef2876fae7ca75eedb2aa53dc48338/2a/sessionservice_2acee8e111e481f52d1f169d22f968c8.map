{"file":"/Users/rodrigo/claude-projects/OmniCare/backend/src/services/session.service.ts","mappings":"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","names":[],"sources":["/Users/rodrigo/claude-projects/OmniCare/backend/src/services/session.service.ts"],"sourcesContent":["/**\n * OmniCare EMR Backend - Session Management Service\n * HIPAA-Compliant Session Handling\n */\n\nimport { EventEmitter } from 'events';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { AuditService } from '@/services/audit.service';\nimport { SessionInfo, User, UserRole, UserRoles } from '@/types/auth.types';\n\nconst AUTH_CONFIG = {\n  security: {\n    sessionTimeout: 15 * 60 * 1000 // 15 minutes\n  }\n};\n\nconst ROLE_SESSION_TIMEOUTS: Record<UserRole, number> = {\n  [UserRoles.PHYSICIAN]: 30 * 60 * 1000, // 30 minutes\n  [UserRoles.NURSING_STAFF]: 20 * 60 * 1000, // 20 minutes\n  [UserRoles.ADMINISTRATIVE_STAFF]: 15 * 60 * 1000, // 15 minutes\n  [UserRoles.SYSTEM_ADMINISTRATOR]: 10 * 60 * 1000, // 10 minutes (more secure)\n  [UserRoles.PHARMACIST]: 25 * 60 * 1000, // 25 minutes\n  [UserRoles.LABORATORY_TECHNICIAN]: 20 * 60 * 1000, // 20 minutes\n  [UserRoles.RADIOLOGY_TECHNICIAN]: 20 * 60 * 1000, // 20 minutes\n  [UserRoles.PATIENT]: 60 * 60 * 1000, // 60 minutes (patient portal)\n  [UserRoles.BILLING]: 15 * 60 * 1000, // 15 minutes\n  [UserRoles.RECEPTIONIST]: 15 * 60 * 1000 // 15 minutes\n};\n\nexport interface SessionStore {\n  get(sessionId: string): Promise<SessionInfo | null>;\n  set(sessionId: string, session: SessionInfo, ttl?: number): Promise<void>;\n  delete(sessionId: string): Promise<void>;\n  exists(sessionId: string): Promise<boolean>;\n  getAllUserSessions(userId: string): Promise<SessionInfo[]>;\n  deleteUserSessions(userId: string): Promise<void>;\n  cleanup(): Promise<number>;\n}\n\nexport class InMemorySessionStore implements SessionStore {\n  private sessions: Map<string, SessionInfo> = new Map();\n  private userSessions: Map<string, Set<string>> = new Map();\n\n  async get(sessionId: string): Promise<SessionInfo | null> {\n    return this.sessions.get(sessionId) || null;\n  }\n\n  async set(sessionId: string, session: SessionInfo, _ttl?: number): Promise<void> {\n    this.sessions.set(sessionId, session);\n    \n    // Add to user index\n    if (!this.userSessions.has(session.userId)) {\n      this.userSessions.set(session.userId, new Set());\n    }\n    this.userSessions.get(session.userId)!.add(sessionId);\n  }\n\n  async delete(sessionId: string): Promise<void> {\n    const session = this.sessions.get(sessionId);\n    this.sessions.delete(sessionId);\n    \n    if (session) {\n      const userSessions = this.userSessions.get(session.userId);\n      if (userSessions) {\n        userSessions.delete(sessionId);\n        if (userSessions.size === 0) {\n          this.userSessions.delete(session.userId);\n        }\n      }\n    }\n  }\n\n  async exists(sessionId: string): Promise<boolean> {\n    return this.sessions.has(sessionId);\n  }\n\n  async getAllUserSessions(userId: string): Promise<SessionInfo[]> {\n    const sessionIds = this.userSessions.get(userId) || new Set();\n    const sessions: SessionInfo[] = [];\n    \n    for (const sessionId of sessionIds) {\n      const session = this.sessions.get(sessionId);\n      if (session) {\n        sessions.push(session);\n      }\n    }\n    \n    return sessions;\n  }\n\n  async deleteUserSessions(userId: string): Promise<void> {\n    const sessionIds = this.userSessions.get(userId) || new Set();\n    \n    for (const sessionId of sessionIds) {\n      this.sessions.delete(sessionId);\n    }\n    \n    this.userSessions.delete(userId);\n  }\n\n  async cleanup(): Promise<number> {\n    let cleanedCount = 0;\n    const now = new Date();\n    \n    for (const [sessionId, session] of this.sessions.entries()) {\n      if (new Date(session.expiresAt) < now) {\n        await this.delete(sessionId);\n        cleanedCount++;\n      }\n    }\n    \n    return cleanedCount;\n  }\n}\n\nexport class SessionManager extends EventEmitter {\n  private store: SessionStore;\n  private auditService: AuditService;\n  private cleanupInterval: NodeJS.Timeout;\n\n  constructor(store?: SessionStore) {\n    super();\n    this.store = store || new InMemorySessionStore();\n    this.auditService = new AuditService();\n    \n    // Setup periodic cleanup\n    this.cleanupInterval = setInterval(() => {\n      this.cleanupExpiredSessions();\n    }, 5 * 60 * 1000); // Every 5 minutes\n  }\n\n  /**\n   * Create a new session\n   */\n  async createSession(user: User, ipAddress: string, userAgent: string): Promise<SessionInfo> {\n    const sessionId = uuidv4();\n    const now = new Date();\n    const sessionTimeout = ROLE_SESSION_TIMEOUTS[user.role] || AUTH_CONFIG.security.sessionTimeout;\n    const expiresAt = new Date(now.getTime() + sessionTimeout);\n\n    const session: SessionInfo = {\n      userId: user.id,\n      sessionId,\n      role: user.role,\n      permissions: [], // Will be populated by role permissions\n      ipAddress,\n      userAgent,\n      lastActivity: now,\n      expiresAt\n    };\n\n    await this.store.set(sessionId, session, Math.floor(sessionTimeout / 1000));\n\n    // Log session creation\n    await this.auditService.logSecurityEvent({\n      type: 'LOGIN_SUCCESS',\n      userId: user.id,\n      severity: 'LOW',\n      description: `Session created for user ${user.username}`,\n      metadata: { sessionId, ipAddress, userAgent, role: user.role }\n    });\n\n    this.emit('sessionCreated', session);\n    return session;\n  }\n\n  /**\n   * Get session by ID\n   */\n  async getSession(sessionId: string): Promise<SessionInfo | null> {\n    const session = await this.store.get(sessionId);\n    \n    if (!session) {\n      return null;\n    }\n\n    // Check if session is expired\n    if (!this.isSessionValid(session)) {\n      await this.destroySession(sessionId);\n      return null;\n    }\n\n    return session;\n  }\n\n  /**\n   * Update session activity\n   */\n  async updateSessionActivity(sessionId: string): Promise<SessionInfo | null> {\n    const session = await this.getSession(sessionId);\n    \n    if (!session) {\n      return null;\n    }\n\n    const now = new Date();\n    const sessionTimeout = ROLE_SESSION_TIMEOUTS[session.role] || AUTH_CONFIG.security.sessionTimeout;\n    \n    session.lastActivity = now;\n    session.expiresAt = new Date(now.getTime() + sessionTimeout);\n\n    await this.store.set(sessionId, session, Math.floor(sessionTimeout / 1000));\n    \n    this.emit('sessionUpdated', session);\n    return session;\n  }\n\n  /**\n   * Destroy a session\n   */\n  async destroySession(sessionId: string): Promise<void> {\n    const session = await this.store.get(sessionId);\n    await this.store.delete(sessionId);\n\n    if (session) {\n      // Log session destruction\n      await this.auditService.logSecurityEvent({\n        type: 'LOGOUT',\n        userId: session.userId,\n        severity: 'LOW',\n        description: `Session destroyed for user`,\n        metadata: { sessionId, ipAddress: session.ipAddress }\n      });\n\n      this.emit('sessionDestroyed', session);\n    }\n  }\n\n  /**\n   * Destroy all sessions for a user\n   */\n  async destroyUserSessions(userId: string, excludeSessionId?: string): Promise<void> {\n    const sessions = await this.store.getAllUserSessions(userId);\n    \n    for (const session of sessions) {\n      if (!excludeSessionId || session.sessionId !== excludeSessionId) {\n        await this.destroySession(session.sessionId);\n      }\n    }\n\n    // Log bulk session destruction\n    await this.auditService.logSecurityEvent({\n      type: 'LOGOUT',\n      userId,\n      severity: 'MEDIUM',\n      description: `All user sessions destroyed`,\n      metadata: { sessionCount: sessions.length, excludeSessionId }\n    });\n  }\n\n  /**\n   * Get all active sessions for a user\n   */\n  async getUserSessions(userId: string): Promise<SessionInfo[]> {\n    return await this.store.getAllUserSessions(userId);\n  }\n\n  /**\n   * Check if session is valid\n   */\n  isSessionValid(session: SessionInfo): boolean {\n    const now = new Date();\n    const timeSinceLastActivity = now.getTime() - new Date(session.lastActivity).getTime();\n    const sessionTimeout = ROLE_SESSION_TIMEOUTS[session.role] || AUTH_CONFIG.security.sessionTimeout;\n    \n    return (\n      new Date(session.expiresAt) > now &&\n      timeSinceLastActivity < sessionTimeout\n    );\n  }\n\n  /**\n   * Validate session security\n   */\n  async validateSessionSecurity(session: SessionInfo, currentIpAddress: string, currentUserAgent: string): Promise<{\n    isValid: boolean;\n    securityIssues: string[];\n  }> {\n    const securityIssues: string[] = [];\n\n    // Check IP address consistency\n    if (session.ipAddress !== currentIpAddress) {\n      securityIssues.push('IP address mismatch');\n      \n      // Log security event\n      await this.auditService.logSecurityEvent({\n        type: 'UNAUTHORIZED_ACCESS',\n        userId: session.userId,\n        severity: 'HIGH',\n        description: `IP address mismatch for session ${session.sessionId}`,\n        metadata: { \n          sessionId: session.sessionId,\n          originalIp: session.ipAddress,\n          currentIp: currentIpAddress\n        }\n      });\n    }\n\n    // Check user agent consistency (basic check)\n    if (session.userAgent !== currentUserAgent) {\n      securityIssues.push('User agent mismatch');\n      \n      // Log security event\n      await this.auditService.logSecurityEvent({\n        type: 'UNAUTHORIZED_ACCESS',\n        userId: session.userId,\n        severity: 'MEDIUM',\n        description: `User agent mismatch for session ${session.sessionId}`,\n        metadata: { \n          sessionId: session.sessionId,\n          originalUserAgent: session.userAgent,\n          currentUserAgent\n        }\n      });\n    }\n\n    return {\n      isValid: securityIssues.length === 0,\n      securityIssues\n    };\n  }\n\n  /**\n   * Force logout based on security policy\n   */\n  async forceLogout(userId: string, reason: string): Promise<void> {\n    await this.destroyUserSessions(userId);\n    \n    await this.auditService.logSecurityEvent({\n      type: 'LOGOUT',\n      userId,\n      severity: 'HIGH',\n      description: `Forced logout: ${reason}`,\n      metadata: { reason, forced: true }\n    });\n\n    this.emit('forceLogout', { userId, reason });\n  }\n\n  /**\n   * Cleanup expired sessions\n   */\n  private async cleanupExpiredSessions(): Promise<void> {\n    try {\n      const cleanedCount = await this.store.cleanup();\n      \n      if (cleanedCount > 0) {\n        console.log(`Cleaned up ${cleanedCount} expired sessions`);\n        this.emit('sessionsCleanedUp', cleanedCount);\n      }\n    } catch (error) {\n      console.error('Error during session cleanup:', error);\n    }\n  }\n\n  /**\n   * Shutdown session manager\n   */\n  shutdown(): void {\n    if (this.cleanupInterval) {\n      clearInterval(this.cleanupInterval);\n    }\n    this.removeAllListeners();\n  }\n}\n"],"version":3}