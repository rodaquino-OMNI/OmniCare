{"file":"/Users/rodrigo/claude-projects/OmniCare/backend/tests/unit/middleware/auth.middleware.test.ts","mappings":"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","names":[],"sources":["/Users/rodrigo/claude-projects/OmniCare/backend/tests/unit/middleware/auth.middleware.test.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport jwt from 'jsonwebtoken';\nimport { authMiddleware, requirePermissions, requireRole } from '../../../src/middleware/auth.middleware';\nimport config from '../../../src/config';\nimport logger from '../../../src/utils/logger';\n\n// Mock dependencies\njest.mock('jsonwebtoken');\njest.mock('../../../src/config', () => ({\n  jwt: {\n    secret: 'test-jwt-secret',\n    expiresIn: '1h'\n  }\n}));\njest.mock('../../../src/utils/logger');\n\ndescribe('Auth Middleware', () => {\n  let mockRequest: Partial<Request>;\n  let mockResponse: Partial<Response>;\n  let mockNext: NextFunction;\n\n  const mockJwt = jwt as jest.Mocked<typeof jwt>;\n  const mockLogger = logger as jest.Mocked<typeof logger>;\n\n  beforeEach(() => {\n    mockRequest = {\n      headers: {},\n      user: undefined\n    };\n\n    mockResponse = {\n      status: jest.fn().mockReturnThis(),\n      json: jest.fn().mockReturnThis(),\n      set: jest.fn().mockReturnThis()\n    };\n\n    mockNext = jest.fn();\n\n    jest.clearAllMocks();\n  });\n\n  describe('authMiddleware', () => {\n    it('should authenticate user with valid JWT token', async () => {\n      const validToken = 'valid.jwt.token';\n      const decodedPayload = {\n        sub: 'user-123',\n        username: 'testuser',\n        role: 'physician',\n        permissions: ['patient:read', 'patient:write'],\n        type: 'access',\n        iss: 'omnicare',\n        aud: 'omnicare-api',\n        exp: Math.floor(Date.now() / 1000) + 3600,\n        iat: Math.floor(Date.now() / 1000)\n      };\n\n      mockRequest.headers = {\n        authorization: `Bearer ${validToken}`\n      };\n\n      mockJwt.verify.mockReturnValue(decodedPayload as any);\n\n      await authMiddleware(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      expect(mockJwt.verify).toHaveBeenCalledWith(validToken, config.jwt.secret);\n      expect(mockRequest.user).toEqual({\n        id: decodedPayload.sub,\n        username: decodedPayload.username,\n        role: decodedPayload.role,\n        permissions: decodedPayload.permissions,\n        tokenType: decodedPayload.type\n      });\n      expect(mockNext).toHaveBeenCalledWith();\n    });\n\n    it('should authenticate user with valid JWT token in query parameter', async () => {\n      const validToken = 'valid.jwt.token';\n      const decodedPayload = {\n        sub: 'user-123',\n        username: 'testuser',\n        role: 'nurse',\n        permissions: ['patient:read'],\n        type: 'access'\n      };\n\n      mockRequest.query = {\n        access_token: validToken\n      };\n\n      mockJwt.verify.mockReturnValue(decodedPayload as any);\n\n      await authMiddleware(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      expect(mockJwt.verify).toHaveBeenCalledWith(validToken, config.jwt.secret);\n      expect(mockRequest.user).toBeDefined();\n      expect(mockNext).toHaveBeenCalledWith();\n    });\n\n    it('should reject request with no authorization token', async () => {\n      mockRequest.headers = {};\n\n      await authMiddleware(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      expect(mockResponse.status).toHaveBeenCalledWith(401);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        error: 'unauthorized',\n        message: 'No authorization token provided'\n      });\n      expect(mockNext).not.toHaveBeenCalled();\n    });\n\n    it('should reject request with malformed authorization header', async () => {\n      mockRequest.headers = {\n        authorization: 'InvalidFormat token'\n      };\n\n      await authMiddleware(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      expect(mockResponse.status).toHaveBeenCalledWith(401);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        error: 'unauthorized',\n        message: 'Invalid authorization header format'\n      });\n    });\n\n    it('should reject request with invalid JWT token', async () => {\n      const invalidToken = 'invalid.jwt.token';\n      \n      mockRequest.headers = {\n        authorization: `Bearer ${invalidToken}`\n      };\n\n      mockJwt.verify.mockImplementation(() => {\n        throw new jwt.JsonWebTokenError('invalid token');\n      });\n\n      await authMiddleware(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      expect(mockResponse.status).toHaveBeenCalledWith(401);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        error: 'unauthorized',\n        message: 'Invalid token'\n      });\n      expect(mockLogger.security).toHaveBeenCalledWith(\n        'Invalid JWT token attempted',\n        expect.objectContaining({\n          error: 'invalid token'\n        })\n      );\n    });\n\n    it('should reject expired JWT token', async () => {\n      const expiredToken = 'expired.jwt.token';\n      \n      mockRequest.headers = {\n        authorization: `Bearer ${expiredToken}`\n      };\n\n      mockJwt.verify.mockImplementation(() => {\n        throw new jwt.TokenExpiredError('jwt expired', new Date());\n      });\n\n      await authMiddleware(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      expect(mockResponse.status).toHaveBeenCalledWith(401);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        error: 'token_expired',\n        message: 'Token has expired'\n      });\n    });\n\n    it('should reject token with invalid signature', async () => {\n      const tokenWithInvalidSignature = 'token.with.invalid.signature';\n      \n      mockRequest.headers = {\n        authorization: `Bearer ${tokenWithInvalidSignature}`\n      };\n\n      mockJwt.verify.mockImplementation(() => {\n        throw new jwt.JsonWebTokenError('invalid signature');\n      });\n\n      await authMiddleware(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      expect(mockResponse.status).toHaveBeenCalledWith(401);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        error: 'unauthorized',\n        message: 'Invalid token'\n      });\n    });\n\n    it('should reject token with wrong token type', async () => {\n      const refreshToken = 'refresh.token.type';\n      const decodedPayload = {\n        sub: 'user-123',\n        username: 'testuser',\n        type: 'refresh' // Wrong type for API access\n      };\n\n      mockRequest.headers = {\n        authorization: `Bearer ${refreshToken}`\n      };\n\n      mockJwt.verify.mockReturnValue(decodedPayload as any);\n\n      await authMiddleware(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      expect(mockResponse.status).toHaveBeenCalledWith(401);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        error: 'unauthorized',\n        message: 'Invalid token type for API access'\n      });\n    });\n\n    it('should handle JWT verification errors gracefully', async () => {\n      const malformedToken = 'malformed.jwt';\n      \n      mockRequest.headers = {\n        authorization: `Bearer ${malformedToken}`\n      };\n\n      mockJwt.verify.mockImplementation(() => {\n        throw new Error('Unexpected error during verification');\n      });\n\n      await authMiddleware(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      expect(mockResponse.status).toHaveBeenCalledWith(401);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        error: 'unauthorized',\n        message: 'Token verification failed'\n      });\n    });\n\n    it('should log security events for failed authentication', async () => {\n      mockRequest.headers = {\n        authorization: 'Bearer invalid.token'\n      };\n      mockRequest.ip = '192.168.1.100';\n      mockRequest.get = jest.fn().mockReturnValue('Mozilla/5.0');\n\n      mockJwt.verify.mockImplementation(() => {\n        throw new jwt.JsonWebTokenError('invalid token');\n      });\n\n      await authMiddleware(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      expect(mockLogger.security).toHaveBeenCalledWith(\n        'Invalid JWT token attempted',\n        expect.objectContaining({\n          ip: '192.168.1.100',\n          userAgent: 'Mozilla/5.0',\n          error: 'invalid token'\n        })\n      );\n    });\n  });\n\n  describe('requirePermissions middleware', () => {\n    beforeEach(() => {\n      mockRequest.user = {\n        id: 'user-123',\n        username: 'testuser',\n        role: 'physician',\n        permissions: ['patient:read', 'patient:write', 'encounter:read']\n      };\n    });\n\n    it('should allow access with required permissions', async () => {\n      const middleware = requirePermissions(['patient:read']);\n\n      await middleware(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      expect(mockNext).toHaveBeenCalledWith();\n    });\n\n    it('should allow access with multiple required permissions', async () => {\n      const middleware = requirePermissions(['patient:read', 'encounter:read']);\n\n      await middleware(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      expect(mockNext).toHaveBeenCalledWith();\n    });\n\n    it('should deny access without required permissions', async () => {\n      const middleware = requirePermissions(['admin:write']);\n\n      await middleware(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      expect(mockResponse.status).toHaveBeenCalledWith(403);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        error: 'forbidden',\n        message: 'Insufficient permissions',\n        required: ['admin:write'],\n        missing: ['admin:write']\n      });\n      expect(mockNext).not.toHaveBeenCalled();\n    });\n\n    it('should deny access with partial permissions', async () => {\n      const middleware = requirePermissions(['patient:read', 'admin:write']);\n\n      await middleware(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      expect(mockResponse.status).toHaveBeenCalledWith(403);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        error: 'forbidden',\n        message: 'Insufficient permissions',\n        required: ['patient:read', 'admin:write'],\n        missing: ['admin:write']\n      });\n    });\n\n    it('should handle user without permissions array', async () => {\n      mockRequest.user = {\n        id: 'user-123',\n        username: 'testuser',\n        role: 'guest'\n        // No permissions array\n      };\n\n      const middleware = requirePermissions(['patient:read']);\n\n      await middleware(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      expect(mockResponse.status).toHaveBeenCalledWith(403);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        error: 'forbidden',\n        message: 'Insufficient permissions',\n        required: ['patient:read'],\n        missing: ['patient:read']\n      });\n    });\n\n    it('should handle unauthenticated user', async () => {\n      mockRequest.user = undefined;\n\n      const middleware = requirePermissions(['patient:read']);\n\n      await middleware(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      expect(mockResponse.status).toHaveBeenCalledWith(401);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        error: 'unauthorized',\n        message: 'Authentication required'\n      });\n    });\n\n    it('should log permission denied events', async () => {\n      const middleware = requirePermissions(['admin:delete']);\n\n      await middleware(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      expect(mockLogger.security).toHaveBeenCalledWith(\n        'Permission denied',\n        expect.objectContaining({\n          userId: 'user-123',\n          username: 'testuser',\n          role: 'physician',\n          requiredPermissions: ['admin:delete'],\n          userPermissions: ['patient:read', 'patient:write', 'encounter:read']\n        })\n      );\n    });\n  });\n\n  describe('requireRole middleware', () => {\n    beforeEach(() => {\n      mockRequest.user = {\n        id: 'user-123',\n        username: 'testuser',\n        role: 'physician',\n        permissions: ['patient:read', 'patient:write']\n      };\n    });\n\n    it('should allow access with required role', async () => {\n      const middleware = requireRole(['physician']);\n\n      await middleware(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      expect(mockNext).toHaveBeenCalledWith();\n    });\n\n    it('should allow access with one of multiple required roles', async () => {\n      const middleware = requireRole(['physician', 'nurse']);\n\n      await middleware(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      expect(mockNext).toHaveBeenCalledWith();\n    });\n\n    it('should deny access without required role', async () => {\n      const middleware = requireRole(['admin']);\n\n      await middleware(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      expect(mockResponse.status).toHaveBeenCalledWith(403);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        error: 'forbidden',\n        message: 'Insufficient role privileges',\n        required: ['admin'],\n        current: 'physician'\n      });\n    });\n\n    it('should handle unauthenticated user', async () => {\n      mockRequest.user = undefined;\n\n      const middleware = requireRole(['physician']);\n\n      await middleware(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      expect(mockResponse.status).toHaveBeenCalledWith(401);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        error: 'unauthorized',\n        message: 'Authentication required'\n      });\n    });\n\n    it('should handle user without role', async () => {\n      mockRequest.user = {\n        id: 'user-123',\n        username: 'testuser'\n        // No role property\n      };\n\n      const middleware = requireRole(['physician']);\n\n      await middleware(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      expect(mockResponse.status).toHaveBeenCalledWith(403);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        error: 'forbidden',\n        message: 'Insufficient role privileges',\n        required: ['physician'],\n        current: undefined\n      });\n    });\n\n    it('should log role access denied events', async () => {\n      const middleware = requireRole(['admin']);\n\n      await middleware(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      expect(mockLogger.security).toHaveBeenCalledWith(\n        'Role access denied',\n        expect.objectContaining({\n          userId: 'user-123',\n          username: 'testuser',\n          currentRole: 'physician',\n          requiredRoles: ['admin']\n        })\n      );\n    });\n  });\n\n  describe('Edge Cases and Security', () => {\n    it('should handle very long authorization headers', async () => {\n      const veryLongToken = 'Bearer ' + 'a'.repeat(10000);\n      \n      mockRequest.headers = {\n        authorization: veryLongToken\n      };\n\n      await authMiddleware(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      expect(mockResponse.status).toHaveBeenCalledWith(401);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        error: 'unauthorized',\n        message: 'Token verification failed'\n      });\n    });\n\n    it('should handle special characters in token', async () => {\n      const tokenWithSpecialChars = 'token.with.special!@#$%^&*()chars';\n      \n      mockRequest.headers = {\n        authorization: `Bearer ${tokenWithSpecialChars}`\n      };\n\n      mockJwt.verify.mockImplementation(() => {\n        throw new jwt.JsonWebTokenError('invalid token');\n      });\n\n      await authMiddleware(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      expect(mockResponse.status).toHaveBeenCalledWith(401);\n    });\n\n    it('should prevent privilege escalation attempts', async () => {\n      const maliciousPayload = {\n        sub: 'user-123',\n        username: 'testuser',\n        role: 'admin', // Attempting to escalate to admin\n        permissions: ['admin:write', 'system:delete'], // Malicious permissions\n        type: 'access'\n      };\n\n      const maliciousToken = 'malicious.token';\n      \n      mockRequest.headers = {\n        authorization: `Bearer ${maliciousToken}`\n      };\n\n      // Even if token is somehow valid, it should be from trusted source\n      mockJwt.verify.mockReturnValue(maliciousPayload as any);\n\n      await authMiddleware(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      // Should authenticate normally - privilege verification happens at permission/role level\n      expect(mockRequest.user).toEqual({\n        id: maliciousPayload.sub,\n        username: maliciousPayload.username,\n        role: maliciousPayload.role,\n        permissions: maliciousPayload.permissions,\n        tokenType: maliciousPayload.type\n      });\n      expect(mockNext).toHaveBeenCalledWith();\n    });\n\n    it('should rate limit authentication attempts', async () => {\n      // This would typically be handled by rate limiting middleware\n      // But we can test that multiple failed attempts are logged\n      mockRequest.headers = {\n        authorization: 'Bearer invalid.token'\n      };\n      mockRequest.ip = '192.168.1.100';\n\n      mockJwt.verify.mockImplementation(() => {\n        throw new jwt.JsonWebTokenError('invalid token');\n      });\n\n      // Simulate multiple attempts\n      for (let i = 0; i < 5; i++) {\n        await authMiddleware(\n          mockRequest as Request,\n          mockResponse as Response,\n          mockNext\n        );\n      }\n\n      expect(mockLogger.security).toHaveBeenCalledTimes(5);\n    });\n\n    it('should handle token injection attempts', async () => {\n      mockRequest.headers = {\n        authorization: 'Bearer token1',\n        'x-access-token': 'token2'\n      };\n      mockRequest.query = {\n        access_token: 'token3'\n      };\n\n      mockJwt.verify.mockImplementation(() => {\n        throw new jwt.JsonWebTokenError('invalid token');\n      });\n\n      await authMiddleware(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      // Should only try to verify the Authorization header token\n      expect(mockJwt.verify).toHaveBeenCalledTimes(1);\n      expect(mockJwt.verify).toHaveBeenCalledWith('token1', config.jwt.secret);\n    });\n  });\n});"],"version":3}