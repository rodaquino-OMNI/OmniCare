{"file":"/Users/rodrigo/claude-projects/OmniCare/backend/src/services/analytics/reporting-engine.service.ts","mappings":"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","names":[],"sources":["/Users/rodrigo/claude-projects/OmniCare/backend/src/services/analytics/reporting-engine.service.ts"],"sourcesContent":["/**\n * Reporting Engine Service\n * \n * Custom report builder, scheduled reporting, and automated alerts\n */\n\nimport { EventEmitter } from 'events';\nimport { getErrorMessage } from '@/utils/error.utils';\n\nexport interface ReportConfiguration {\n  id?: string;\n  name: string;\n  description: string;\n  type: 'Clinical Quality' | 'Financial' | 'Operational' | 'Population Health' | 'Custom';\n  facilityId: string;\n  dataSource: {\n    tables: string[];\n    joins: string[];\n    filters: ReportFilter[];\n  };\n  columns: ReportColumn[];\n  groupBy?: string[];\n  sortBy?: Array<{\n    column: string;\n    direction: 'ASC' | 'DESC';\n  }>;\n  calculations: ReportCalculation[];\n  visualizations: ReportVisualization[];\n  schedule?: ReportSchedule;\n  recipients: string[];\n  format: 'PDF' | 'Excel' | 'CSV' | 'JSON';\n  createdBy: string;\n  createdAt?: Date;\n  updatedAt?: Date;\n}\n\nexport interface ReportFilter {\n  column: string;\n  operator: '=' | '!=' | '>' | '<' | '>=' | '<=' | 'IN' | 'NOT IN' | 'LIKE' | 'BETWEEN';\n  value: any;\n  logicalOperator?: 'AND' | 'OR';\n}\n\nexport interface ReportColumn {\n  name: string;\n  alias?: string;\n  dataType: 'string' | 'number' | 'date' | 'boolean';\n  format?: string;\n  aggregation?: 'SUM' | 'COUNT' | 'AVG' | 'MIN' | 'MAX';\n  hidden?: boolean;\n}\n\nexport interface ReportCalculation {\n  name: string;\n  formula: string;\n  dataType: 'number' | 'percentage' | 'currency';\n  description?: string;\n}\n\nexport interface ReportVisualization {\n  type: 'table' | 'chart' | 'graph' | 'metric';\n  chartType?: 'bar' | 'line' | 'pie' | 'scatter' | 'heatmap';\n  title: string;\n  dataColumns: string[];\n  options: Record<string, any>;\n}\n\nexport interface ReportSchedule {\n  frequency: 'daily' | 'weekly' | 'monthly' | 'quarterly' | 'annually';\n  time: string; // HH:mm format\n  dayOfWeek?: number; // 0-6 for weekly\n  dayOfMonth?: number; // 1-31 for monthly\n  enabled: boolean;\n  lastRun?: Date;\n  nextRun?: Date;\n}\n\nexport interface GeneratedReport {\n  id: string;\n  configurationId: string;\n  name: string;\n  facilityId: string;\n  generatedAt: Date;\n  generatedBy: string;\n  status: 'Generating' | 'Completed' | 'Failed' | 'Cancelled';\n  data: any;\n  metadata: {\n    rowCount: number;\n    processingTime: number;\n    dataFreshness: Date;\n    parameters: Record<string, any>;\n  };\n  filePath?: string;\n  downloadUrl?: string;\n  expiresAt?: Date;\n}\n\nexport interface ReportAlert {\n  id: string;\n  name: string;\n  description: string;\n  reportConfigurationId: string;\n  conditions: Array<{\n    column: string;\n    operator: string;\n    threshold: any;\n    severity: 'Low' | 'Medium' | 'High' | 'Critical';\n  }>;\n  recipients: string[];\n  enabled: boolean;\n  lastTriggered?: Date;\n  triggerCount: number;\n}\n\nexport class ReportingEngineService extends EventEmitter {\n  private reportConfigurations: Map<string, ReportConfiguration> = new Map();\n  private generatedReports: Map<string, GeneratedReport> = new Map();\n  private reportAlerts: Map<string, ReportAlert> = new Map();\n  private scheduledJobs: Map<string, any> = new Map();\n\n  constructor() {\n    super();\n    this.initializeStandardReports();\n  }\n\n  /**\n   * Create custom report configuration\n   */\n  async createCustomReport(config: ReportConfiguration): Promise<ReportConfiguration> {\n    const reportId = `RPT-${Date.now()}`;\n    const reportConfig: ReportConfiguration = {\n      ...config,\n      id: reportId,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n\n    // Validate configuration\n    await this.validateReportConfiguration(reportConfig);\n\n    // Store configuration\n    this.reportConfigurations.set(reportId, reportConfig);\n\n    // Set up schedule if provided\n    if (reportConfig.schedule?.enabled) {\n      await this.scheduleReport(reportId, reportConfig.schedule);\n    }\n\n    this.emit('report-created', {\n      reportId,\n      name: reportConfig.name,\n      createdBy: reportConfig.createdBy\n    });\n\n    return reportConfig;\n  }\n\n  /**\n   * Generate report from configuration\n   */\n  async generateReport(\n    configurationId: string,\n    parameters?: Record<string, any>,\n    generatedBy?: string\n  ): Promise<GeneratedReport> {\n    const config = this.reportConfigurations.get(configurationId);\n    if (!config) {\n      throw new Error(`Report configuration ${configurationId} not found`);\n    }\n\n    const reportId = `GEN-${Date.now()}`;\n    const startTime = Date.now();\n\n    // Create initial report entry\n    const report: GeneratedReport = {\n      id: reportId,\n      configurationId,\n      name: config.name,\n      facilityId: config.facilityId,\n      generatedAt: new Date(),\n      generatedBy: generatedBy || 'System',\n      status: 'Generating',\n      data: null,\n      metadata: {\n        rowCount: 0,\n        processingTime: 0,\n        dataFreshness: new Date(),\n        parameters: parameters || {}\n      }\n    };\n\n    this.generatedReports.set(reportId, report);\n\n    try {\n      // Execute report query\n      const data = await this.executeReportQuery(config, parameters);\n      \n      // Apply calculations\n      const processedData = await this.applyCalculations(data, config.calculations);\n      \n      // Generate visualizations\n      const visualizations = await this.generateVisualizations(processedData, config.visualizations);\n\n      // Update report with results\n      const completedReport: GeneratedReport = {\n        ...report,\n        status: 'Completed',\n        data: {\n          rows: processedData,\n          visualizations,\n          summary: this.generateSummary(processedData, config)\n        },\n        metadata: {\n          ...report.metadata,\n          rowCount: processedData.length,\n          processingTime: Date.now() - startTime\n        }\n      };\n\n      this.generatedReports.set(reportId, completedReport);\n\n      // Check for alert conditions\n      await this.checkAlertConditions(completedReport);\n\n      this.emit('report-generated', {\n        reportId,\n        configurationId,\n        status: 'Completed',\n        rowCount: processedData.length\n      });\n\n      return completedReport;\n\n    } catch (error) {\n      // Update report status to failed\n      const failedReport: GeneratedReport = {\n        ...report,\n        status: 'Failed',\n        metadata: {\n          ...report.metadata,\n          processingTime: Date.now() - startTime\n        }\n      };\n\n      this.generatedReports.set(reportId, failedReport);\n\n      this.emit('report-failed', {\n        reportId,\n        configurationId,\n        error: getErrorMessage(error)\n      });\n\n      throw error;\n    }\n  }\n\n  /**\n   * Get report by ID\n   */\n  async getReport(reportId: string): Promise<GeneratedReport> {\n    const report = this.generatedReports.get(reportId);\n    if (!report) {\n      throw new Error(`Report ${reportId} not found`);\n    }\n    return report;\n  }\n\n  /**\n   * Get reports with filters\n   */\n  async getReports(filters: {\n    facilityId?: string;\n    type?: string;\n    status?: string;\n    createdBy?: string;\n    limit?: number;\n    offset?: number;\n  }): Promise<{\n    reports: GeneratedReport[];\n    total: number;\n  }> {\n    let reports = Array.from(this.generatedReports.values());\n\n    // Apply filters\n    if (filters.facilityId) {\n      reports = reports.filter(r => r.facilityId === filters.facilityId);\n    }\n    if (filters.status) {\n      reports = reports.filter(r => r.status === filters.status);\n    }\n    if (filters.createdBy) {\n      reports = reports.filter(r => r.generatedBy === filters.createdBy);\n    }\n\n    // Sort by generated date (newest first)\n    reports.sort((a, b) => b.generatedAt.getTime() - a.generatedAt.getTime());\n\n    const total = reports.length;\n    const offset = filters.offset || 0;\n    const limit = filters.limit || 50;\n\n    return {\n      reports: reports.slice(offset, offset + limit),\n      total\n    };\n  }\n\n  /**\n   * Schedule report generation\n   */\n  async scheduleReport(\n    configurationId: string,\n    schedule: ReportSchedule\n  ): Promise<ReportConfiguration> {\n    const config = this.reportConfigurations.get(configurationId);\n    if (!config) {\n      throw new Error(`Report configuration ${configurationId} not found`);\n    }\n\n    // Update configuration with schedule\n    const updatedConfig: ReportConfiguration = {\n      ...config,\n      schedule,\n      updatedAt: new Date()\n    };\n\n    this.reportConfigurations.set(configurationId, updatedConfig);\n\n    // Set up cron job\n    const cronExpression = this.buildCronExpression(schedule);\n    // Note: In real implementation, would use actual cron scheduler\n    \n    this.emit('report-scheduled', {\n      configurationId,\n      schedule,\n      nextRun: this.calculateNextRun(schedule)\n    });\n\n    return updatedConfig;\n  }\n\n  /**\n   * Export report in specified format\n   */\n  async exportReport(\n    reportId: string,\n    format: 'pdf' | 'excel' | 'csv'\n  ): Promise<{\n    filePath: string;\n    downloadUrl: string;\n    expiresAt: Date;\n  }> {\n    const report = await this.getReport(reportId);\n    \n    const fileName = `${report.name.replace(/\\s+/g, '_')}_${Date.now()}.${format}`;\n    const filePath = `/exports/${fileName}`;\n    const downloadUrl = `${process.env.API_BASE_URL}/analytics/reports/${reportId}/download/${fileName}`;\n    const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 hours\n\n    // Mock export process - would use actual export libraries\n    await this.performExport(report, format, filePath);\n\n    // Update report with export info\n    const updatedReport: GeneratedReport = {\n      ...report,\n      filePath,\n      downloadUrl,\n      expiresAt\n    };\n\n    this.generatedReports.set(reportId, updatedReport);\n\n    return {\n      filePath,\n      downloadUrl,\n      expiresAt\n    };\n  }\n\n  /**\n   * Create report alert\n   */\n  async createReportAlert(alert: Omit<ReportAlert, 'id' | 'triggerCount'>): Promise<ReportAlert> {\n    const alertId = `ALERT-${Date.now()}`;\n    const reportAlert: ReportAlert = {\n      ...alert,\n      id: alertId,\n      triggerCount: 0\n    };\n\n    this.reportAlerts.set(alertId, reportAlert);\n\n    this.emit('alert-created', {\n      alertId,\n      reportConfigurationId: alert.reportConfigurationId,\n      conditions: alert.conditions\n    });\n\n    return reportAlert;\n  }\n\n  /**\n   * Get available report templates\n   */\n  async getReportTemplates(): Promise<ReportConfiguration[]> {\n    return Array.from(this.reportConfigurations.values())\n      .filter(config => config.type !== 'Custom');\n  }\n\n  /**\n   * Clone report configuration\n   */\n  async cloneReportConfiguration(\n    configurationId: string,\n    newName: string,\n    createdBy: string\n  ): Promise<ReportConfiguration> {\n    const originalConfig = this.reportConfigurations.get(configurationId);\n    if (!originalConfig) {\n      throw new Error(`Report configuration ${configurationId} not found`);\n    }\n\n    const clonedConfig: ReportConfiguration = {\n      ...originalConfig,\n      id: `RPT-${Date.now()}`,\n      name: newName,\n      createdBy,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      schedule: undefined // Don't clone schedule\n    };\n\n    this.reportConfigurations.set(clonedConfig.id!, clonedConfig);\n\n    return clonedConfig;\n  }\n\n  // Scheduled job for automatic report generation\n  // Note: Would need to implement external cron scheduler (e.g., node-cron)\n  async processScheduledReports(): Promise<void> {\n    const now = new Date();\n    \n    for (const [configId, config] of this.reportConfigurations) {\n      if (config.schedule?.enabled && config.schedule.nextRun && config.schedule.nextRun <= now) {\n        try {\n          await this.generateReport(configId, {}, 'Scheduled');\n          \n          // Update next run time\n          config.schedule.lastRun = now;\n          config.schedule.nextRun = this.calculateNextRun(config.schedule);\n          \n          this.reportConfigurations.set(configId, config);\n        } catch (error) {\n          console.error(`Failed to generate scheduled report ${configId}:`, error);\n        }\n      }\n    }\n  }\n\n  private async validateReportConfiguration(config: ReportConfiguration): Promise<void> {\n    if (!config.name || !config.facilityId) {\n      throw new Error('Report name and facility ID are required');\n    }\n\n    if (!config.dataSource.tables || config.dataSource.tables.length === 0) {\n      throw new Error('At least one data source table is required');\n    }\n\n    if (!config.columns || config.columns.length === 0) {\n      throw new Error('At least one column is required');\n    }\n\n    // Validate filters\n    for (const filter of config.dataSource.filters) {\n      if (!filter.column || !filter.operator) {\n        throw new Error('Invalid filter configuration');\n      }\n    }\n  }\n\n  private async executeReportQuery(\n    config: ReportConfiguration,\n    parameters?: Record<string, any>\n  ): Promise<any[]> {\n    // Mock query execution - would integrate with actual database\n    const mockData = [];\n    const rowCount = Math.floor(Math.random() * 1000) + 100;\n\n    for (let i = 0; i < rowCount; i++) {\n      const row: Record<string, any> = {};\n      \n      for (const column of config.columns) {\n        switch (column.dataType) {\n          case 'string':\n            row[column.name] = `Sample ${column.name} ${i}`;\n            break;\n          case 'number':\n            row[column.name] = Math.floor(Math.random() * 1000);\n            break;\n          case 'date':\n            row[column.name] = new Date(Date.now() - Math.random() * 365 * 24 * 60 * 60 * 1000);\n            break;\n          case 'boolean':\n            row[column.name] = Math.random() > 0.5;\n            break;\n        }\n      }\n      \n      mockData.push(row);\n    }\n\n    return mockData;\n  }\n\n  private async applyCalculations(\n    data: any[],\n    calculations: ReportCalculation[]\n  ): Promise<any[]> {\n    return data.map(row => {\n      const calculatedRow = { ...row };\n      \n      for (const calc of calculations) {\n        // Mock calculation - would implement actual formula parser\n        if (calc.name === 'total_revenue') {\n          calculatedRow[calc.name] = (row.charges || 0) - (row.adjustments || 0);\n        } else if (calc.name === 'collection_rate') {\n          calculatedRow[calc.name] = ((row.collections || 0) / (row.charges || 1)) * 100;\n        } else {\n          calculatedRow[calc.name] = Math.random() * 100;\n        }\n      }\n      \n      return calculatedRow;\n    });\n  }\n\n  private async generateVisualizations(\n    data: any[],\n    visualizations: ReportVisualization[]\n  ): Promise<any[]> {\n    return visualizations.map(viz => {\n      const chartData = this.prepareChartData(data, viz);\n      \n      return {\n        type: viz.type,\n        title: viz.title,\n        chartType: viz.chartType,\n        data: chartData,\n        options: viz.options\n      };\n    });\n  }\n\n  private prepareChartData(data: any[], visualization: ReportVisualization): any {\n    // Mock chart data preparation\n    if (visualization.chartType === 'pie') {\n      return visualization.dataColumns.map(col => ({\n        name: col,\n        value: Math.floor(Math.random() * 100)\n      }));\n    } else if (visualization.chartType === 'bar' || visualization.chartType === 'line') {\n      return data.slice(0, 10).map((row, index) => ({\n        name: `Item ${index + 1}`,\n        ...visualization.dataColumns.reduce((acc: Record<string, any>, col) => {\n          acc[col] = row[col] || Math.random() * 100;\n          return acc;\n        }, {})\n      }));\n    }\n\n    return data.slice(0, 100); // Return sample data for tables\n  }\n\n  private generateSummary(data: any[], config: ReportConfiguration): any {\n    const summary: Record<string, any> = {\n      totalRows: data.length,\n      generatedAt: new Date()\n    };\n\n    // Calculate basic statistics for numeric columns\n    for (const column of config.columns) {\n      if (column.dataType === 'number') {\n        const values = data.map(row => row[column.name]).filter(v => typeof v === 'number');\n        if (values.length > 0) {\n          summary[`${column.name}_sum`] = values.reduce((sum, val) => sum + val, 0);\n          summary[`${column.name}_avg`] = summary[`${column.name}_sum`] / values.length;\n          summary[`${column.name}_min`] = Math.min(...values);\n          summary[`${column.name}_max`] = Math.max(...values);\n        }\n      }\n    }\n\n    return summary;\n  }\n\n  private async checkAlertConditions(report: GeneratedReport): Promise<void> {\n    const alerts = Array.from(this.reportAlerts.values())\n      .filter(alert => alert.reportConfigurationId === report.configurationId && alert.enabled);\n\n    for (const alert of alerts) {\n      let shouldTrigger = false;\n\n      for (const condition of alert.conditions) {\n        // Mock condition checking - would implement actual condition evaluation\n        const currentValue = Math.random() * 100;\n        const threshold = condition.threshold;\n\n        switch (condition.operator) {\n          case '>':\n            shouldTrigger = currentValue > threshold;\n            break;\n          case '<':\n            shouldTrigger = currentValue < threshold;\n            break;\n          case '>=':\n            shouldTrigger = currentValue >= threshold;\n            break;\n          case '<=':\n            shouldTrigger = currentValue <= threshold;\n            break;\n          case '=':\n            shouldTrigger = currentValue === threshold;\n            break;\n        }\n\n        if (shouldTrigger) {\n          await this.triggerAlert(alert, report, condition);\n          break;\n        }\n      }\n    }\n  }\n\n  private async triggerAlert(\n    alert: ReportAlert,\n    report: GeneratedReport,\n    condition: any\n  ): Promise<void> {\n    alert.lastTriggered = new Date();\n    alert.triggerCount++;\n\n    this.reportAlerts.set(alert.id, alert);\n\n    this.emit('alert-triggered', {\n      alertId: alert.id,\n      reportId: report.id,\n      condition,\n      severity: condition.severity,\n      recipients: alert.recipients\n    });\n\n    // Mock notification sending - would integrate with actual notification service\n    console.log(`Alert triggered: ${alert.name} for report ${report.name}`);\n  }\n\n  private buildCronExpression(schedule: ReportSchedule): string {\n    const [hour, minute] = schedule.time.split(':').map(Number);\n\n    switch (schedule.frequency) {\n      case 'daily':\n        return `${minute} ${hour} * * *`;\n      case 'weekly':\n        return `${minute} ${hour} * * ${schedule.dayOfWeek || 0}`;\n      case 'monthly':\n        return `${minute} ${hour} ${schedule.dayOfMonth || 1} * *`;\n      case 'quarterly':\n        return `${minute} ${hour} 1 */3 *`;\n      case 'annually':\n        return `${minute} ${hour} 1 1 *`;\n      default:\n        throw new Error(`Unsupported schedule frequency: ${schedule.frequency}`);\n    }\n  }\n\n  private calculateNextRun(schedule: ReportSchedule): Date {\n    const now = new Date();\n    const [hour, minute] = schedule.time.split(':').map(Number);\n\n    const nextRun = new Date(now);\n    nextRun.setHours(hour || 0, minute || 0, 0, 0);\n\n    switch (schedule.frequency) {\n      case 'daily':\n        if (nextRun <= now) {\n          nextRun.setDate(nextRun.getDate() + 1);\n        }\n        break;\n      case 'weekly':\n        const dayOfWeek = schedule.dayOfWeek || 0;\n        const daysUntilNext = (dayOfWeek - nextRun.getDay() + 7) % 7;\n        nextRun.setDate(nextRun.getDate() + (daysUntilNext || 7));\n        break;\n      case 'monthly':\n        const dayOfMonth = schedule.dayOfMonth || 1;\n        nextRun.setDate(dayOfMonth);\n        if (nextRun <= now) {\n          nextRun.setMonth(nextRun.getMonth() + 1);\n        }\n        break;\n      case 'quarterly':\n        nextRun.setDate(1);\n        nextRun.setMonth(Math.floor(nextRun.getMonth() / 3) * 3 + 3);\n        break;\n      case 'annually':\n        nextRun.setMonth(0, 1);\n        if (nextRun <= now) {\n          nextRun.setFullYear(nextRun.getFullYear() + 1);\n        }\n        break;\n    }\n\n    return nextRun;\n  }\n\n  private async performExport(\n    report: GeneratedReport,\n    format: string,\n    filePath: string\n  ): Promise<void> {\n    // Mock export process - would use actual export libraries like:\n    // - PDF: puppeteer, pdfkit\n    // - Excel: exceljs\n    // - CSV: csv-writer\n    console.log(`Exporting report ${report.id} to ${format} format at ${filePath}`);\n  }\n\n  private initializeStandardReports(): void {\n    // Clinical Quality Dashboard\n    this.reportConfigurations.set('clinical-quality-dashboard', {\n      id: 'clinical-quality-dashboard',\n      name: 'Clinical Quality Dashboard',\n      description: 'Comprehensive clinical quality measures dashboard',\n      type: 'Clinical Quality',\n      facilityId: 'default',\n      dataSource: {\n        tables: ['quality_measures', 'patients', 'encounters'],\n        joins: ['patients.id = encounters.patient_id'],\n        filters: []\n      },\n      columns: [\n        { name: 'measure_name', alias: 'Measure', dataType: 'string' },\n        { name: 'performance_rate', alias: 'Performance Rate', dataType: 'number', format: '##.##%' },\n        { name: 'benchmark', alias: 'Benchmark', dataType: 'number', format: '##.##%' },\n        { name: 'patient_count', alias: 'Patients', dataType: 'number' }\n      ],\n      calculations: [\n        {\n          name: 'gap_to_benchmark',\n          formula: 'benchmark - performance_rate',\n          dataType: 'percentage',\n          description: 'Gap to benchmark performance'\n        }\n      ],\n      visualizations: [\n        {\n          type: 'chart',\n          chartType: 'bar',\n          title: 'Quality Measures Performance',\n          dataColumns: ['measure_name', 'performance_rate', 'benchmark'],\n          options: { showBenchmark: true }\n        }\n      ],\n      recipients: [],\n      format: 'PDF',\n      createdBy: 'System',\n      createdAt: new Date()\n    });\n\n    // Financial Performance Report\n    this.reportConfigurations.set('financial-performance', {\n      id: 'financial-performance',\n      name: 'Financial Performance Report',\n      description: 'Revenue cycle and financial analytics',\n      type: 'Financial',\n      facilityId: 'default',\n      dataSource: {\n        tables: ['billing', 'payments', 'adjustments'],\n        joins: ['billing.id = payments.billing_id'],\n        filters: []\n      },\n      columns: [\n        { name: 'service_date', alias: 'Service Date', dataType: 'date' },\n        { name: 'charges', alias: 'Charges', dataType: 'number', format: 'currency' },\n        { name: 'payments', alias: 'Payments', dataType: 'number', format: 'currency' },\n        { name: 'adjustments', alias: 'Adjustments', dataType: 'number', format: 'currency' }\n      ],\n      calculations: [\n        {\n          name: 'net_revenue',\n          formula: 'charges - adjustments',\n          dataType: 'currency',\n          description: 'Net revenue after adjustments'\n        },\n        {\n          name: 'collection_rate',\n          formula: '(payments / charges) * 100',\n          dataType: 'percentage',\n          description: 'Collection rate percentage'\n        }\n      ],\n      visualizations: [\n        {\n          type: 'chart',\n          chartType: 'line',\n          title: 'Revenue Trend',\n          dataColumns: ['service_date', 'net_revenue'],\n          options: { showTrend: true }\n        }\n      ],\n      recipients: [],\n      format: 'Excel',\n      createdBy: 'System',\n      createdAt: new Date()\n    });\n  }\n}"],"version":3}