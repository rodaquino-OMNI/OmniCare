{"file":"/Users/rodrigo/claude-projects/OmniCare/backend/tests/unit/controllers/analytics.controller.test.ts","mappings":"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","names":[],"sources":["/Users/rodrigo/claude-projects/OmniCare/backend/tests/unit/controllers/analytics.controller.test.ts"],"sourcesContent":["import { Request, Response } from 'express';\nimport { analyticsController } from '../../../src/controllers/analytics.controller';\nimport { ClinicalQualityMeasuresService } from '../../../src/services/analytics/clinical-quality-measures.service';\nimport { FinancialAnalyticsService } from '../../../src/services/analytics/financial-analytics.service';\nimport { OperationalMetricsService } from '../../../src/services/analytics/operational-metrics.service';\nimport { PopulationHealthService } from '../../../src/services/analytics/population-health.service';\nimport { ReportingEngineService } from '../../../src/services/analytics/reporting-engine.service';\nimport logger from '../../../src/utils/logger';\n\n// Mock all analytics services\njest.mock('../../../src/services/analytics/clinical-quality-measures.service');\njest.mock('../../../src/services/analytics/financial-analytics.service');\njest.mock('../../../src/services/analytics/operational-metrics.service');\njest.mock('../../../src/services/analytics/population-health.service');\njest.mock('../../../src/services/analytics/reporting-engine.service');\njest.mock('../../../src/utils/logger');\n\ndescribe('Analytics Controller', () => {\n  let mockRequest: Partial<Request>;\n  let mockResponse: Partial<Response>;\n  let mockNext: jest.Mock;\n\n  const mockClinicalQualityService = ClinicalQualityMeasuresService as jest.MockedClass<typeof ClinicalQualityMeasuresService>;\n  const mockFinancialService = FinancialAnalyticsService as jest.MockedClass<typeof FinancialAnalyticsService>;\n  const mockOperationalService = OperationalMetricsService as jest.MockedClass<typeof OperationalMetricsService>;\n  const mockPopulationService = PopulationHealthService as jest.MockedClass<typeof PopulationHealthService>;\n  const mockReportingService = ReportingEngineService as jest.MockedClass<typeof ReportingEngineService>;\n\n  beforeEach(() => {\n    mockRequest = {\n      params: {},\n      query: {},\n      body: {},\n      user: {\n        id: 'test-user-1',\n        role: 'admin',\n        permissions: ['analytics:read', 'analytics:write']\n      }\n    };\n\n    mockResponse = {\n      status: jest.fn().mockReturnThis(),\n      json: jest.fn().mockReturnThis(),\n      send: jest.fn().mockReturnThis()\n    };\n\n    mockNext = jest.fn();\n\n    jest.clearAllMocks();\n  });\n\n  describe('Clinical Quality Measures', () => {\n    describe('getClinicalQualityMeasures', () => {\n      it('should return clinical quality measures successfully', async () => {\n        const mockMeasures = {\n          measures: [\n            {\n              id: 'CQM001',\n              title: 'Diabetes Control',\n              numerator: 85,\n              denominator: 100,\n              percentage: 85.0,\n              status: 'passing'\n            }\n          ],\n          summary: {\n            totalMeasures: 10,\n            passingMeasures: 8,\n            overallScore: 80.0\n          }\n        };\n\n        mockRequest.query = {\n          startDate: '2024-01-01',\n          endDate: '2024-12-31',\n          measureSet: 'CMS'\n        };\n\n        const mockServiceInstance = {\n          calculateQualityMeasures: jest.fn().mockResolvedValue(mockMeasures)\n        };\n        mockClinicalQualityService.mockImplementation(() => mockServiceInstance as any);\n\n        await analyticsController.getClinicalQualityMeasures(\n          mockRequest as Request,\n          mockResponse as Response,\n          mockNext\n        );\n\n        expect(mockServiceInstance.calculateQualityMeasures).toHaveBeenCalledWith({\n          startDate: new Date('2024-01-01'),\n          endDate: new Date('2024-12-31'),\n          measureSet: 'CMS'\n        });\n        expect(mockResponse.status).toHaveBeenCalledWith(200);\n        expect(mockResponse.json).toHaveBeenCalledWith({\n          success: true,\n          data: mockMeasures\n        });\n      });\n\n      it('should handle invalid date parameters', async () => {\n        mockRequest.query = {\n          startDate: 'invalid-date',\n          endDate: '2024-12-31'\n        };\n\n        await analyticsController.getClinicalQualityMeasures(\n          mockRequest as Request,\n          mockResponse as Response,\n          mockNext\n        );\n\n        expect(mockResponse.status).toHaveBeenCalledWith(400);\n        expect(mockResponse.json).toHaveBeenCalledWith({\n          success: false,\n          error: 'Invalid date parameters',\n          message: 'startDate and endDate must be valid ISO dates'\n        });\n      });\n\n      it('should handle service errors gracefully', async () => {\n        const serviceError = new Error('Database connection failed');\n        \n        const mockServiceInstance = {\n          calculateQualityMeasures: jest.fn().mockRejectedValue(serviceError)\n        };\n        mockClinicalQualityService.mockImplementation(() => mockServiceInstance as any);\n\n        await analyticsController.getClinicalQualityMeasures(\n          mockRequest as Request,\n          mockResponse as Response,\n          mockNext\n        );\n\n        expect(mockNext).toHaveBeenCalledWith(serviceError);\n      });\n    });\n\n    describe('getQualityMeasureDetails', () => {\n      it('should return detailed quality measure data', async () => {\n        const mockDetails = {\n          measure: {\n            id: 'CQM001',\n            title: 'Diabetes Control',\n            description: 'Percentage of patients with diabetes with HbA1c < 7%'\n          },\n          performance: {\n            numerator: 85,\n            denominator: 100,\n            percentage: 85.0,\n            benchmark: 80.0,\n            trend: 'improving'\n          },\n          breakdown: {\n            byProvider: [],\n            byDemographic: [],\n            byTimeFrame: []\n          }\n        };\n\n        mockRequest.params = { measureId: 'CQM001' };\n\n        const mockServiceInstance = {\n          getQualityMeasureDetails: jest.fn().mockResolvedValue(mockDetails)\n        };\n        mockClinicalQualityService.mockImplementation(() => mockServiceInstance as any);\n\n        await analyticsController.getQualityMeasureDetails(\n          mockRequest as Request,\n          mockResponse as Response,\n          mockNext\n        );\n\n        expect(mockServiceInstance.getQualityMeasureDetails).toHaveBeenCalledWith('CQM001');\n        expect(mockResponse.status).toHaveBeenCalledWith(200);\n        expect(mockResponse.json).toHaveBeenCalledWith({\n          success: true,\n          data: mockDetails\n        });\n      });\n    });\n  });\n\n  describe('Financial Analytics', () => {\n    describe('getRevenueAnalytics', () => {\n      it('should return revenue analytics data', async () => {\n        const mockRevenueData = {\n          totalRevenue: 1250000.00,\n          revenueByMonth: [\n            { month: '2024-01', revenue: 100000.00, growth: 5.2 },\n            { month: '2024-02', revenue: 105000.00, growth: 5.0 }\n          ],\n          revenueByService: [\n            { service: 'Primary Care', revenue: 500000.00, percentage: 40.0 },\n            { service: 'Specialty Care', revenue: 450000.00, percentage: 36.0 }\n          ],\n          payerMix: {\n            medicare: 35.0,\n            medicaid: 25.0,\n            commercial: 35.0,\n            selfPay: 5.0\n          }\n        };\n\n        mockRequest.query = {\n          startDate: '2024-01-01',\n          endDate: '2024-12-31',\n          groupBy: 'month'\n        };\n\n        const mockServiceInstance = {\n          getRevenueAnalytics: jest.fn().mockResolvedValue(mockRevenueData)\n        };\n        mockFinancialService.mockImplementation(() => mockServiceInstance as any);\n\n        await analyticsController.getRevenueAnalytics(\n          mockRequest as Request,\n          mockResponse as Response,\n          mockNext\n        );\n\n        expect(mockServiceInstance.getRevenueAnalytics).toHaveBeenCalledWith({\n          startDate: new Date('2024-01-01'),\n          endDate: new Date('2024-12-31'),\n          groupBy: 'month'\n        });\n        expect(mockResponse.status).toHaveBeenCalledWith(200);\n        expect(mockResponse.json).toHaveBeenCalledWith({\n          success: true,\n          data: mockRevenueData\n        });\n      });\n    });\n\n    describe('getCostAnalytics', () => {\n      it('should return cost analytics data', async () => {\n        const mockCostData = {\n          totalCosts: 950000.00,\n          costsByCategory: [\n            { category: 'Personnel', amount: 600000.00, percentage: 63.2 },\n            { category: 'Equipment', amount: 200000.00, percentage: 21.1 },\n            { category: 'Supplies', amount: 150000.00, percentage: 15.8 }\n          ],\n          costPerPatient: 125.50,\n          costTrends: {\n            currentPeriod: 950000.00,\n            previousPeriod: 920000.00,\n            change: 3.3\n          }\n        };\n\n        const mockServiceInstance = {\n          getCostAnalytics: jest.fn().mockResolvedValue(mockCostData)\n        };\n        mockFinancialService.mockImplementation(() => mockServiceInstance as any);\n\n        await analyticsController.getCostAnalytics(\n          mockRequest as Request,\n          mockResponse as Response,\n          mockNext\n        );\n\n        expect(mockResponse.status).toHaveBeenCalledWith(200);\n        expect(mockResponse.json).toHaveBeenCalledWith({\n          success: true,\n          data: mockCostData\n        });\n      });\n    });\n  });\n\n  describe('Operational Metrics', () => {\n    describe('getOperationalMetrics', () => {\n      it('should return operational metrics data', async () => {\n        const mockMetrics = {\n          patientFlow: {\n            dailyVisits: 150,\n            averageWaitTime: 15.5,\n            patientSatisfaction: 4.2,\n            noShowRate: 8.5\n          },\n          staffUtilization: {\n            physiciansUtilization: 85.0,\n            nursesUtilization: 78.0,\n            supportStaffUtilization: 65.0\n          },\n          resourceUtilization: {\n            roomUtilization: 72.0,\n            equipmentUtilization: 68.0,\n            bedOccupancy: 82.0\n          },\n          efficiency: {\n            appointmentsPerDay: 120,\n            averageAppointmentDuration: 22.5,\n            documentationTime: 8.2\n          }\n        };\n\n        mockRequest.query = {\n          period: 'week',\n          department: 'primary-care'\n        };\n\n        const mockServiceInstance = {\n          getOperationalMetrics: jest.fn().mockResolvedValue(mockMetrics)\n        };\n        mockOperationalService.mockImplementation(() => mockServiceInstance as any);\n\n        await analyticsController.getOperationalMetrics(\n          mockRequest as Request,\n          mockResponse as Response,\n          mockNext\n        );\n\n        expect(mockServiceInstance.getOperationalMetrics).toHaveBeenCalledWith({\n          period: 'week',\n          department: 'primary-care'\n        });\n        expect(mockResponse.status).toHaveBeenCalledWith(200);\n        expect(mockResponse.json).toHaveBeenCalledWith({\n          success: true,\n          data: mockMetrics\n        });\n      });\n    });\n\n    describe('getPerformanceIndicators', () => {\n      it('should return key performance indicators', async () => {\n        const mockKPIs = {\n          clinical: {\n            readmissionRate: 5.2,\n            infectionRate: 1.8,\n            mortalityRate: 0.8,\n            patientSafetyScore: 95.5\n          },\n          operational: {\n            bedTurnoverTime: 2.5,\n            surgeryOnTimeRate: 92.0,\n            emergencyResponseTime: 4.2,\n            dischargeEfficiency: 88.0\n          },\n          financial: {\n            revenuePerPatient: 1250.00,\n            costPerPatient: 980.00,\n            profitMargin: 21.6,\n            collectionRate: 94.5\n          }\n        };\n\n        const mockServiceInstance = {\n          getKeyPerformanceIndicators: jest.fn().mockResolvedValue(mockKPIs)\n        };\n        mockOperationalService.mockImplementation(() => mockServiceInstance as any);\n\n        await analyticsController.getPerformanceIndicators(\n          mockRequest as Request,\n          mockResponse as Response,\n          mockNext\n        );\n\n        expect(mockResponse.status).toHaveBeenCalledWith(200);\n        expect(mockResponse.json).toHaveBeenCalledWith({\n          success: true,\n          data: mockKPIs\n        });\n      });\n    });\n  });\n\n  describe('Population Health', () => {\n    describe('getPopulationHealthMetrics', () => {\n      it('should return population health data', async () => {\n        const mockPopulationData = {\n          demographics: {\n            totalPatients: 10000,\n            ageDistribution: {\n              '0-17': 1500,\n              '18-64': 6000,\n              '65+': 2500\n            },\n            genderDistribution: {\n              male: 4800,\n              female: 5200\n            }\n          },\n          chronicConditions: [\n            { condition: 'Diabetes', prevalence: 12.5, patients: 1250 },\n            { condition: 'Hypertension', prevalence: 25.8, patients: 2580 },\n            { condition: 'Heart Disease', prevalence: 8.3, patients: 830 }\n          ],\n          riskStratification: {\n            low: 6500,\n            medium: 2800,\n            high: 700\n          },\n          preventiveCare: {\n            mammographyScreening: 78.5,\n            colonoscopyScreening: 65.2,\n            influenzaVaccination: 82.1\n          }\n        };\n\n        mockRequest.query = {\n          population: 'all',\n          riskLevel: 'all'\n        };\n\n        const mockServiceInstance = {\n          getPopulationHealthMetrics: jest.fn().mockResolvedValue(mockPopulationData)\n        };\n        mockPopulationService.mockImplementation(() => mockServiceInstance as any);\n\n        await analyticsController.getPopulationHealthMetrics(\n          mockRequest as Request,\n          mockResponse as Response,\n          mockNext\n        );\n\n        expect(mockServiceInstance.getPopulationHealthMetrics).toHaveBeenCalledWith({\n          population: 'all',\n          riskLevel: 'all'\n        });\n        expect(mockResponse.status).toHaveBeenCalledWith(200);\n        expect(mockResponse.json).toHaveBeenCalledWith({\n          success: true,\n          data: mockPopulationData\n        });\n      });\n    });\n  });\n\n  describe('Reporting Engine', () => {\n    describe('generateReport', () => {\n      it('should generate and return a custom report', async () => {\n        const mockReport = {\n          reportId: 'report-123',\n          title: 'Monthly Quality Report',\n          generatedAt: new Date('2024-01-15T10:00:00Z'),\n          data: {\n            sections: [\n              {\n                title: 'Quality Measures',\n                content: { measures: [] }\n              },\n              {\n                title: 'Financial Performance',\n                content: { revenue: 100000 }\n              }\n            ]\n          },\n          metadata: {\n            format: 'json',\n            parameters: {},\n            generatedBy: 'test-user-1'\n          }\n        };\n\n        mockRequest.body = {\n          reportType: 'quality-measures',\n          parameters: {\n            startDate: '2024-01-01',\n            endDate: '2024-01-31'\n          },\n          format: 'json'\n        };\n\n        const mockServiceInstance = {\n          generateCustomReport: jest.fn().mockResolvedValue(mockReport)\n        };\n        mockReportingService.mockImplementation(() => mockServiceInstance as any);\n\n        await analyticsController.generateReport(\n          mockRequest as Request,\n          mockResponse as Response,\n          mockNext\n        );\n\n        expect(mockServiceInstance.generateCustomReport).toHaveBeenCalledWith({\n          reportType: 'quality-measures',\n          parameters: {\n            startDate: '2024-01-01',\n            endDate: '2024-01-31'\n          },\n          format: 'json',\n          userId: 'test-user-1'\n        });\n        expect(mockResponse.status).toHaveBeenCalledWith(200);\n        expect(mockResponse.json).toHaveBeenCalledWith({\n          success: true,\n          data: mockReport\n        });\n      });\n\n      it('should handle invalid report type', async () => {\n        mockRequest.body = {\n          reportType: 'invalid-type'\n        };\n\n        await analyticsController.generateReport(\n          mockRequest as Request,\n          mockResponse as Response,\n          mockNext\n        );\n\n        expect(mockResponse.status).toHaveBeenCalledWith(400);\n        expect(mockResponse.json).toHaveBeenCalledWith({\n          success: false,\n          error: 'Invalid report type',\n          message: 'Supported report types: quality-measures, financial, operational, population-health'\n        });\n      });\n    });\n\n    describe('getReportHistory', () => {\n      it('should return user report history', async () => {\n        const mockHistory = {\n          reports: [\n            {\n              id: 'report-123',\n              title: 'Monthly Quality Report',\n              type: 'quality-measures',\n              generatedAt: '2024-01-15T10:00:00Z',\n              status: 'completed',\n              downloadUrl: '/api/reports/report-123/download'\n            }\n          ],\n          totalCount: 1,\n          pagination: {\n            page: 1,\n            limit: 10,\n            totalPages: 1\n          }\n        };\n\n        mockRequest.query = {\n          page: '1',\n          limit: '10'\n        };\n\n        const mockServiceInstance = {\n          getReportHistory: jest.fn().mockResolvedValue(mockHistory)\n        };\n        mockReportingService.mockImplementation(() => mockServiceInstance as any);\n\n        await analyticsController.getReportHistory(\n          mockRequest as Request,\n          mockResponse as Response,\n          mockNext\n        );\n\n        expect(mockServiceInstance.getReportHistory).toHaveBeenCalledWith({\n          userId: 'test-user-1',\n          page: 1,\n          limit: 10\n        });\n        expect(mockResponse.status).toHaveBeenCalledWith(200);\n        expect(mockResponse.json).toHaveBeenCalledWith({\n          success: true,\n          data: mockHistory\n        });\n      });\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle missing authentication', async () => {\n      mockRequest.user = undefined;\n\n      await analyticsController.getClinicalQualityMeasures(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      expect(mockResponse.status).toHaveBeenCalledWith(401);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        error: 'Unauthorized',\n        message: 'Authentication required'\n      });\n    });\n\n    it('should handle insufficient permissions', async () => {\n      mockRequest.user = {\n        id: 'test-user-1',\n        role: 'nurse',\n        permissions: ['patient:read']\n      };\n\n      await analyticsController.getClinicalQualityMeasures(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      expect(mockResponse.status).toHaveBeenCalledWith(403);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        error: 'Forbidden',\n        message: 'Insufficient permissions for analytics data'\n      });\n    });\n\n    it('should handle service unavailable errors', async () => {\n      const serviceError = new Error('Service temporarily unavailable');\n      serviceError.name = 'ServiceUnavailableError';\n\n      const mockServiceInstance = {\n        calculateQualityMeasures: jest.fn().mockRejectedValue(serviceError)\n      };\n      mockClinicalQualityService.mockImplementation(() => mockServiceInstance as any);\n\n      await analyticsController.getClinicalQualityMeasures(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      expect(mockNext).toHaveBeenCalledWith(serviceError);\n    });\n  });\n\n  describe('Input Validation', () => {\n    it('should validate date range parameters', async () => {\n      mockRequest.query = {\n        startDate: '2024-12-31',\n        endDate: '2024-01-01' // End date before start date\n      };\n\n      await analyticsController.getClinicalQualityMeasures(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      expect(mockResponse.status).toHaveBeenCalledWith(400);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        error: 'Invalid date range',\n        message: 'End date must be after start date'\n      });\n    });\n\n    it('should validate pagination parameters', async () => {\n      mockRequest.query = {\n        page: '-1',\n        limit: '0'\n      };\n\n      await analyticsController.getReportHistory(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      expect(mockResponse.status).toHaveBeenCalledWith(400);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        error: 'Invalid pagination parameters',\n        message: 'Page must be >= 1 and limit must be > 0'\n      });\n    });\n  });\n});"],"version":3}