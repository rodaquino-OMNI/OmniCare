{"file":"/Users/rodrigo/claude-projects/OmniCare/backend/src/services/integration/direct/direct-trust.service.ts","mappings":"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","names":[],"sources":["/Users/rodrigo/claude-projects/OmniCare/backend/src/services/integration/direct/direct-trust.service.ts"],"sourcesContent":["// Import nodemailer only if not in test environment\nlet nodemailer: any;\nlet createTransport: any;\nlet Transporter: any;\nif (process.env.NODE_ENV !== 'test') {\n  try {\n    nodemailer = require('nodemailer');\n    createTransport = nodemailer.createTransport;\n    Transporter = nodemailer.Transporter;\n  } catch (error) {\n    // Mock nodemailer for testing\n    createTransport = () => ({\n      sendMail: () => Promise.resolve({ messageId: 'test-message-id' })\n    });\n  }\n} else {\n  // Mock for tests\n  createTransport = () => ({\n    sendMail: () => Promise.resolve({ messageId: 'test-message-id' })\n  });\n}\n\nimport { createHash, createSign, createVerify, randomBytes } from 'crypto';\nimport { X509Certificate } from 'crypto';\nimport { readFileSync } from 'fs';\nimport {\n  DirectMessage,\n  DirectAddress,\n  DirectTrustConfig,\n  DirectMessageStatus,\n  DirectConnectionStatus,\n  DirectTrustStatistics,\n  DirectAuditEvent,\n  DirectAuditEventType,\n  DirectHealthCheck,\n  DirectValidationResult,\n  DirectCertificate,\n  DirectEncryptionInfo,\n  DirectSignatureInfo\n} from '../types/direct.types';\nimport { getErrorMessage } from '@/utils/error.utils';\nimport { IntegrationResult, IntegrationError } from '../types/integration.types';\nimport logger from '@/utils/logger';\nimport config from '@/config';\n\n/**\n * Direct Trust Service\n * Implements Direct Trust secure messaging protocols for healthcare provider communication\n */\nexport class DirectTrustService {\n  private smtpTransporter?: any;\n  private directConfig: DirectTrustConfig;\n  private connectionStatus: DirectConnectionStatus;\n  private statistics: DirectTrustStatistics;\n  private messageQueue: Map<string, DirectMessage> = new Map();\n  private processingMessages: Set<string> = new Set();\n  private certificates: Map<string, DirectCertificate> = new Map();\n  private trustAnchors: Map<string, DirectCertificate> = new Map();\n\n  constructor() {\n    this.directConfig = this.loadConfiguration();\n    this.connectionStatus = this.initializeConnectionStatus();\n    this.statistics = this.initializeStatistics();\n    this.initialize();\n  }\n\n  /**\n   * Initialize Direct Trust service\n   */\n  private async initialize(): Promise<void> {\n    try {\n      if (!this.directConfig.enabled) {\n        logger.info('Direct Trust service is disabled');\n        return;\n      }\n\n      await this.loadCertificates();\n      await this.setupSMTPTransporter();\n      await this.validateTrustBundle();\n      \n      logger.info('Direct Trust service initialized successfully');\n    } catch (error) {\n      logger.error('Failed to initialize Direct Trust service:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Load Direct Trust configuration\n   */\n  private loadConfiguration(): DirectTrustConfig {\n    return {\n      enabled: process.env.DIRECT_TRUST_ENABLED === 'true',\n      domain: process.env.DIRECT_TRUST_DOMAIN || 'omnicare.direct',\n      smtpServer: {\n        host: process.env.DIRECT_SMTP_HOST || 'localhost',\n        port: parseInt(process.env.DIRECT_SMTP_PORT || '587', 10),\n        secure: process.env.DIRECT_SMTP_SECURE === 'true',\n        username: process.env.DIRECT_SMTP_USERNAME || '',\n        password: process.env.DIRECT_SMTP_PASSWORD || '',\n        pool: true,\n        maxConnections: 5,\n        maxMessages: 100\n      },\n      certificates: {\n        signingCertPath: process.env.DIRECT_SIGNING_CERT_PATH || './certs/direct-signing.pem',\n        signingKeyPath: process.env.DIRECT_SIGNING_KEY_PATH || './certs/direct-signing-key.pem',\n        encryptionCertPath: process.env.DIRECT_ENCRYPTION_CERT_PATH || './certs/direct-encryption.pem',\n        encryptionKeyPath: process.env.DIRECT_ENCRYPTION_KEY_PATH || './certs/direct-encryption-key.pem',\n        trustedAnchorsPath: process.env.DIRECT_TRUST_ANCHORS_PATH || './certs/trust-anchors.pem',\n        crlPath: process.env.DIRECT_CRL_PATH,\n        ocspUrl: process.env.DIRECT_OCSP_URL\n      },\n      security: {\n        enforceEncryption: process.env.DIRECT_ENFORCE_ENCRYPTION !== 'false',\n        enforceSignature: process.env.DIRECT_ENFORCE_SIGNATURE !== 'false',\n        validateCertificates: process.env.DIRECT_VALIDATE_CERTIFICATES !== 'false',\n        checkRevocation: process.env.DIRECT_CHECK_REVOCATION === 'true',\n        trustAnchorValidation: process.env.DIRECT_TRUST_ANCHOR_VALIDATION !== 'false',\n        allowedCipherSuites: ['TLS_AES_256_GCM_SHA384', 'TLS_CHACHA20_POLY1305_SHA256'],\n        minTlsVersion: '1.2'\n      },\n      policies: {\n        maxMessageSize: parseInt(process.env.DIRECT_MAX_MESSAGE_SIZE || '25000000', 10), // 25MB\n        maxAttachmentSize: parseInt(process.env.DIRECT_MAX_ATTACHMENT_SIZE || '10000000', 10), // 10MB\n        allowedAttachmentTypes: [\n          'application/pdf', 'text/xml', 'application/xml', 'text/plain',\n          'image/jpeg', 'image/png', 'image/tiff', 'application/dicom'\n        ],\n        messageRetentionDays: parseInt(process.env.DIRECT_MESSAGE_RETENTION_DAYS || '2555', 10), // 7 years\n        quarantineUnencrypted: process.env.DIRECT_QUARANTINE_UNENCRYPTED === 'true',\n        quarantineUnsigned: process.env.DIRECT_QUARANTINE_UNSIGNED === 'true',\n        autoAcknowledge: process.env.DIRECT_AUTO_ACKNOWLEDGE === 'true',\n        requireDeliveryNotification: process.env.DIRECT_REQUIRE_DELIVERY_NOTIFICATION === 'true'\n      }\n    };\n  }\n\n  /**\n   * Setup SMTP transporter\n   */\n  private async setupSMTPTransporter(): Promise<void> {\n    try {\n      this.smtpTransporter = createTransport({\n        host: this.directConfig.smtpServer.host,\n        port: this.directConfig.smtpServer.port,\n        secure: this.directConfig.smtpServer.secure,\n        auth: {\n          user: this.directConfig.smtpServer.username,\n          pass: this.directConfig.smtpServer.password\n        },\n        pool: this.directConfig.smtpServer.pool,\n        maxConnections: this.directConfig.smtpServer.maxConnections,\n        maxMessages: this.directConfig.smtpServer.maxMessages,\n        tls: {\n          minVersion: this.directConfig.security.minTlsVersion,\n          ciphers: this.directConfig.security.allowedCipherSuites.join(':')\n        }\n      });\n\n      // Verify SMTP connection\n      await this.smtpTransporter.verify();\n      this.connectionStatus.smtpConnected = true;\n      this.connectionStatus.lastSmtpCheck = new Date();\n      \n      logger.info('SMTP transporter configured successfully');\n    } catch (error) {\n      this.connectionStatus.smtpConnected = false;\n      this.connectionStatus.errors.push(`SMTP connection failed: ${error}`);\n      logger.error('Failed to setup SMTP transporter:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Load certificates from file system\n   */\n  private async loadCertificates(): Promise<void> {\n    try {\n      // Load signing certificate\n      const signingCertData = readFileSync(this.directConfig.certificates.signingCertPath, 'utf8');\n      const signingCert = new X509Certificate(signingCertData);\n      \n      // Load encryption certificate\n      const encryptionCertData = readFileSync(this.directConfig.certificates.encryptionCertPath, 'utf8');\n      const encryptionCert = new X509Certificate(encryptionCertData);\n      \n      // Store certificates\n      this.certificates.set('signing', this.convertX509ToDirectCertificate(signingCert, signingCertData));\n      this.certificates.set('encryption', this.convertX509ToDirectCertificate(encryptionCert, encryptionCertData));\n      \n      // Load trust anchors\n      await this.loadTrustAnchors();\n      \n      // Validate certificates\n      await this.validateCertificates();\n      \n      logger.info('Certificates loaded successfully');\n    } catch (error) {\n      logger.error('Failed to load certificates:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Load trust anchors\n   */\n  private async loadTrustAnchors(): Promise<void> {\n    try {\n      const trustAnchorsData = readFileSync(this.directConfig.certificates.trustedAnchorsPath, 'utf8');\n      const certRegex = /-----BEGIN CERTIFICATE-----[\\s\\S]*?-----END CERTIFICATE-----/g;\n      const certMatches = trustAnchorsData.match(certRegex);\n      \n      if (certMatches) {\n        for (const certData of certMatches) {\n          const cert = new X509Certificate(certData);\n          const directCert = this.convertX509ToDirectCertificate(cert, certData);\n          directCert.trustAnchor = true;\n          this.trustAnchors.set(cert.subject, directCert);\n        }\n      }\n      \n      logger.info(`Loaded ${this.trustAnchors.size} trust anchors`);\n    } catch (error) {\n      logger.warn('Failed to load trust anchors:', error);\n    }\n  }\n\n  /**\n   * Convert X509Certificate to DirectCertificate\n   */\n  private convertX509ToDirectCertificate(cert: X509Certificate, certData: string): DirectCertificate {\n    return {\n      id: cert.serialNumber,\n      subject: cert.subject,\n      issuer: cert.issuer,\n      serialNumber: cert.serialNumber,\n      notBefore: new Date(cert.validFrom),\n      notAfter: new Date(cert.validTo),\n      keyUsage: cert.keyUsage || [],\n      extendedKeyUsage: [],\n      subjectAltName: cert.subjectAltName ? cert.subjectAltName.split(', ') : undefined,\n      certificateData: certData,\n      fingerprint: cert.fingerprint,\n      status: new Date() > new Date(cert.validTo) ? 'expired' : 'valid',\n      trustAnchor: false,\n      ocspUrl: this.directConfig.certificates.ocspUrl,\n      crlUrl: this.directConfig.certificates.crlPath\n    };\n  }\n\n  /**\n   * Validate certificates\n   */\n  private async validateCertificates(): Promise<void> {\n    try {\n      const signingCert = this.certificates.get('signing');\n      const encryptionCert = this.certificates.get('encryption');\n      \n      if (!signingCert || !encryptionCert) {\n        throw new Error('Required certificates not loaded');\n      }\n      \n      // Check certificate expiration\n      const now = new Date();\n      const thirtyDaysFromNow = new Date(now.getTime() + (30 * 24 * 60 * 60 * 1000));\n      \n      if (signingCert.notAfter < now || encryptionCert.notAfter < now) {\n        this.connectionStatus.certificatesValid = false;\n        this.connectionStatus.errors.push('One or more certificates have expired');\n      } else if (signingCert.notAfter < thirtyDaysFromNow || encryptionCert.notAfter < thirtyDaysFromNow) {\n        logger.warn('One or more certificates will expire within 30 days');\n      }\n      \n      this.connectionStatus.certificatesValid = true;\n      this.connectionStatus.certificateExpiry = new Date(Math.min(signingCert.notAfter.getTime(), encryptionCert.notAfter.getTime()));\n      \n      logger.info('Certificate validation completed');\n    } catch (error) {\n      this.connectionStatus.certificatesValid = false;\n      this.connectionStatus.errors.push(`Certificate validation failed: ${error}`);\n      logger.error('Certificate validation failed:', error);\n    }\n  }\n\n  /**\n   * Validate trust bundle\n   */\n  private async validateTrustBundle(): Promise<void> {\n    try {\n      const trustAnchorCount = this.trustAnchors.size;\n      \n      if (trustAnchorCount === 0) {\n        this.connectionStatus.trustBundleValid = false;\n        this.connectionStatus.errors.push('No trust anchors loaded');\n        return;\n      }\n      \n      // Check if trust anchors are still valid\n      const now = new Date();\n      let validCount = 0;\n      \n      for (const [_, anchor] of this.trustAnchors) {\n        if (anchor.notAfter > now) {\n          validCount++;\n        }\n      }\n      \n      if (validCount === 0) {\n        this.connectionStatus.trustBundleValid = false;\n        this.connectionStatus.errors.push('All trust anchors have expired');\n      } else {\n        this.connectionStatus.trustBundleValid = true;\n        this.connectionStatus.trustBundleLastUpdate = new Date();\n      }\n      \n      logger.info(`Trust bundle validation completed: ${validCount}/${trustAnchorCount} valid anchors`);\n    } catch (error) {\n      this.connectionStatus.trustBundleValid = false;\n      this.connectionStatus.errors.push(`Trust bundle validation failed: ${error}`);\n      logger.error('Trust bundle validation failed:', error);\n    }\n  }\n\n  /**\n   * Send Direct Trust message\n   */\n  async sendMessage(message: DirectMessage): Promise<IntegrationResult<DirectMessage>> {\n    try {\n      if (!this.directConfig.enabled) {\n        throw new Error('Direct Trust service is disabled');\n      }\n      \n      if (!this.smtpTransporter) {\n        throw new Error('SMTP transporter not configured');\n      }\n      \n      // Validate message\n      const validationResult = await this.validateMessage(message);\n      if (!validationResult.valid) {\n        throw new Error(`Message validation failed: ${validationResult.errors.map(e => e.message).join(', ')}`);\n      }\n      \n      // Update message status\n      message.status = DirectMessageStatus.ENCRYPTING;\n      this.updateMessageStatus(message);\n      \n      // Encrypt and sign message content\n      const processedContent = await this.processOutboundMessage(message);\n      \n      message.status = DirectMessageStatus.SENDING;\n      this.updateMessageStatus(message);\n      \n      // Prepare email\n      const mailOptions = {\n        from: message.sender.address,\n        to: message.recipients.map(r => r.address),\n        subject: message.subject,\n        text: processedContent.body,\n        attachments: processedContent.attachments\n      };\n      \n      // Send email\n      const info = await this.smtpTransporter.sendMail(mailOptions);\n      \n      // Update message status\n      message.status = DirectMessageStatus.SENT;\n      message.sent = new Date();\n      this.updateMessageStatus(message);\n      \n      // Update statistics\n      this.statistics.messagesSent++;\n      this.statistics.lastActivity = new Date();\n      \n      // Log audit event\n      await this.logAuditEvent({\n        id: this.generateId(),\n        eventType: DirectAuditEventType.MESSAGE_SENT,\n        messageId: message.id,\n        sender: message.sender.address,\n        recipient: message.recipients.map(r => r.address).join(', '),\n        outcome: 'success',\n        description: 'Direct Trust message sent successfully',\n        details: { messageId: info.messageId, response: info.response },\n        timestamp: new Date()\n      });\n      \n      logger.info('Direct Trust message sent successfully', {\n        messageId: message.id,\n        recipients: message.recipients.length,\n        messageControlId: info.messageId\n      });\n      \n      return {\n        success: true,\n        data: message,\n        metadata: {\n          requestId: this.generateId(),\n          source: 'DirectTrustService',\n          destination: message.recipients.map(r => r.address).join(', '),\n          messageType: 'direct-trust-message',\n          version: '1.0',\n          timestamp: new Date(),\n          processingTime: Date.now() - message.created.getTime()\n        }\n      };\n    } catch (error) {\n      // Update message status\n      message.status = DirectMessageStatus.FAILED;\n      this.updateMessageStatus(message, error);\n      \n      // Update statistics\n      this.statistics.messagesFailed++;\n      \n      // Log audit event\n      await this.logAuditEvent({\n        id: this.generateId(),\n        eventType: DirectAuditEventType.MESSAGE_FAILED,\n        messageId: message.id,\n        sender: message.sender.address,\n        outcome: 'failure',\n        description: 'Direct Trust message send failed',\n        details: { error: getErrorMessage(error) },\n        timestamp: new Date()\n      });\n      \n      logger.error('Failed to send Direct Trust message:', error);\n      \n      return {\n        success: false,\n        error: {\n          code: 'DIRECT_SEND_FAILED',\n          message: `Failed to send Direct Trust message: ${getErrorMessage(error)}`,\n          severity: 'error',\n          source: 'DirectTrustService',\n          timestamp: new Date()\n        },\n        metadata: {\n          requestId: this.generateId(),\n          source: 'DirectTrustService',\n          destination: message.recipients.map(r => r.address).join(', '),\n          messageType: 'direct-trust-message',\n          version: '1.0',\n          timestamp: new Date()\n        }\n      };\n    }\n  }\n\n  /**\n   * Process outbound message (encrypt and sign)\n   */\n  private async processOutboundMessage(message: DirectMessage): Promise<{\n    body: string;\n    attachments: any[];\n  }> {\n    try {\n      let processedBody = message.body || '';\n      const processedAttachments: any[] = [];\n      \n      // Process attachments\n      for (const attachment of message.attachments) {\n        const processedAttachment = {\n          filename: attachment.filename,\n          content: attachment.content,\n          contentType: attachment.contentType,\n          encoding: 'base64'\n        };\n        \n        // Encrypt attachment if required\n        if (this.directConfig.security.enforceEncryption && !attachment.encrypted) {\n          // Implement attachment encryption\n          processedAttachment.content = await this.encryptContent(attachment.content.toString(), message.recipients);\n        }\n        \n        processedAttachments.push(processedAttachment);\n      }\n      \n      // Encrypt message body if required\n      if (this.directConfig.security.enforceEncryption) {\n        processedBody = await this.encryptContent(processedBody, message.recipients);\n        message.encryption = {\n          algorithm: 'AES-256-GCM',\n          keySize: 256,\n          certificateId: 'encryption',\n          encrypted: true,\n          encryptedAt: new Date()\n        };\n      }\n      \n      // Sign message if required\n      if (this.directConfig.security.enforceSignature) {\n        const signature = await this.signContent(processedBody);\n        message.signature = {\n          algorithm: 'SHA256withRSA',\n          certificateId: 'signing',\n          signed: true,\n          signedAt: new Date(),\n          signature\n        };\n      }\n      \n      return {\n        body: processedBody,\n        attachments: processedAttachments\n      };\n    } catch (error) {\n      logger.error('Failed to process outbound message:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Encrypt content for recipients\n   */\n  private async encryptContent(content: string, recipients: DirectAddress[]): Promise<string> {\n    try {\n      // This is a simplified implementation\n      // In production, you would use proper S/MIME encryption with recipient certificates\n      const key = randomBytes(32);\n      const iv = randomBytes(16);\n      \n      // Encrypt content with AES\n      const cipher = require('crypto').createCipher('aes-256-gcm', key);\n      cipher.setAAD(Buffer.from('DirectTrust', 'utf8'));\n      \n      let encrypted = cipher.update(content, 'utf8', 'hex');\n      encrypted += cipher.final('hex');\n      \n      const tag = cipher.getAuthTag();\n      \n      // In production, encrypt the key with each recipient's public key\n      const encryptedKey = key.toString('base64');\n      \n      return JSON.stringify({\n        encrypted,\n        key: encryptedKey,\n        iv: iv.toString('base64'),\n        tag: tag.toString('base64'),\n        algorithm: 'aes-256-gcm'\n      });\n    } catch (error) {\n      logger.error('Content encryption failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Sign content\n   */\n  private async signContent(content: string): Promise<string> {\n    try {\n      const signingCert = this.certificates.get('signing');\n      if (!signingCert) {\n        throw new Error('Signing certificate not available');\n      }\n      \n      const signingKey = readFileSync(this.directConfig.certificates.signingKeyPath, 'utf8');\n      const sign = createSign('SHA256');\n      sign.update(content);\n      sign.end();\n      \n      const signature = sign.sign(signingKey, 'base64');\n      return signature;\n    } catch (error) {\n      logger.error('Content signing failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Validate Direct Trust message\n   */\n  private async validateMessage(message: DirectMessage): Promise<DirectValidationResult> {\n    const errors: any[] = [];\n    const warnings: any[] = [];\n    \n    try {\n      // Validate sender\n      if (!message.sender.address || !this.isValidDirectAddress(message.sender.address)) {\n        errors.push({\n          code: 'INVALID_SENDER',\n          message: 'Invalid sender address',\n          severity: 'error',\n          field: 'sender.address'\n        });\n      }\n      \n      // Validate recipients\n      if (!message.recipients || message.recipients.length === 0) {\n        errors.push({\n          code: 'NO_RECIPIENTS',\n          message: 'Message must have at least one recipient',\n          severity: 'error',\n          field: 'recipients'\n        });\n      } else {\n        for (const recipient of message.recipients) {\n          if (!this.isValidDirectAddress(recipient.address)) {\n            errors.push({\n              code: 'INVALID_RECIPIENT',\n              message: `Invalid recipient address: ${recipient.address}`,\n              severity: 'error',\n              field: 'recipients'\n            });\n          }\n        }\n      }\n      \n      // Validate subject\n      if (!message.subject || message.subject.trim().length === 0) {\n        warnings.push({\n          code: 'EMPTY_SUBJECT',\n          message: 'Message subject is empty',\n          severity: 'warning',\n          field: 'subject'\n        });\n      }\n      \n      // Validate message size\n      const messageSize = this.calculateMessageSize(message);\n      if (messageSize > this.directConfig.policies.maxMessageSize) {\n        errors.push({\n          code: 'MESSAGE_TOO_LARGE',\n          message: `Message size (${messageSize}) exceeds maximum allowed size (${this.directConfig.policies.maxMessageSize})`,\n          severity: 'error',\n          field: 'message'\n        });\n      }\n      \n      // Validate attachments\n      for (const attachment of message.attachments) {\n        if (attachment.size > this.directConfig.policies.maxAttachmentSize) {\n          errors.push({\n            code: 'ATTACHMENT_TOO_LARGE',\n            message: `Attachment ${attachment.filename} is too large`,\n            severity: 'error',\n            field: 'attachments'\n          });\n        }\n        \n        if (!this.directConfig.policies.allowedAttachmentTypes.includes(attachment.contentType)) {\n          warnings.push({\n            code: 'UNSUPPORTED_ATTACHMENT_TYPE',\n            message: `Attachment type ${attachment.contentType} may not be supported`,\n            severity: 'warning',\n            field: 'attachments'\n          });\n        }\n      }\n      \n      return {\n        valid: errors.length === 0,\n        errors,\n        warnings,\n        securityLevel: this.calculateSecurityLevel(message),\n        trustLevel: await this.calculateTrustLevel(message),\n        validatedAt: new Date()\n      };\n    } catch (error) {\n      logger.error('Message validation failed:', error);\n      return {\n        valid: false,\n        errors: [{\n          code: 'VALIDATION_ERROR',\n          message: `Validation failed: ${getErrorMessage(error)}`,\n          severity: 'error'\n        }],\n        warnings: [],\n        securityLevel: 'low',\n        trustLevel: 'untrusted',\n        validatedAt: new Date()\n      };\n    }\n  }\n\n  /**\n   * Check valid Direct address format\n   */\n  private isValidDirectAddress(address: string): boolean {\n    const directAddressRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.(direct|Direct)$/;\n    return directAddressRegex.test(address);\n  }\n\n  /**\n   * Calculate message size\n   */\n  private calculateMessageSize(message: DirectMessage): number {\n    let size = 0;\n    \n    if (message.body) {\n      size += Buffer.byteLength(message.body, 'utf8');\n    }\n    \n    for (const attachment of message.attachments) {\n      size += attachment.size;\n    }\n    \n    return size;\n  }\n\n  /**\n   * Calculate security level\n   */\n  private calculateSecurityLevel(message: DirectMessage): 'low' | 'medium' | 'high' {\n    let score = 0;\n    \n    if (message.encryption?.encrypted) score += 3;\n    if (message.signature?.signed) score += 2;\n    if (message.attachments.every(a => a.encrypted)) score += 1;\n    \n    if (score >= 5) return 'high';\n    if (score >= 3) return 'medium';\n    return 'low';\n  }\n\n  /**\n   * Calculate trust level\n   */\n  private async calculateTrustLevel(message: DirectMessage): Promise<'untrusted' | 'low' | 'medium' | 'high'> {\n    // Simplified trust calculation\n    // In production, this would check certificate chains, trust anchors, etc.\n    return 'medium';\n  }\n\n  /**\n   * Update message status\n   */\n  private updateMessageStatus(message: DirectMessage, error?: any): void {\n    message.statusHistory.push({\n      status: message.status,\n      timestamp: new Date(),\n      description: error ? `Error: ${getErrorMessage(error)}` : undefined,\n      errorCode: error ? 'PROCESSING_ERROR' : undefined,\n      errorMessage: error ? getErrorMessage(error) : undefined\n    });\n  }\n\n  /**\n   * Log audit event\n   */\n  private async logAuditEvent(event: DirectAuditEvent): Promise<void> {\n    try {\n      // In production, store audit events in database\n      logger.audit('Direct Trust audit event', event);\n    } catch (error) {\n      logger.error('Failed to log audit event:', error);\n    }\n  }\n\n  /**\n   * Generate unique ID\n   */\n  private generateId(): string {\n    return randomBytes(16).toString('hex');\n  }\n\n  /**\n   * Initialize connection status\n   */\n  private initializeConnectionStatus(): DirectConnectionStatus {\n    return {\n      smtpConnected: false,\n      lastSmtpCheck: new Date(),\n      certificatesValid: false,\n      certificateExpiry: new Date(),\n      trustBundleValid: false,\n      trustBundleLastUpdate: new Date(),\n      errors: []\n    };\n  }\n\n  /**\n   * Initialize statistics\n   */\n  private initializeStatistics(): DirectTrustStatistics {\n    return {\n      messagesSent: 0,\n      messagesReceived: 0,\n      messagesDelivered: 0,\n      messagesFailed: 0,\n      messagesQuarantined: 0,\n      averageDeliveryTime: 0,\n      certificateValidationFailures: 0,\n      encryptionFailures: 0,\n      signatureValidationFailures: 0,\n      lastActivity: new Date(),\n      connectionStatus: this.connectionStatus\n    };\n  }\n\n  /**\n   * Get service statistics\n   */\n  getStatistics(): DirectTrustStatistics {\n    return { ...this.statistics };\n  }\n\n  /**\n   * Get health status\n   */\n  async getHealth(): Promise<DirectHealthCheck> {\n    try {\n      const now = new Date();\n      const isHealthy = this.connectionStatus.smtpConnected &&\n                       this.connectionStatus.certificatesValid &&\n                       this.connectionStatus.trustBundleValid;\n      \n      return {\n        status: isHealthy ? 'healthy' : 'unhealthy',\n        lastCheck: now,\n        smtpConnection: this.connectionStatus.smtpConnected,\n        certificateValid: this.connectionStatus.certificatesValid,\n        trustBundleValid: this.connectionStatus.trustBundleValid,\n        messageProcessing: this.processingMessages.size === 0,\n        details: {\n          messagesSent: this.statistics.messagesSent,\n          messagesReceived: this.statistics.messagesReceived,\n          messagesFailed: this.statistics.messagesFailed,\n          certificateExpiry: this.connectionStatus.certificateExpiry,\n          trustBundleLastUpdate: this.connectionStatus.trustBundleLastUpdate\n        },\n        errors: this.connectionStatus.errors\n      };\n    } catch (error) {\n      return {\n        status: 'unhealthy',\n        lastCheck: new Date(),\n        smtpConnection: false,\n        certificateValid: false,\n        trustBundleValid: false,\n        messageProcessing: false,\n        details: {},\n        errors: [getErrorMessage(error)]\n      };\n    }\n  }\n}\n\n// Export singleton instance\nexport const directTrustService = new DirectTrustService();"],"version":3}