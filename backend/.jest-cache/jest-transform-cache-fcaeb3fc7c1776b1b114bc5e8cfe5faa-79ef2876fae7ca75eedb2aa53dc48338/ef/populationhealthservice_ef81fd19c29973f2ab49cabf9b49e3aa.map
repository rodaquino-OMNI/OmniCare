{"file":"/Users/rodrigo/claude-projects/OmniCare/backend/src/services/analytics/population-health.service.ts","mappings":";AAAA;;;;;GAKG;;;AAEH,mCAAsC;AAyItC,MAAa,uBAAwB,SAAQ,qBAAY;IAC/C,UAAU,GAAqB,IAAI,GAAG,EAAE,CAAC;IACzC,cAAc,GAAiC,IAAI,GAAG,EAAE,CAAC;IACzD,mBAAmB,GAAuB,IAAI,GAAG,EAAE,CAAC;IAE5D;QACE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,oBAAoB,EAAE,CAAC;IAC9B,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,4BAA4B,CAChC,UAAkB,EAClB,MAAmC;QAEnC,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC;QAClE,MAAM,gBAAgB,GAAG,MAAM,IAAI,CAAC,yBAAyB,CAAC,UAAU,CAAC,CAAC;QAC1E,MAAM,iBAAiB,GAAG,MAAM,IAAI,CAAC,wBAAwB,CAAC,UAAU,CAAC,CAAC;QAC1E,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,wBAAwB,CAAC,UAAU,CAAC,CAAC;QAC3E,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC;QAEhE,OAAO;YACL,eAAe;YACf,gBAAgB;YAChB,iBAAiB;YACjB,kBAAkB;YAClB,YAAY;SACb,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,yBAAyB,CAC7B,UAAkB,EAClB,UAAqB;QAErB,MAAM,iBAAiB,GAAG,UAAU,IAAI,MAAM,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;QAChF,MAAM,mBAAmB,GAAyB,EAAE,CAAC;QAErD,KAAK,MAAM,SAAS,IAAI,iBAAiB,EAAE,CAAC;YAC1C,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;YACzD,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;YAC7D,MAAM,SAAS,GAAG,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;YACpD,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,WAAW,CAAC,CAAC;YAChE,MAAM,iBAAiB,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;YAC7E,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;YAEhF,mBAAmB,CAAC,IAAI,CAAC;gBACvB,SAAS;gBACT,SAAS;gBACT,SAAS;gBACT,WAAW;gBACX,iBAAiB;gBACjB,wBAAwB,EAAE,aAAa;gBACvC,WAAW,EAAE,IAAI,IAAI,EAAE;aACxB,CAAC,CAAC;QACL,CAAC;QAED,mCAAmC;QACnC,IAAI,CAAC,IAAI,CAAC,8BAA8B,EAAE;YACxC,UAAU;YACV,KAAK,EAAE,mBAAmB,CAAC,MAAM;YACjC,aAAa,EAAE,mBAAmB,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,KAAK,MAAM,IAAI,CAAC,CAAC,SAAS,KAAK,WAAW,CAAC,CAAC,MAAM;SAC7G,CAAC,CAAC;QAEH,OAAO,mBAAmB,CAAC;IAC7B,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,qBAAqB,CACzB,UAAkB,EAClB,UAAqB;QAErB,MAAM,iBAAiB,GAAG,UAAU,IAAI,MAAM,IAAI,CAAC,mBAAmB,EAAE,CAAC;QACzE,MAAM,cAAc,GAAoB,EAAE,CAAC;QAE3C,KAAK,MAAM,SAAS,IAAI,iBAAiB,EAAE,CAAC;YAC1C,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;YAC7E,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;YACvD,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;YACzE,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;YAEtE,cAAc,CAAC,IAAI,CAAC;gBAClB,SAAS;gBACT,WAAW,EAAE,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC;gBAC3C,OAAO,EAAE,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC;gBAC1C,MAAM,EAAE,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC;gBACxC,OAAO,EAAE,WAAW,CAAC,OAAO;gBAC5B,KAAK;gBACL,cAAc,EAAE,WAAW,CAAC,cAAc;gBAC1C,SAAS,EAAE,gBAAgB;gBAC3B,UAAU;gBACV,WAAW;aACZ,CAAC,CAAC;QACL,CAAC;QAED,OAAO,cAAc,CAAC;IACxB,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,eAAe,CACnB,UAAkB,EAClB,UAAqB;QAErB,MAAM,iBAAiB,GAAG,UAAU,IAAI,MAAM,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC;QACnF,MAAM,eAAe,GAAsB,EAAE,CAAC;QAE9C,KAAK,MAAM,SAAS,IAAI,iBAAiB,EAAE,CAAC;YAC1C,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;YACzD,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;YACtD,MAAM,aAAa,GAAG,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;YACxD,MAAM,2BAA2B,GAAG,MAAM,IAAI,CAAC,mCAAmC,CAAC,IAAI,CAAC,CAAC;YAEzF,eAAe,CAAC,IAAI,CAAC;gBACnB,SAAS;gBACT,WAAW,EAAE,WAAW,CAAC,IAAI;gBAC7B,IAAI;gBACJ,SAAS,EAAE,IAAI,CAAC,MAAM;gBACtB,aAAa;gBACb,2BAA2B;aAC5B,CAAC,CAAC;QACL,CAAC;QAED,OAAO,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,aAAa,GAAG,CAAC,CAAC,aAAa,CAAC,CAAC;IAC3E,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,0BAA0B,CAC9B,UAAkB;QAElB,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,yBAAyB,CAAC,UAAU,CAAC,CAAC;QAClE,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC;QAC9D,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;QAExD,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAC3E,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;QAC3D,MAAM,oBAAoB,GAAG,MAAM,IAAI,CAAC,4BAA4B,CAAC,QAAQ,CAAC,CAAC;QAE/E,OAAO;YACL,QAAQ;YACR,aAAa;YACb,oBAAoB;SACrB,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,gCAAgC,CACpC,UAAkB,EAClB,cAAsB,EACtB,MAAkC;QA+BlC,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,cAAc,CAAC,CAAC;QACvE,MAAM,gBAAgB,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,cAAc,CAAC,CAAC;QACxE,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,2BAA2B,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;QAChF,MAAM,iBAAiB,GAAG,MAAM,IAAI,CAAC,0BAA0B,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;QACxF,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,mCAAmC,CAAC,QAAQ,CAAC,CAAC;QAEjF,OAAO;YACL,YAAY;YACZ,gBAAgB;YAChB,QAAQ;YACR,iBAAiB;YACjB,eAAe;SAChB,CAAC;IACJ,CAAC;IAEO,KAAK,CAAC,kBAAkB,CAAC,UAAkB;QACjD,4DAA4D;QAC5D,OAAO,KAAK,CAAC;IACf,CAAC;IAEO,KAAK,CAAC,yBAAyB,CAAC,UAAkB;QACxD,OAAO;YACL,OAAO,EAAE,IAAI,EAAO,MAAM;YAC1B,YAAY,EAAE,IAAI,EAAE,MAAM;YAC1B,QAAQ,EAAE,IAAI,EAAM,MAAM;YAC1B,YAAY,EAAE,GAAG,CAAG,KAAK;SAC1B,CAAC;IACJ,CAAC;IAEO,KAAK,CAAC,wBAAwB,CAAC,UAAkB;QACvD,OAAO;YACL;gBACE,SAAS,EAAE,UAAU;gBACrB,UAAU,EAAE,IAAI;gBAChB,aAAa,EAAE,IAAI;gBACnB,cAAc,EAAE,IAAI;gBACpB,gBAAgB,EAAE,IAAI;aACvB;YACD;gBACE,SAAS,EAAE,cAAc;gBACzB,UAAU,EAAE,IAAI;gBAChB,aAAa,EAAE,IAAI;gBACnB,cAAc,EAAE,IAAI;gBACpB,gBAAgB,EAAE,IAAI;aACvB;YACD;gBACE,SAAS,EAAE,wBAAwB;gBACnC,UAAU,EAAE,GAAG;gBACf,aAAa,EAAE,IAAI;gBACnB,cAAc,EAAE,IAAI;gBACpB,gBAAgB,EAAE,IAAI;aACvB;YACD;gBACE,SAAS,EAAE,eAAe;gBAC1B,UAAU,EAAE,IAAI;gBAChB,aAAa,EAAE,IAAI;gBACnB,cAAc,EAAE,IAAI;gBACpB,gBAAgB,EAAE,IAAI;aACvB;YACD;gBACE,SAAS,EAAE,MAAM;gBACjB,UAAU,EAAE,GAAG;gBACf,aAAa,EAAE,GAAG;gBAClB,cAAc,EAAE,IAAI;gBACpB,gBAAgB,EAAE,IAAI;aACvB;SACF,CAAC;IACJ,CAAC;IAEO,KAAK,CAAC,wBAAwB,CAAC,UAAkB;QACvD,OAAO;YACL,eAAe,EAAE,IAAI;YACrB,kBAAkB,EAAE,IAAI;YACxB,cAAc,EAAE,IAAI;YACpB,sBAAsB,EAAE,IAAI;YAC5B,iBAAiB,EAAE,IAAI;SACxB,CAAC;IACJ,CAAC;IAEO,KAAK,CAAC,mBAAmB,CAAC,UAAkB;QAClD,OAAO;YACL,cAAc,EAAE,IAAI,EAAE,kBAAkB;YACxC,sBAAsB,EAAE;gBACtB;oBACE,KAAK,EAAE,OAAO;oBACd,UAAU,EAAE,IAAI;oBAChB,cAAc,EAAE,IAAI;oBACpB,WAAW,EAAE,IAAI;iBAClB;gBACD;oBACE,KAAK,EAAE,wBAAwB;oBAC/B,UAAU,EAAE,IAAI;oBAChB,cAAc,EAAE,IAAI;oBACpB,WAAW,EAAE,IAAI;iBAClB;gBACD;oBACE,KAAK,EAAE,iBAAiB;oBACxB,UAAU,EAAE,IAAI;oBAChB,cAAc,EAAE,IAAI;oBACpB,WAAW,EAAE,IAAI;iBAClB;gBACD;oBACE,KAAK,EAAE,OAAO;oBACd,UAAU,EAAE,IAAI;oBAChB,cAAc,EAAE,IAAI;oBACpB,WAAW,EAAE,IAAI;iBAClB;gBACD;oBACE,KAAK,EAAE,OAAO;oBACd,UAAU,EAAE,GAAG;oBACf,cAAc,EAAE,IAAI;oBACpB,WAAW,EAAE,IAAI;iBAClB;aACF;YACD,gBAAgB,EAAE;gBAChB;oBACE,QAAQ,EAAE,OAAO;oBACjB,UAAU,EAAE,IAAI;oBAChB,SAAS,EAAE,IAAI;oBACf,eAAe,EAAE,GAAG;iBACrB;gBACD;oBACE,QAAQ,EAAE,OAAO;oBACjB,UAAU,EAAE,IAAI;oBAChB,SAAS,EAAE,IAAI;oBACf,eAAe,EAAE,GAAG;iBACrB;gBACD;oBACE,QAAQ,EAAE,OAAO;oBACjB,UAAU,EAAE,IAAI;oBAChB,SAAS,EAAE,IAAI;oBACf,eAAe,EAAE,GAAG;iBACrB;gBACD;oBACE,QAAQ,EAAE,KAAK;oBACf,UAAU,EAAE,IAAI;oBAChB,SAAS,EAAE,IAAI;oBACf,eAAe,EAAE,IAAI;iBACtB;aACF;SACF,CAAC;IACJ,CAAC;IAEO,KAAK,CAAC,gBAAgB,CAAC,UAAkB;QAC/C,4DAA4D;QAC5D,MAAM,GAAG,GAAG,EAAE,CAAC;QACf,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC;YAC9B,GAAG,CAAC,IAAI,CAAC,MAAM,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC;QAC/C,CAAC;QACD,OAAO,GAAG,CAAC;IACb,CAAC;IAEO,KAAK,CAAC,cAAc,CAAC,SAAiB;QAC5C,oBAAoB;QACpB,OAAO;YACL,EAAE,EAAE,SAAS;YACb,IAAI,EAAE,WAAW,SAAS,EAAE;YAC5B,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE;YACxC,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG;YACvC,iBAAiB,EAAE,CAAC,UAAU,EAAE,cAAc,CAAC;YAC/C,WAAW,EAAE,CAAC,WAAW,EAAE,YAAY,CAAC;YACxC,gBAAgB,EAAE,CAAC;YACnB,SAAS,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;YAC1E,iBAAiB,EAAE,CAAC,gBAAgB,EAAE,WAAW,CAAC;YAClD,UAAU,EAAE;gBACV,GAAG,EAAE,IAAI;gBACT,aAAa,EAAE,QAAQ;gBACvB,aAAa,EAAE,GAAG;aACnB;SACF,CAAC;IACJ,CAAC;IAEO,KAAK,CAAC,kBAAkB,CAAC,WAAgB;QAC/C,IAAI,KAAK,GAAG,CAAC,CAAC;QAEd,aAAa;QACb,IAAI,WAAW,CAAC,GAAG,GAAG,EAAE;YAAE,KAAK,IAAI,EAAE,CAAC;aACjC,IAAI,WAAW,CAAC,GAAG,GAAG,EAAE;YAAE,KAAK,IAAI,EAAE,CAAC;QAE3C,qBAAqB;QACrB,KAAK,IAAI,WAAW,CAAC,iBAAiB,CAAC,MAAM,GAAG,EAAE,CAAC;QAEnD,qBAAqB;QACrB,KAAK,IAAI,WAAW,CAAC,gBAAgB,GAAG,CAAC,CAAC;QAE1C,sBAAsB;QACtB,KAAK,IAAI,WAAW,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC;QAElD,mBAAmB;QACnB,IAAI,WAAW,CAAC,UAAU,CAAC,GAAG,GAAG,EAAE;YAAE,KAAK,IAAI,EAAE,CAAC;QACjD,IAAI,WAAW,CAAC,UAAU,CAAC,aAAa,GAAG,CAAC;YAAE,KAAK,IAAI,EAAE,CAAC;QAE1D,OAAO,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC,aAAa;IAC5C,CAAC;IAEO,iBAAiB,CAAC,SAAiB;QACzC,IAAI,SAAS,IAAI,EAAE;YAAE,OAAO,WAAW,CAAC;QACxC,IAAI,SAAS,IAAI,EAAE;YAAE,OAAO,MAAM,CAAC;QACnC,IAAI,SAAS,IAAI,EAAE;YAAE,OAAO,UAAU,CAAC;QACvC,OAAO,KAAK,CAAC;IACf,CAAC;IAEO,KAAK,CAAC,mBAAmB,CAAC,WAAgB;QAChD,MAAM,OAAO,GAAG,EAAE,CAAC;QAEnB,IAAI,WAAW,CAAC,GAAG,GAAG,EAAE,EAAE,CAAC;YACzB,OAAO,CAAC,IAAI,CAAC;gBACX,MAAM,EAAE,cAAc;gBACtB,MAAM,EAAE,GAAG;gBACX,YAAY,EAAE,EAAE;gBAChB,UAAU,EAAE,KAAK;aAClB,CAAC,CAAC;QACL,CAAC;QAED,IAAI,WAAW,CAAC,iBAAiB,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC;YACvD,OAAO,CAAC,IAAI,CAAC;gBACX,MAAM,EAAE,UAAU;gBAClB,MAAM,EAAE,IAAI;gBACZ,YAAY,EAAE,EAAE;gBAChB,UAAU,EAAE,IAAI;aACjB,CAAC,CAAC;QACL,CAAC;QAED,IAAI,WAAW,CAAC,UAAU,CAAC,GAAG,GAAG,EAAE,EAAE,CAAC;YACpC,OAAO,CAAC,IAAI,CAAC;gBACX,MAAM,EAAE,SAAS;gBACjB,MAAM,EAAE,IAAI;gBACZ,YAAY,EAAE,EAAE;gBAChB,UAAU,EAAE,IAAI;aACjB,CAAC,CAAC;QACL,CAAC;QAED,OAAO,OAAO,CAAC;IACjB,CAAC;IAEO,KAAK,CAAC,eAAe,CAAC,WAAgB,EAAE,SAAiB;QAC/D,MAAM,QAAQ,GAAG,SAAS,GAAG,GAAG,CAAC;QAEjC,OAAO;YACL,mBAAmB,EAAE,QAAQ,GAAG,GAAG;YACnC,wBAAwB,EAAE,QAAQ,GAAG,IAAI;YACzC,yBAAyB,EAAE,QAAQ,GAAG,IAAI;YAC1C,aAAa,EAAE,QAAQ,GAAG,IAAI;SAC/B,CAAC;IACJ,CAAC;IAEO,KAAK,CAAC,sBAAsB,CAAC,SAAiB,EAAE,WAAkB;QACxE,MAAM,aAAa,GAAG,EAAE,CAAC;QAEzB,IAAI,SAAS,KAAK,MAAM,IAAI,SAAS,KAAK,WAAW,EAAE,CAAC;YACtD,aAAa,CAAC,IAAI,CAAC;gBACjB,YAAY,EAAE,2BAA2B;gBACzC,QAAQ,EAAE,MAAM;gBAChB,cAAc,EAAE,IAAI;gBACpB,iBAAiB,EAAE,GAAG;aACvB,CAAC,CAAC;YAEH,aAAa,CAAC,IAAI,CAAC;gBACjB,YAAY,EAAE,8BAA8B;gBAC5C,QAAQ,EAAE,MAAM;gBAChB,cAAc,EAAE,IAAI;gBACpB,iBAAiB,EAAE,GAAG;aACvB,CAAC,CAAC;QACL,CAAC;QAED,IAAI,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,KAAK,UAAU,CAAC,EAAE,CAAC;YACnD,aAAa,CAAC,IAAI,CAAC;gBACjB,YAAY,EAAE,oCAAoC;gBAClD,QAAQ,EAAE,QAAQ;gBAClB,cAAc,EAAE,IAAI;gBACpB,iBAAiB,EAAE,GAAG;aACvB,CAAC,CAAC;QACL,CAAC;QAED,OAAO,aAAa,CAAC;IACvB,CAAC;IAEO,KAAK,CAAC,mBAAmB;QAC/B,OAAO;YACL,kBAAkB;YAClB,sBAAsB;YACtB,4BAA4B;YAC5B,sBAAsB;YACtB,kBAAkB;SACnB,CAAC;IACJ,CAAC;IAEO,KAAK,CAAC,sBAAsB,CAAC,UAAkB,EAAE,SAAiB;QACxE,2BAA2B;QAC3B,OAAO;YACL,OAAO,EAAE,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,SAAS;YAC3C,cAAc,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,GAAG,GAAG;SACvD,CAAC;IACJ,CAAC;IAEO,KAAK,CAAC,aAAa,CAAC,SAAiB;QAC3C,OAAO;YACL,QAAQ,EAAE,IAAI;YACd,QAAQ,EAAE,IAAI;YACd,SAAS,EAAE,IAAI;SAChB,CAAC;IACJ,CAAC;IAEO,KAAK,CAAC,kBAAkB,CAAC,UAAkB,EAAE,SAAiB;QACpE,OAAO;YACL;gBACE,QAAQ,EAAE,wBAAwB;gBAClC,OAAO,EAAE,IAAI;gBACb,YAAY,EAAE,CAAC,GAAG;aACnB;YACD;gBACE,QAAQ,EAAE,iBAAiB;gBAC3B,OAAO,EAAE,IAAI;gBACb,YAAY,EAAE,CAAC,GAAG;aACnB;SACF,CAAC;IACJ,CAAC;IAEO,KAAK,CAAC,qBAAqB,CAAC,UAAkB,EAAE,SAAiB;QACvE,MAAM,MAAM,GAAG,CAAC,WAAW,EAAE,QAAQ,EAAE,WAAW,CAAC,CAAC;QACpD,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC,CAAQ,CAAC;IAClE,CAAC;IAEO,cAAc,CAAC,SAAiB;QACtC,MAAM,KAAK,GAA2B;YACpC,kBAAkB,EAAE,8BAA8B;YAClD,sBAAsB,EAAE,kCAAkC;YAC1D,4BAA4B,EAAE,4BAA4B;YAC1D,sBAAsB,EAAE,sBAAsB;YAC9C,kBAAkB,EAAE,yBAAyB;SAC9C,CAAC;QACF,OAAO,KAAK,CAAC,SAAS,CAAC,IAAI,SAAS,CAAC;IACvC,CAAC;IAEO,iBAAiB,CAAC,SAAiB;QACzC,OAAO,kDAAkD,CAAC;IAC5D,CAAC;IAEO,gBAAgB,CAAC,SAAiB;QACxC,MAAM,OAAO,GAA2B;YACtC,kBAAkB,EAAE,EAAE;YACtB,sBAAsB,EAAE,EAAE;YAC1B,4BAA4B,EAAE,EAAE;YAChC,sBAAsB,EAAE,EAAE;YAC1B,kBAAkB,EAAE,EAAE,CAAC,kBAAkB;SAC1C,CAAC;QACF,OAAO,OAAO,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;IAClC,CAAC;IAEO,KAAK,CAAC,mBAAmB,CAAC,UAAkB;QAClD,OAAO,CAAC,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,CAAC,CAAC;IAC3E,CAAC;IAEO,KAAK,CAAC,gBAAgB,CAAC,WAAgB;QAC7C,MAAM,IAAI,GAAG,EAAE,CAAC;QAEhB,+BAA+B;QAC/B,IAAI,WAAW,CAAC,iBAAiB,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC;YACvD,MAAM,gBAAgB,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,CAAC;YACzD,IAAI,gBAAgB,GAAG,GAAG,EAAE,CAAC;gBAC3B,IAAI,CAAC,IAAI,CAAC;oBACR,OAAO,EAAE,yBAAyB;oBAClC,WAAW,EAAE,oBAAoB;oBACjC,QAAQ,EAAE,MAAM;oBAChB,WAAW,EAAE,gBAAgB,GAAG,GAAG;oBACnC,cAAc,EAAE,+BAA+B;oBAC/C,eAAe,EAAE,GAAG;oBACpB,iBAAiB,EAAE,mDAAmD;oBACtE,gBAAgB,EAAE,WAAW;iBAC9B,CAAC,CAAC;YACL,CAAC;QACH,CAAC;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAEO,sBAAsB,CAAC,IAAW;QACxC,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;YAChC,MAAM,eAAe,GAA2B,EAAE,UAAU,EAAE,GAAG,EAAE,MAAM,EAAE,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC;YACzG,OAAO,KAAK,GAAG,CAAC,eAAe,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;QACtD,CAAC,EAAE,CAAC,CAAC,CAAC;IACR,CAAC;IAEO,KAAK,CAAC,mCAAmC,CAAC,IAAW;QAC3D,MAAM,eAAe,GAAG,EAAE,CAAC;QAE3B,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,KAAK,yBAAyB,CAAC,EAAE,CAAC;YAC5D,eAAe,CAAC,IAAI,CAAC,2CAA2C,CAAC,CAAC;QACpE,CAAC;QAED,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,KAAK,UAAU,IAAI,CAAC,CAAC,QAAQ,KAAK,MAAM,CAAC,EAAE,CAAC;YACvE,eAAe,CAAC,IAAI,CAAC,kCAAkC,CAAC,CAAC;QAC3D,CAAC;QAED,OAAO,eAAe,CAAC;IACzB,CAAC;IAEO,KAAK,CAAC,gBAAgB,CAAC,QAAe,EAAE,QAAe,EAAE,QAAe;QAC9E,MAAM,QAAQ,GAAG,EAAE,CAAC;QAEpB,MAAM,aAAa,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,KAAK,MAAM,IAAI,CAAC,CAAC,SAAS,KAAK,WAAW,CAAC,CAAC,MAAM,CAAC;QACzG,MAAM,aAAa,GAAG,QAAQ,CAAC,MAAM,CAAC;QAEtC,IAAI,aAAa,GAAG,aAAa,GAAG,IAAI,EAAE,CAAC;YACzC,QAAQ,CAAC,IAAI,CAAC;gBACZ,QAAQ,EAAE,iBAAiB;gBAC3B,OAAO,EAAE,6EAA6E;gBACtF,MAAM,EAAE,MAAM;gBACd,UAAU,EAAE,IAAI;gBAChB,kBAAkB,EAAE,aAAa;gBACjC,eAAe,EAAE;oBACf,6CAA6C;oBAC7C,oCAAoC;oBACpC,oDAAoD;iBACrD;gBACD,OAAO,EAAE;oBACP,kBAAkB,EAAE,CAAC,aAAa,GAAG,aAAa,CAAC,GAAG,GAAG;oBACzD,oBAAoB,EAAE,aAAa,GAAG,IAAI;iBAC3C;aACF,CAAC,CAAC;QACL,CAAC;QAED,OAAO,QAAQ,CAAC;IAClB,CAAC;IAEO,KAAK,CAAC,aAAa,CAAC,UAAkB;QAC5C,OAAO;YACL,gBAAgB,EAAE,GAAG;YACrB,UAAU,EAAE;gBACV;oBACE,SAAS,EAAE,MAAM;oBACjB,MAAM,EAAE,GAAG;oBACX,SAAS,EAAE,UAAU;iBACtB;gBACD;oBACE,SAAS,EAAE,UAAU;oBACrB,MAAM,EAAE,CAAC,GAAG;oBACZ,SAAS,EAAE,UAAU;iBACtB;aACF;YACD,mBAAmB,EAAE;gBACnB;oBACE,OAAO,EAAE,kBAAkB;oBAC3B,WAAW,EAAE,GAAG;oBAChB,SAAS,EAAE,eAAe;iBAC3B;gBACD;oBACE,OAAO,EAAE,wBAAwB;oBACjC,WAAW,EAAE,GAAG;oBAChB,SAAS,EAAE,eAAe;iBAC3B;aACF;SACF,CAAC;IACJ,CAAC;IAEO,KAAK,CAAC,4BAA4B,CAAC,QAAe;QACxD,OAAO;YACL;gBACE,QAAQ,EAAE,wBAAwB;gBAClC,WAAW,EAAE,oDAAoD;gBACjE,cAAc,EAAE,4BAA4B;gBAC5C,gBAAgB,EAAE,gCAAgC;gBAClD,QAAQ,EAAE,YAAY;aACvB;YACD;gBACE,QAAQ,EAAE,gCAAgC;gBAC1C,WAAW,EAAE,+CAA+C;gBAC5D,cAAc,EAAE,4BAA4B;gBAC5C,gBAAgB,EAAE,mCAAmC;gBACrD,QAAQ,EAAE,aAAa;aACxB;SACF,CAAC;IACJ,CAAC;IAEO,KAAK,CAAC,sBAAsB,CAAC,cAAsB;QACzD,OAAO;YACL,EAAE,EAAE,cAAc;YAClB,IAAI,EAAE,kCAAkC;YACxC,IAAI,EAAE,iBAAiB;YACvB,SAAS,EAAE,IAAI,IAAI,CAAC,YAAY,CAAC;YACjC,OAAO,EAAE,SAAS;SACnB,CAAC;IACJ,CAAC;IAEO,KAAK,CAAC,mBAAmB,CAAC,cAAsB;QACtD,OAAO;YACL,IAAI,EAAE,GAAG;YACT,gBAAgB,EAAE,GAAG;YACrB,gBAAgB,EAAE,GAAG;YACrB,iBAAiB,EAAE,GAAG;SACvB,CAAC;IACJ,CAAC;IAEO,KAAK,CAAC,2BAA2B,CAAC,cAAsB,EAAE,MAAW;QAC3E,OAAO;YACL;gBACE,MAAM,EAAE,eAAe;gBACvB,QAAQ,EAAE,IAAI;gBACd,OAAO,EAAE,IAAI;gBACb,MAAM,EAAE,GAAG;gBACX,gBAAgB,EAAE,IAAI;gBACtB,WAAW,EAAE,IAAI;aAClB;YACD;gBACE,MAAM,EAAE,sBAAsB;gBAC9B,QAAQ,EAAE,IAAI;gBACd,OAAO,EAAE,IAAI;gBACb,MAAM,EAAE,GAAG;gBACX,gBAAgB,EAAE,IAAI;gBACtB,WAAW,EAAE,IAAI;aAClB;SACF,CAAC;IACJ,CAAC;IAEO,KAAK,CAAC,0BAA0B,CAAC,cAAsB,EAAE,MAAW;QAC1E,OAAO;YACL,SAAS,EAAE,MAAM;YACjB,cAAc,EAAE,GAAG;YACnB,gBAAgB,EAAE,MAAM;YACxB,GAAG,EAAE,IAAI;SACV,CAAC;IACJ,CAAC;IAEO,oBAAoB;QAC1B,iCAAiC;QACjC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,UAAU,EAAE;YAC9B,OAAO,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,aAAa,EAAE,eAAe,CAAC;YAChE,OAAO,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;SACxC,CAAC,CAAC;QAEH,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,gBAAgB,EAAE;YACpC,OAAO,EAAE,CAAC,KAAK,EAAE,QAAQ,EAAE,SAAS,EAAE,aAAa,EAAE,gBAAgB,CAAC;YACtE,OAAO,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;SACxC,CAAC,CAAC;IACL,CAAC;CACF;AAttBD,0DAstBC","names":[],"sources":["/Users/rodrigo/claude-projects/OmniCare/backend/src/services/analytics/population-health.service.ts"],"sourcesContent":["/**\n * Population Health Analytics Service\n * \n * Comprehensive population health analytics including risk stratification,\n * health outcomes tracking, and population management\n */\n\nimport { EventEmitter } from 'events';\n\nexport interface PopulationHealthMetrics {\n  totalPopulation: number;\n  riskDistribution: {\n    lowRisk: number;\n    moderateRisk: number;\n    highRisk: number;\n    veryHighRisk: number;\n  };\n  chronicConditions: Array<{\n    condition: string;\n    prevalence: number;\n    totalPatients: number;\n    controlledRate: number;\n    averageRiskScore: number;\n  }>;\n  socialDeterminants: {\n    socialRiskScore: number;\n    housingInstability: number;\n    foodInsecurity: number;\n    transportationBarriers: number;\n    financialHardship: number;\n  };\n  healthEquity: {\n    disparityIndex: number;\n    raceEthnicityBreakdown: Array<{\n      group: string;\n      population: number;\n      healthOutcomes: number;\n      accessScore: number;\n    }>;\n    ageGroupAnalysis: Array<{\n      ageGroup: string;\n      population: number;\n      riskScore: number;\n      utilizationRate: number;\n    }>;\n  };\n}\n\nexport interface RiskStratification {\n  patientId: string;\n  riskScore: number;\n  riskLevel: 'Low' | 'Moderate' | 'High' | 'Very High';\n  riskFactors: Array<{\n    factor: string;\n    weight: number;\n    contribution: number;\n    modifiable: boolean;\n  }>;\n  predictedOutcomes: {\n    hospitalReadmission: number;\n    emergencyDepartmentVisit: number;\n    chronicDiseaseProgression: number;\n    mortalityRisk: number;\n  };\n  recommendedInterventions: Array<{\n    intervention: string;\n    priority: 'High' | 'Medium' | 'Low';\n    expectedImpact: number;\n    costEffectiveness: number;\n  }>;\n  lastUpdated: Date;\n}\n\nexport interface HealthOutcome {\n  outcomeId: string;\n  outcomeName: string;\n  measure: string;\n  target: number;\n  current: number;\n  trend: 'Improving' | 'Stable' | 'Declining';\n  populationSize: number;\n  timeframe: string;\n  benchmarks: {\n    national: number;\n    regional: number;\n    peerGroup: number;\n  };\n  disparities: Array<{\n    subgroup: string;\n    outcome: number;\n    disparityGap: number;\n  }>;\n}\n\nexport interface CareGapAnalysis {\n  patientId: string;\n  patientName: string;\n  gaps: Array<{\n    gapType: 'Preventive Care' | 'Chronic Care Management' | 'Medication Adherence' | 'Follow-up Care';\n    description: string;\n    severity: 'Critical' | 'High' | 'Medium' | 'Low';\n    daysOverdue: number;\n    clinicalImpact: string;\n    financialImpact: number;\n    recommendedAction: string;\n    assignedProvider?: string;\n  }>;\n  totalGaps: number;\n  priorityScore: number;\n  interventionRecommendations: string[];\n}\n\nexport interface PopulationInsights {\n  insights: Array<{\n    category: 'Risk Management' | 'Care Gaps' | 'Health Outcomes' | 'Resource Utilization';\n    insight: string;\n    impact: 'High' | 'Medium' | 'Low';\n    confidence: number;\n    affectedPopulation: number;\n    recommendations: string[];\n    metrics: Record<string, number>;\n  }>;\n  trendAnalysis: {\n    populationGrowth: number;\n    riskTrends: Array<{\n      riskLevel: string;\n      change: number;\n      direction: 'Increase' | 'Decrease' | 'Stable';\n    }>;\n    outcomeImprovements: Array<{\n      outcome: string;\n      improvement: number;\n      timeframe: string;\n    }>;\n  };\n  actionablePriorities: Array<{\n    priority: string;\n    description: string;\n    expectedImpact: string;\n    resourceRequired: string;\n    timeline: string;\n  }>;\n}\n\nexport class PopulationHealthService extends EventEmitter {\n  private riskModels: Map<string, any> = new Map();\n  private outcomeMetrics: Map<string, HealthOutcome[]> = new Map();\n  private interventionHistory: Map<string, any[]> = new Map();\n\n  constructor() {\n    super();\n    this.initializeRiskModels();\n  }\n\n  /**\n   * Get comprehensive population health analytics\n   */\n  async getPopulationHealthAnalytics(\n    facilityId: string,\n    period?: { start: Date; end: Date }\n  ): Promise<PopulationHealthMetrics> {\n    const totalPopulation = await this.getTotalPopulation(facilityId);\n    const riskDistribution = await this.calculateRiskDistribution(facilityId);\n    const chronicConditions = await this.analyzeChronicConditions(facilityId);\n    const socialDeterminants = await this.assessSocialDeterminants(facilityId);\n    const healthEquity = await this.analyzeHealthEquity(facilityId);\n\n    return {\n      totalPopulation,\n      riskDistribution,\n      chronicConditions,\n      socialDeterminants,\n      healthEquity\n    };\n  }\n\n  /**\n   * Perform risk stratification for population or individual patients\n   */\n  async performRiskStratification(\n    facilityId: string,\n    patientIds?: string[]\n  ): Promise<RiskStratification[]> {\n    const patientsToAnalyze = patientIds || await this.getAllPatientIds(facilityId);\n    const riskStratifications: RiskStratification[] = [];\n\n    for (const patientId of patientsToAnalyze) {\n      const patientData = await this.getPatientData(patientId);\n      const riskScore = await this.calculateRiskScore(patientData);\n      const riskLevel = this.classifyRiskLevel(riskScore);\n      const riskFactors = await this.identifyRiskFactors(patientData);\n      const predictedOutcomes = await this.predictOutcomes(patientData, riskScore);\n      const interventions = await this.recommendInterventions(riskLevel, riskFactors);\n\n      riskStratifications.push({\n        patientId,\n        riskScore,\n        riskLevel,\n        riskFactors,\n        predictedOutcomes,\n        recommendedInterventions: interventions,\n        lastUpdated: new Date()\n      });\n    }\n\n    // Emit event for real-time updates\n    this.emit('risk-stratification-complete', {\n      facilityId,\n      count: riskStratifications.length,\n      highRiskCount: riskStratifications.filter(r => r.riskLevel === 'High' || r.riskLevel === 'Very High').length\n    });\n\n    return riskStratifications;\n  }\n\n  /**\n   * Analyze health outcomes across population\n   */\n  async analyzeHealthOutcomes(\n    facilityId: string,\n    outcomeIds?: string[]\n  ): Promise<HealthOutcome[]> {\n    const outcomesToAnalyze = outcomeIds || await this.getStandardOutcomes();\n    const healthOutcomes: HealthOutcome[] = [];\n\n    for (const outcomeId of outcomesToAnalyze) {\n      const outcomeData = await this.calculateHealthOutcome(facilityId, outcomeId);\n      const benchmarks = await this.getBenchmarks(outcomeId);\n      const disparities = await this.analyzeDisparities(facilityId, outcomeId);\n      const trend = await this.calculateOutcomeTrend(facilityId, outcomeId);\n\n      healthOutcomes.push({\n        outcomeId,\n        outcomeName: this.getOutcomeName(outcomeId),\n        measure: this.getOutcomeMeasure(outcomeId),\n        target: this.getOutcomeTarget(outcomeId),\n        current: outcomeData.current,\n        trend,\n        populationSize: outcomeData.populationSize,\n        timeframe: 'Last 12 months',\n        benchmarks,\n        disparities\n      });\n    }\n\n    return healthOutcomes;\n  }\n\n  /**\n   * Identify and analyze care gaps\n   */\n  async analyzeCareGaps(\n    facilityId: string,\n    patientIds?: string[]\n  ): Promise<CareGapAnalysis[]> {\n    const patientsToAnalyze = patientIds || await this.getHighRiskPatients(facilityId);\n    const careGapAnalyses: CareGapAnalysis[] = [];\n\n    for (const patientId of patientsToAnalyze) {\n      const patientData = await this.getPatientData(patientId);\n      const gaps = await this.identifyCareGaps(patientData);\n      const priorityScore = this.calculatePriorityScore(gaps);\n      const interventionRecommendations = await this.generateInterventionRecommendations(gaps);\n\n      careGapAnalyses.push({\n        patientId,\n        patientName: patientData.name,\n        gaps,\n        totalGaps: gaps.length,\n        priorityScore,\n        interventionRecommendations\n      });\n    }\n\n    return careGapAnalyses.sort((a, b) => b.priorityScore - a.priorityScore);\n  }\n\n  /**\n   * Generate population health insights and recommendations\n   */\n  async generatePopulationInsights(\n    facilityId: string\n  ): Promise<PopulationInsights> {\n    const riskData = await this.performRiskStratification(facilityId);\n    const outcomes = await this.analyzeHealthOutcomes(facilityId);\n    const careGaps = await this.analyzeCareGaps(facilityId);\n    \n    const insights = await this.generateInsights(riskData, outcomes, careGaps);\n    const trendAnalysis = await this.analyzeTrends(facilityId);\n    const actionablePriorities = await this.identifyActionablePriorities(insights);\n\n    return {\n      insights,\n      trendAnalysis,\n      actionablePriorities\n    };\n  }\n\n  /**\n   * Monitor intervention effectiveness\n   */\n  async monitorInterventionEffectiveness(\n    facilityId: string,\n    interventionId: string,\n    period: { start: Date; end: Date }\n  ): Promise<{\n    intervention: {\n      id: string;\n      name: string;\n      type: string;\n      startDate: Date;\n      endDate?: Date;\n    };\n    targetPopulation: {\n      size: number;\n      eligiblePatients: number;\n      enrolledPatients: number;\n      completedPatients: number;\n    };\n    outcomes: Array<{\n      metric: string;\n      baseline: number;\n      current: number;\n      change: number;\n      changePercentage: number;\n      significant: boolean;\n    }>;\n    costEffectiveness: {\n      totalCost: number;\n      costPerPatient: number;\n      estimatedSavings: number;\n      roi: number;\n    };\n    recommendations: string[];\n  }> {\n    const intervention = await this.getInterventionDetails(interventionId);\n    const targetPopulation = await this.getTargetPopulation(interventionId);\n    const outcomes = await this.measureInterventionOutcomes(interventionId, period);\n    const costEffectiveness = await this.calculateCostEffectiveness(interventionId, period);\n    const recommendations = await this.generateInterventionRecommendations(outcomes);\n\n    return {\n      intervention,\n      targetPopulation,\n      outcomes,\n      costEffectiveness,\n      recommendations\n    };\n  }\n\n  private async getTotalPopulation(facilityId: string): Promise<number> {\n    // Mock implementation - would query actual patient database\n    return 12500;\n  }\n\n  private async calculateRiskDistribution(facilityId: string): Promise<any> {\n    return {\n      lowRisk: 7500,      // 60%\n      moderateRisk: 3125, // 25%\n      highRisk: 1250,     // 10%\n      veryHighRisk: 625   // 5%\n    };\n  }\n\n  private async analyzeChronicConditions(facilityId: string): Promise<any[]> {\n    return [\n      {\n        condition: 'Diabetes',\n        prevalence: 18.5,\n        totalPatients: 2312,\n        controlledRate: 72.3,\n        averageRiskScore: 65.2\n      },\n      {\n        condition: 'Hypertension',\n        prevalence: 32.1,\n        totalPatients: 4012,\n        controlledRate: 68.7,\n        averageRiskScore: 55.8\n      },\n      {\n        condition: 'Chronic Kidney Disease',\n        prevalence: 8.2,\n        totalPatients: 1025,\n        controlledRate: 58.4,\n        averageRiskScore: 78.9\n      },\n      {\n        condition: 'Heart Disease',\n        prevalence: 12.7,\n        totalPatients: 1587,\n        controlledRate: 65.1,\n        averageRiskScore: 72.3\n      },\n      {\n        condition: 'COPD',\n        prevalence: 6.9,\n        totalPatients: 862,\n        controlledRate: 62.8,\n        averageRiskScore: 69.5\n      }\n    ];\n  }\n\n  private async assessSocialDeterminants(facilityId: string): Promise<any> {\n    return {\n      socialRiskScore: 45.2,\n      housingInstability: 12.8,\n      foodInsecurity: 18.5,\n      transportationBarriers: 22.1,\n      financialHardship: 28.3\n    };\n  }\n\n  private async analyzeHealthEquity(facilityId: string): Promise<any> {\n    return {\n      disparityIndex: 0.15, // Lower is better\n      raceEthnicityBreakdown: [\n        {\n          group: 'White',\n          population: 6250,\n          healthOutcomes: 82.5,\n          accessScore: 88.1\n        },\n        {\n          group: 'Black/African American',\n          population: 2500,\n          healthOutcomes: 74.2,\n          accessScore: 79.8\n        },\n        {\n          group: 'Hispanic/Latino',\n          population: 2125,\n          healthOutcomes: 76.8,\n          accessScore: 81.5\n        },\n        {\n          group: 'Asian',\n          population: 1000,\n          healthOutcomes: 85.1,\n          accessScore: 90.2\n        },\n        {\n          group: 'Other',\n          population: 625,\n          healthOutcomes: 78.9,\n          accessScore: 83.7\n        }\n      ],\n      ageGroupAnalysis: [\n        {\n          ageGroup: '18-34',\n          population: 2500,\n          riskScore: 25.4,\n          utilizationRate: 3.2\n        },\n        {\n          ageGroup: '35-54',\n          population: 4375,\n          riskScore: 42.1,\n          utilizationRate: 5.8\n        },\n        {\n          ageGroup: '55-74',\n          population: 3750,\n          riskScore: 68.5,\n          utilizationRate: 8.9\n        },\n        {\n          ageGroup: '75+',\n          population: 1875,\n          riskScore: 82.3,\n          utilizationRate: 12.4\n        }\n      ]\n    };\n  }\n\n  private async getAllPatientIds(facilityId: string): Promise<string[]> {\n    // Mock implementation - would query actual patient database\n    const ids = [];\n    for (let i = 1; i <= 100; i++) {\n      ids.push(`PAT${String(i).padStart(6, '0')}`);\n    }\n    return ids;\n  }\n\n  private async getPatientData(patientId: string): Promise<any> {\n    // Mock patient data\n    return {\n      id: patientId,\n      name: `Patient ${patientId}`,\n      age: Math.floor(Math.random() * 70) + 18,\n      gender: Math.random() > 0.5 ? 'M' : 'F',\n      chronicConditions: ['Diabetes', 'Hypertension'],\n      medications: ['Metformin', 'Lisinopril'],\n      recentEncounters: 3,\n      lastVisit: new Date(Date.now() - Math.random() * 90 * 24 * 60 * 60 * 1000),\n      socialRiskFactors: ['Transportation', 'Financial'],\n      vitalSigns: {\n        bmi: 28.5,\n        bloodPressure: '140/90',\n        hemoglobinA1c: 8.2\n      }\n    };\n  }\n\n  private async calculateRiskScore(patientData: any): Promise<number> {\n    let score = 0;\n    \n    // Age factor\n    if (patientData.age > 65) score += 20;\n    else if (patientData.age > 45) score += 10;\n    \n    // Chronic conditions\n    score += patientData.chronicConditions.length * 15;\n    \n    // Recent utilization\n    score += patientData.recentEncounters * 5;\n    \n    // Social risk factors\n    score += patientData.socialRiskFactors.length * 8;\n    \n    // Clinical markers\n    if (patientData.vitalSigns.bmi > 30) score += 10;\n    if (patientData.vitalSigns.hemoglobinA1c > 9) score += 15;\n    \n    return Math.min(score, 100); // Cap at 100\n  }\n\n  private classifyRiskLevel(riskScore: number): 'Low' | 'Moderate' | 'High' | 'Very High' {\n    if (riskScore >= 80) return 'Very High';\n    if (riskScore >= 60) return 'High';\n    if (riskScore >= 40) return 'Moderate';\n    return 'Low';\n  }\n\n  private async identifyRiskFactors(patientData: any): Promise<any[]> {\n    const factors = [];\n    \n    if (patientData.age > 65) {\n      factors.push({\n        factor: 'Advanced Age',\n        weight: 0.2,\n        contribution: 20,\n        modifiable: false\n      });\n    }\n    \n    if (patientData.chronicConditions.includes('Diabetes')) {\n      factors.push({\n        factor: 'Diabetes',\n        weight: 0.25,\n        contribution: 25,\n        modifiable: true\n      });\n    }\n    \n    if (patientData.vitalSigns.bmi > 30) {\n      factors.push({\n        factor: 'Obesity',\n        weight: 0.15,\n        contribution: 15,\n        modifiable: true\n      });\n    }\n    \n    return factors;\n  }\n\n  private async predictOutcomes(patientData: any, riskScore: number): Promise<any> {\n    const baseRisk = riskScore / 100;\n    \n    return {\n      hospitalReadmission: baseRisk * 0.3,\n      emergencyDepartmentVisit: baseRisk * 0.45,\n      chronicDiseaseProgression: baseRisk * 0.25,\n      mortalityRisk: baseRisk * 0.05\n    };\n  }\n\n  private async recommendInterventions(riskLevel: string, riskFactors: any[]): Promise<any[]> {\n    const interventions = [];\n    \n    if (riskLevel === 'High' || riskLevel === 'Very High') {\n      interventions.push({\n        intervention: 'Intensive Care Management',\n        priority: 'High',\n        expectedImpact: 0.25,\n        costEffectiveness: 3.2\n      });\n      \n      interventions.push({\n        intervention: 'Medication Adherence Program',\n        priority: 'High',\n        expectedImpact: 0.18,\n        costEffectiveness: 4.1\n      });\n    }\n    \n    if (riskFactors.some(f => f.factor === 'Diabetes')) {\n      interventions.push({\n        intervention: 'Diabetes Self-Management Education',\n        priority: 'Medium',\n        expectedImpact: 0.15,\n        costEffectiveness: 2.8\n      });\n    }\n    \n    return interventions;\n  }\n\n  private async getStandardOutcomes(): Promise<string[]> {\n    return [\n      'diabetes-control',\n      'hypertension-control',\n      'preventive-care-completion',\n      'medication-adherence',\n      'readmission-rate'\n    ];\n  }\n\n  private async calculateHealthOutcome(facilityId: string, outcomeId: string): Promise<any> {\n    // Mock outcome calculation\n    return {\n      current: Math.random() * 30 + 70, // 70-100\n      populationSize: Math.floor(Math.random() * 1000) + 500\n    };\n  }\n\n  private async getBenchmarks(outcomeId: string): Promise<any> {\n    return {\n      national: 75.2,\n      regional: 78.5,\n      peerGroup: 76.8\n    };\n  }\n\n  private async analyzeDisparities(facilityId: string, outcomeId: string): Promise<any[]> {\n    return [\n      {\n        subgroup: 'Black/African American',\n        outcome: 68.5,\n        disparityGap: -6.7\n      },\n      {\n        subgroup: 'Hispanic/Latino',\n        outcome: 72.1,\n        disparityGap: -3.1\n      }\n    ];\n  }\n\n  private async calculateOutcomeTrend(facilityId: string, outcomeId: string): Promise<'Improving' | 'Stable' | 'Declining'> {\n    const trends = ['Improving', 'Stable', 'Declining'];\n    return trends[Math.floor(Math.random() * trends.length)] as any;\n  }\n\n  private getOutcomeName(outcomeId: string): string {\n    const names: Record<string, string> = {\n      'diabetes-control': 'Diabetes Control (HbA1c <7%)',\n      'hypertension-control': 'Blood Pressure Control (<140/90)',\n      'preventive-care-completion': 'Preventive Care Completion',\n      'medication-adherence': 'Medication Adherence',\n      'readmission-rate': '30-Day Readmission Rate'\n    };\n    return names[outcomeId] || outcomeId;\n  }\n\n  private getOutcomeMeasure(outcomeId: string): string {\n    return 'Percentage of eligible patients achieving target';\n  }\n\n  private getOutcomeTarget(outcomeId: string): number {\n    const targets: Record<string, number> = {\n      'diabetes-control': 80,\n      'hypertension-control': 75,\n      'preventive-care-completion': 90,\n      'medication-adherence': 85,\n      'readmission-rate': 10 // Lower is better\n    };\n    return targets[outcomeId] || 80;\n  }\n\n  private async getHighRiskPatients(facilityId: string): Promise<string[]> {\n    return ['PAT000001', 'PAT000002', 'PAT000003', 'PAT000004', 'PAT000005'];\n  }\n\n  private async identifyCareGaps(patientData: any): Promise<any[]> {\n    const gaps = [];\n    \n    // Mock care gap identification\n    if (patientData.chronicConditions.includes('Diabetes')) {\n      const daysSinceLastA1c = Math.floor(Math.random() * 200);\n      if (daysSinceLastA1c > 180) {\n        gaps.push({\n          gapType: 'Chronic Care Management',\n          description: 'HbA1c test overdue',\n          severity: 'High',\n          daysOverdue: daysSinceLastA1c - 180,\n          clinicalImpact: 'Risk of uncontrolled diabetes',\n          financialImpact: 450,\n          recommendedAction: 'Schedule HbA1c test and diabetes management visit',\n          assignedProvider: 'Dr. Smith'\n        });\n      }\n    }\n    \n    return gaps;\n  }\n\n  private calculatePriorityScore(gaps: any[]): number {\n    return gaps.reduce((score, gap) => {\n      const severityWeights: Record<string, number> = { 'Critical': 100, 'High': 75, 'Medium': 50, 'Low': 25 };\n      return score + (severityWeights[gap.severity] || 0);\n    }, 0);\n  }\n\n  private async generateInterventionRecommendations(gaps: any[]): Promise<string[]> {\n    const recommendations = [];\n    \n    if (gaps.some(g => g.gapType === 'Chronic Care Management')) {\n      recommendations.push('Enroll in chronic care management program');\n    }\n    \n    if (gaps.some(g => g.severity === 'Critical' || g.severity === 'High')) {\n      recommendations.push('Priority outreach and scheduling');\n    }\n    \n    return recommendations;\n  }\n\n  private async generateInsights(riskData: any[], outcomes: any[], careGaps: any[]): Promise<any[]> {\n    const insights = [];\n    \n    const highRiskCount = riskData.filter(r => r.riskLevel === 'High' || r.riskLevel === 'Very High').length;\n    const totalPatients = riskData.length;\n    \n    if (highRiskCount / totalPatients > 0.15) {\n      insights.push({\n        category: 'Risk Management',\n        insight: 'High proportion of patients at elevated risk requiring intensive management',\n        impact: 'High',\n        confidence: 0.85,\n        affectedPopulation: highRiskCount,\n        recommendations: [\n          'Implement intensive care management program',\n          'Increase care coordinator staffing',\n          'Deploy predictive analytics for early intervention'\n        ],\n        metrics: {\n          highRiskPercentage: (highRiskCount / totalPatients) * 100,\n          projectedCostSavings: highRiskCount * 2500\n        }\n      });\n    }\n    \n    return insights;\n  }\n\n  private async analyzeTrends(facilityId: string): Promise<any> {\n    return {\n      populationGrowth: 3.2,\n      riskTrends: [\n        {\n          riskLevel: 'High',\n          change: 5.8,\n          direction: 'Increase'\n        },\n        {\n          riskLevel: 'Moderate',\n          change: -2.1,\n          direction: 'Decrease'\n        }\n      ],\n      outcomeImprovements: [\n        {\n          outcome: 'Diabetes Control',\n          improvement: 4.2,\n          timeframe: 'Last 6 months'\n        },\n        {\n          outcome: 'Blood Pressure Control',\n          improvement: 2.8,\n          timeframe: 'Last 6 months'\n        }\n      ]\n    };\n  }\n\n  private async identifyActionablePriorities(insights: any[]): Promise<any[]> {\n    return [\n      {\n        priority: 'Expand Care Management',\n        description: 'Increase capacity for high-risk patient management',\n        expectedImpact: 'Reduce readmissions by 20%',\n        resourceRequired: '2 additional care coordinators',\n        timeline: '3-6 months'\n      },\n      {\n        priority: 'Social Determinants Initiative',\n        description: 'Address transportation and financial barriers',\n        expectedImpact: 'Improve care access by 15%',\n        resourceRequired: 'Community partnership and funding',\n        timeline: '6-12 months'\n      }\n    ];\n  }\n\n  private async getInterventionDetails(interventionId: string): Promise<any> {\n    return {\n      id: interventionId,\n      name: 'Diabetes Care Management Program',\n      type: 'Care Management',\n      startDate: new Date('2023-01-01'),\n      endDate: undefined\n    };\n  }\n\n  private async getTargetPopulation(interventionId: string): Promise<any> {\n    return {\n      size: 500,\n      eligiblePatients: 450,\n      enrolledPatients: 320,\n      completedPatients: 285\n    };\n  }\n\n  private async measureInterventionOutcomes(interventionId: string, period: any): Promise<any[]> {\n    return [\n      {\n        metric: 'HbA1c Control',\n        baseline: 65.2,\n        current: 73.8,\n        change: 8.6,\n        changePercentage: 13.2,\n        significant: true\n      },\n      {\n        metric: 'Medication Adherence',\n        baseline: 72.5,\n        current: 81.2,\n        change: 8.7,\n        changePercentage: 12.0,\n        significant: true\n      }\n    ];\n  }\n\n  private async calculateCostEffectiveness(interventionId: string, period: any): Promise<any> {\n    return {\n      totalCost: 125000,\n      costPerPatient: 390,\n      estimatedSavings: 285000,\n      roi: 2.28\n    };\n  }\n\n  private initializeRiskModels(): void {\n    // Initialize risk scoring models\n    this.riskModels.set('diabetes', {\n      factors: ['age', 'bmi', 'hba1c', 'medications', 'complications'],\n      weights: [0.15, 0.20, 0.30, 0.15, 0.20]\n    });\n    \n    this.riskModels.set('cardiovascular', {\n      factors: ['age', 'gender', 'smoking', 'cholesterol', 'blood_pressure'],\n      weights: [0.25, 0.10, 0.20, 0.25, 0.20]\n    });\n  }\n}"],"version":3}