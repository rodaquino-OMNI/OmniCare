{"file":"/Users/rodrigo/claude-projects/OmniCare/backend/tests/integration/auth.controller.integration.test.ts","mappings":"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","names":[],"sources":["/Users/rodrigo/claude-projects/OmniCare/backend/tests/integration/auth.controller.integration.test.ts"],"sourcesContent":["import request from 'supertest';\nimport express from 'express';\nimport jwt from 'jsonwebtoken';\nimport { authController } from '../../src/controllers/auth.controller';\nimport { smartFHIRService } from '../../src/services/smart-fhir.service';\nimport config from '../../src/config';\nimport logger from '../../src/utils/logger';\n\n// Mock dependencies\njest.mock('../../src/services/smart-fhir.service');\njest.mock('../../src/config', () => ({\n  smart: {\n    scopes: ['patient/*.read', 'user/*.read'],\n  },\n  fhir: {\n    baseUrl: 'https://test-fhir.omnicare.com',\n  },\n  jwt: {\n    secret: 'test-jwt-secret',\n    expiresIn: '1h',\n    refreshExpiresIn: '30d',\n  },\n}));\njest.mock('../../src/utils/logger');\n\ndescribe('Auth Controller Integration Tests', () => {\n  let app: express.Application;\n  const mockSmartFHIRService = smartFHIRService as jest.Mocked<typeof smartFHIRService>;\n  const mockLogger = logger as jest.Mocked<typeof logger>;\n\n  beforeEach(() => {\n    // Create Express app for testing\n    app = express();\n    app.use(express.json());\n    app.use(express.urlencoded({ extended: true }));\n\n    // Set up routes\n    app.get('/auth/authorize', authController.authorize.bind(authController));\n    app.post('/auth/token', authController.token.bind(authController));\n    app.post('/auth/introspect', authController.introspect.bind(authController));\n    app.post('/auth/login', authController.login.bind(authController));\n    app.post('/auth/refresh', authController.refreshInternalToken.bind(authController));\n\n    jest.clearAllMocks();\n  });\n\n  describe('SMART on FHIR Authorization', () => {\n    describe('GET /auth/authorize', () => {\n      it('should handle standalone authorization request', async () => {\n        mockSmartFHIRService.initiateAuthorization.mockResolvedValue({\n          state: 'test-state-123',\n          aud: 'https://test-fhir.omnicare.com',\n        });\n\n        const response = await request(app)\n          .get('/auth/authorize')\n          .query({\n            response_type: 'code',\n            client_id: 'test-client',\n            redirect_uri: 'https://app.example.com/callback',\n            scope: 'patient/*.read user/*.read',\n            state: 'client-state-456',\n          });\n\n        expect(response.status).toBe(302);\n        expect(response.headers.location).toMatch(/https:\\/\\/app\\.example\\.com\\/callback/);\n        expect(response.headers.location).toMatch(/code=/);\n        expect(response.headers.location).toMatch(/state=client-state-456/);\n\n        expect(mockSmartFHIRService.initiateAuthorization).toHaveBeenCalledWith(\n          'test-client',\n          'https://app.example.com/callback',\n          ['patient/*.read', 'user/*.read'],\n          'client-state-456',\n          undefined\n        );\n\n        expect(mockLogger.security).toHaveBeenCalledWith(\n          'SMART authorization request',\n          expect.objectContaining({\n            client_id: 'test-client',\n            response_type: 'code',\n            scope: 'patient/*.read user/*.read',\n          })\n        );\n      });\n\n      it('should handle EHR launch authorization request', async () => {\n        mockSmartFHIRService.handleEHRLaunch.mockResolvedValue({\n          state: 'ehr-state-789',\n          aud: 'https://test-fhir.omnicare.com',\n        });\n\n        const response = await request(app)\n          .get('/auth/authorize')\n          .query({\n            response_type: 'code',\n            client_id: 'test-client',\n            redirect_uri: 'https://app.example.com/callback',\n            scope: 'launch patient/*.read',\n            aud: 'https://test-fhir.omnicare.com',\n            launch: 'launch-context-123',\n          });\n\n        expect(response.status).toBe(302);\n        expect(response.headers.location).toMatch(/code=/);\n\n        expect(mockSmartFHIRService.handleEHRLaunch).toHaveBeenCalledWith(\n          'https://test-fhir.omnicare.com',\n          'launch-context-123',\n          'test-client',\n          'https://app.example.com/callback',\n          ['launch', 'patient/*.read']\n        );\n      });\n\n      it('should return error for invalid response_type', async () => {\n        const response = await request(app)\n          .get('/auth/authorize')\n          .query({\n            response_type: 'token',\n            client_id: 'test-client',\n            redirect_uri: 'https://app.example.com/callback',\n          });\n\n        expect(response.status).toBe(400);\n        expect(response.body).toEqual({\n          error: 'invalid_request',\n          error_description: 'response_type must be \"code\"',\n        });\n      });\n\n      it('should return error for missing client_id', async () => {\n        const response = await request(app)\n          .get('/auth/authorize')\n          .query({\n            response_type: 'code',\n            redirect_uri: 'https://app.example.com/callback',\n          });\n\n        expect(response.status).toBe(400);\n        expect(response.body).toEqual({\n          error: 'invalid_request',\n          error_description: 'client_id is required',\n        });\n      });\n\n      it('should return error for missing redirect_uri', async () => {\n        const response = await request(app)\n          .get('/auth/authorize')\n          .query({\n            response_type: 'code',\n            client_id: 'test-client',\n          });\n\n        expect(response.status).toBe(400);\n        expect(response.body).toEqual({\n          error: 'invalid_request',\n          error_description: 'redirect_uri is required',\n        });\n      });\n\n      it('should return error for EHR launch without aud', async () => {\n        const response = await request(app)\n          .get('/auth/authorize')\n          .query({\n            response_type: 'code',\n            client_id: 'test-client',\n            redirect_uri: 'https://app.example.com/callback',\n            launch: 'launch-context-123',\n          });\n\n        expect(response.status).toBe(400);\n        expect(response.body).toEqual({\n          error: 'invalid_request',\n          error_description: 'aud parameter required for EHR launch',\n        });\n      });\n\n      it('should handle authorization errors', async () => {\n        mockSmartFHIRService.initiateAuthorization.mockRejectedValue(\n          new Error('Authorization service error')\n        );\n\n        const response = await request(app)\n          .get('/auth/authorize')\n          .query({\n            response_type: 'code',\n            client_id: 'test-client',\n            redirect_uri: 'https://app.example.com/callback',\n          });\n\n        expect(response.status).toBe(500);\n        expect(response.body).toEqual({\n          error: 'server_error',\n          error_description: 'Authorization server error',\n        });\n      });\n    });\n\n    describe('POST /auth/token', () => {\n      it('should exchange authorization code for tokens', async () => {\n        // First, get an authorization code\n        mockSmartFHIRService.initiateAuthorization.mockResolvedValue({\n          state: 'test-state-123',\n          aud: 'https://test-fhir.omnicare.com',\n        });\n\n        const authResponse = await request(app)\n          .get('/auth/authorize')\n          .query({\n            response_type: 'code',\n            client_id: 'test-client',\n            redirect_uri: 'https://app.example.com/callback',\n            scope: 'patient/*.read user/*.read',\n          });\n\n        // Extract authorization code from redirect URL\n        const redirectUrl = new URL(authResponse.headers.location);\n        const authCode = redirectUrl.searchParams.get('code');\n\n        // Exchange code for tokens\n        const response = await request(app)\n          .post('/auth/token')\n          .send({\n            grant_type: 'authorization_code',\n            code: authCode,\n            redirect_uri: 'https://app.example.com/callback',\n            client_id: 'test-client',\n          });\n\n        expect(response.status).toBe(200);\n        expect(response.body).toMatchObject({\n          access_token: expect.any(String),\n          token_type: 'bearer',\n          expires_in: 3600,\n          scope: 'patient/*.read user/*.read',\n          refresh_token: expect.any(String),\n        });\n\n        // Verify token contains expected claims\n        const decodedToken = jwt.decode(response.body.access_token) as any;\n        expect(decodedToken).toMatchObject({\n          client_id: 'test-client',\n          scope: 'patient/*.read user/*.read',\n          type: 'access',\n          iss: config.fhir.baseUrl,\n        });\n      });\n\n      it('should handle refresh token grant', async () => {\n        // Create a valid refresh token\n        const refreshToken = jwt.sign(\n          {\n            client_id: 'test-client',\n            scope: 'patient/*.read',\n            type: 'refresh',\n            iss: config.fhir.baseUrl,\n          },\n          config.jwt.secret,\n          { expiresIn: '30d' }\n        );\n\n        const response = await request(app)\n          .post('/auth/token')\n          .send({\n            grant_type: 'refresh_token',\n            refresh_token: refreshToken,\n            client_id: 'test-client',\n          });\n\n        expect(response.status).toBe(200);\n        expect(response.body).toMatchObject({\n          access_token: expect.any(String),\n          token_type: 'bearer',\n          expires_in: 3600,\n          scope: 'patient/*.read',\n        });\n      });\n\n      it('should handle client credentials grant', async () => {\n        const response = await request(app)\n          .post('/auth/token')\n          .send({\n            grant_type: 'client_credentials',\n            client_id: 'omnicare-client',\n            client_secret: 'omnicare-secret',\n            scope: 'system/*.read',\n          });\n\n        expect(response.status).toBe(200);\n        expect(response.body).toMatchObject({\n          access_token: expect.any(String),\n          token_type: 'bearer',\n          expires_in: 3600,\n          scope: 'system/*.read',\n        });\n\n        const decodedToken = jwt.decode(response.body.access_token) as any;\n        expect(decodedToken).toMatchObject({\n          client_id: 'omnicare-client',\n          scope: 'system/*.read',\n          type: 'system',\n        });\n      });\n\n      it('should return error for invalid authorization code', async () => {\n        const response = await request(app)\n          .post('/auth/token')\n          .send({\n            grant_type: 'authorization_code',\n            code: 'invalid-code',\n            redirect_uri: 'https://app.example.com/callback',\n            client_id: 'test-client',\n          });\n\n        expect(response.status).toBe(400);\n        expect(response.body).toEqual({\n          error: 'invalid_grant',\n          error_description: 'Invalid or expired authorization code',\n        });\n      });\n\n      it('should return error for invalid refresh token', async () => {\n        const response = await request(app)\n          .post('/auth/token')\n          .send({\n            grant_type: 'refresh_token',\n            refresh_token: 'invalid-refresh-token',\n            client_id: 'test-client',\n          });\n\n        expect(response.status).toBe(400);\n        expect(response.body).toEqual({\n          error: 'invalid_grant',\n          error_description: 'Invalid refresh token',\n        });\n      });\n\n      it('should return error for invalid client credentials', async () => {\n        const response = await request(app)\n          .post('/auth/token')\n          .send({\n            grant_type: 'client_credentials',\n            client_id: 'invalid-client',\n            client_secret: 'invalid-secret',\n          });\n\n        expect(response.status).toBe(401);\n        expect(response.body).toEqual({\n          error: 'invalid_client',\n          error_description: 'Invalid client credentials',\n        });\n      });\n\n      it('should return error for unsupported grant type', async () => {\n        const response = await request(app)\n          .post('/auth/token')\n          .send({\n            grant_type: 'implicit',\n            client_id: 'test-client',\n          });\n\n        expect(response.status).toBe(400);\n        expect(response.body).toEqual({\n          error: 'unsupported_grant_type',\n          error_description: 'Supported grant types: authorization_code, refresh_token, client_credentials',\n        });\n      });\n\n      it('should return error for expired authorization code', async () => {\n        // Get authorization code\n        mockSmartFHIRService.initiateAuthorization.mockResolvedValue({\n          state: 'test-state-123',\n          aud: 'https://test-fhir.omnicare.com',\n        });\n\n        const authResponse = await request(app)\n          .get('/auth/authorize')\n          .query({\n            response_type: 'code',\n            client_id: 'test-client',\n            redirect_uri: 'https://app.example.com/callback',\n          });\n\n        const redirectUrl = new URL(authResponse.headers.location);\n        const authCode = redirectUrl.searchParams.get('code');\n\n        // Wait for code to expire (simulate by manipulating internal state)\n        // In a real test, you might use fake timers to advance time\n        await new Promise(resolve => setTimeout(resolve, 10)); // Small delay\n\n        // Manually expire the code by accessing private property (for test purposes)\n        const controller = authController as any;\n        const codeData = controller.authCodes.get(authCode);\n        if (codeData) {\n          codeData.expiresAt = Date.now() - 1000; // Set to past time\n        }\n\n        const response = await request(app)\n          .post('/auth/token')\n          .send({\n            grant_type: 'authorization_code',\n            code: authCode,\n            redirect_uri: 'https://app.example.com/callback',\n            client_id: 'test-client',\n          });\n\n        expect(response.status).toBe(400);\n        expect(response.body).toEqual({\n          error: 'invalid_grant',\n          error_description: 'Authorization code expired',\n        });\n      });\n    });\n\n    describe('POST /auth/introspect', () => {\n      it('should return active token information', async () => {\n        const accessToken = jwt.sign(\n          {\n            client_id: 'test-client',\n            scope: 'patient/*.read',\n            sub: 'user-123',\n            type: 'access',\n            iss: config.fhir.baseUrl,\n            aud: config.fhir.baseUrl,\n            patient: 'patient-456',\n            encounter: 'encounter-789',\n            fhirUser: 'Practitioner/practitioner-123',\n          },\n          config.jwt.secret,\n          { expiresIn: '1h' }\n        );\n\n        const response = await request(app)\n          .post('/auth/introspect')\n          .send({ token: accessToken });\n\n        expect(response.status).toBe(200);\n        expect(response.body).toMatchObject({\n          active: true,\n          scope: 'patient/*.read',\n          client_id: 'test-client',\n          sub: 'user-123',\n          patient: 'patient-456',\n          encounter: 'encounter-789',\n          fhirUser: 'Practitioner/practitioner-123',\n        });\n      });\n\n      it('should return inactive for invalid token', async () => {\n        const response = await request(app)\n          .post('/auth/introspect')\n          .send({ token: 'invalid-token' });\n\n        expect(response.status).toBe(200);\n        expect(response.body).toEqual({ active: false });\n      });\n\n      it('should return error for missing token', async () => {\n        const response = await request(app)\n          .post('/auth/introspect')\n          .send({});\n\n        expect(response.status).toBe(400);\n        expect(response.body).toEqual({\n          error: 'invalid_request',\n          error_description: 'token parameter is required',\n        });\n      });\n    });\n  });\n\n  describe('Internal API Authentication', () => {\n    describe('POST /auth/login', () => {\n      it('should authenticate admin user successfully', async () => {\n        const response = await request(app)\n          .post('/auth/login')\n          .send({\n            username: 'admin',\n            password: 'admin123',\n            clientId: 'omnicare-admin',\n          });\n\n        expect(response.status).toBe(200);\n        expect(response.body).toMatchObject({\n          access_token: expect.any(String),\n          token_type: 'bearer',\n          expires_in: 24 * 60 * 60,\n          refresh_token: expect.any(String),\n          scope: 'admin system/*.read system/*.write user/*.read user/*.write',\n          user: {\n            id: 'user-1',\n            username: 'admin',\n            name: 'System Administrator',\n            role: 'admin',\n          },\n        });\n\n        const decodedToken = jwt.decode(response.body.access_token) as any;\n        expect(decodedToken).toMatchObject({\n          sub: 'user-1',\n          username: 'admin',\n          type: 'internal',\n          iss: config.fhir.baseUrl,\n          aud: config.fhir.baseUrl,\n        });\n      });\n\n      it('should authenticate clinician user successfully', async () => {\n        const response = await request(app)\n          .post('/auth/login')\n          .send({\n            username: 'clinician',\n            password: 'clinic123',\n          });\n\n        expect(response.status).toBe(200);\n        expect(response.body).toMatchObject({\n          access_token: expect.any(String),\n          user: {\n            id: 'user-2',\n            username: 'clinician',\n            name: 'Dr. Jane Smith',\n            role: 'clinician',\n          },\n        });\n      });\n\n      it('should return error for invalid credentials', async () => {\n        const response = await request(app)\n          .post('/auth/login')\n          .send({\n            username: 'invalid',\n            password: 'invalid',\n          });\n\n        expect(response.status).toBe(401);\n        expect(response.body).toEqual({\n          error: 'invalid_credentials',\n          error_description: 'Invalid username or password',\n        });\n\n        expect(mockLogger.security).toHaveBeenCalledWith(\n          'Login failed - invalid credentials',\n          expect.objectContaining({\n            username: 'invalid',\n          })\n        );\n      });\n    });\n\n    describe('POST /auth/refresh', () => {\n      it('should refresh internal token successfully', async () => {\n        const refreshToken = jwt.sign(\n          {\n            sub: 'user-1',\n            username: 'admin',\n            type: 'refresh',\n          },\n          config.jwt.secret,\n          { expiresIn: '30d' }\n        );\n\n        const response = await request(app)\n          .post('/auth/refresh')\n          .send({\n            refresh_token: refreshToken,\n          });\n\n        expect(response.status).toBe(200);\n        expect(response.body).toMatchObject({\n          access_token: expect.any(String),\n          token_type: 'bearer',\n          expires_in: 24 * 60 * 60,\n          scope: 'admin system/*.read system/*.write user/*.read user/*.write',\n        });\n      });\n\n      it('should return error for invalid refresh token', async () => {\n        const response = await request(app)\n          .post('/auth/refresh')\n          .send({\n            refresh_token: 'invalid-refresh-token',\n          });\n\n        expect(response.status).toBe(400);\n        expect(response.body).toEqual({\n          error: 'invalid_grant',\n          error_description: 'Invalid refresh token',\n        });\n      });\n\n      it('should return error for missing refresh token', async () => {\n        const response = await request(app)\n          .post('/auth/refresh')\n          .send({});\n\n        expect(response.status).toBe(400);\n        expect(response.body).toEqual({\n          error: 'invalid_request',\n          error_description: 'refresh_token is required',\n        });\n      });\n\n      it('should return error for non-existent user', async () => {\n        const refreshToken = jwt.sign(\n          {\n            sub: 'non-existent-user',\n            username: 'non-existent',\n            type: 'refresh',\n          },\n          config.jwt.secret,\n          { expiresIn: '30d' }\n        );\n\n        const response = await request(app)\n          .post('/auth/refresh')\n          .send({\n            refresh_token: refreshToken,\n          });\n\n        expect(response.status).toBe(400);\n        expect(response.body).toEqual({\n          error: 'invalid_grant',\n          error_description: 'User not found',\n        });\n      });\n    });\n  });\n\n  describe('Rate Limiting and Security', () => {\n    it('should log security events for all authentication attempts', async () => {\n      await request(app)\n        .post('/auth/login')\n        .send({\n          username: 'admin',\n          password: 'admin123',\n        });\n\n      expect(mockLogger.security).toHaveBeenCalledWith(\n        'Internal API login attempt',\n        expect.objectContaining({\n          username: 'admin',\n        })\n      );\n\n      expect(mockLogger.security).toHaveBeenCalledWith(\n        'Internal API login successful',\n        expect.objectContaining({\n          userId: 'user-1',\n          username: 'admin',\n        })\n      );\n    });\n\n    it('should handle malformed requests gracefully', async () => {\n      const response = await request(app)\n        .post('/auth/token')\n        .send('{invalid-json');\n\n      expect(response.status).toBe(400);\n    });\n  });\n});"],"version":3}