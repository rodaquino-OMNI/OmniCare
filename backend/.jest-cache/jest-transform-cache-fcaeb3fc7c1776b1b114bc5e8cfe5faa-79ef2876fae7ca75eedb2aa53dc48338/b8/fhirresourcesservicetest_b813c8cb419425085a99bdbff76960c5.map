{"file":"/Users/rodrigo/claude-projects/OmniCare/backend/tests/unit/services/fhir-resources.service.test.ts","mappings":"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","names":[],"sources":["/Users/rodrigo/claude-projects/OmniCare/backend/tests/unit/services/fhir-resources.service.test.ts"],"sourcesContent":["import { FHIRResourcesService } from '../../../src/services/fhir-resources.service';\nimport { medplumService } from '../../../src/services/medplum.service';\nimport { Patient, Encounter, Observation, MedicationRequest, Bundle, Practitioner, ServiceRequest } from '@medplum/fhirtypes';\nimport { OmniCarePatient, OmniCareEncounter, OmniCareObservation, FHIRSearchParams } from '../../../src/types/fhir';\n\n// Mock the medplum service\njest.mock('../../../src/services/medplum.service', () => ({\n  medplumService: {\n    createResource: jest.fn(),\n    readResource: jest.fn(),\n    updateResource: jest.fn(),\n    searchResources: jest.fn(),\n    validateResource: jest.fn()\n  }\n}));\n\n// Mock logger\njest.mock('../../../src/utils/logger', () => ({\n  fhir: jest.fn(),\n  error: jest.fn(),\n  debug: jest.fn(),\n  info: jest.fn()\n}));\n\nconst mockMedplumService = medplumService as jest.Mocked<typeof medplumService>;\n\ndescribe('FHIRResourcesService', () => {\n  let fhirService: FHIRResourcesService;\n\n  beforeEach(() => {\n    fhirService = new FHIRResourcesService();\n    jest.clearAllMocks();\n  });\n\n  describe('Patient Operations', () => {\n    describe('createPatient', () => {\n      it('should create a patient with required fields', async () => {\n        const mockPatient: Patient = {\n          resourceType: 'Patient',\n          id: 'pat123',\n          active: true,\n          name: [{ family: 'Doe', given: ['John'] }],\n          gender: 'male',\n          birthDate: '1990-01-01'\n        };\n\n        mockMedplumService.createResource.mockResolvedValue(mockPatient);\n\n        const patientData: Partial<OmniCarePatient> = {\n          name: [{ family: 'Doe', given: ['John'] }],\n          gender: 'male',\n          birthDate: '1990-01-01'\n        };\n\n        const result = await fhirService.createPatient(patientData);\n\n        expect(mockMedplumService.createResource).toHaveBeenCalledWith(\n          expect.objectContaining({\n            resourceType: 'Patient',\n            active: true,\n            name: patientData.name,\n            gender: patientData.gender,\n            birthDate: patientData.birthDate,\n            identifier: expect.arrayContaining([\n              expect.objectContaining({\n                system: 'http://omnicare.com/patient-id'\n              })\n            ]),\n            extension: expect.arrayContaining([\n              expect.objectContaining({\n                url: 'http://omnicare.com/fhir/StructureDefinition/registration-date'\n              }),\n              expect.objectContaining({\n                url: 'http://omnicare.com/fhir/StructureDefinition/preferred-language'\n              })\n            ])\n          })\n        );\n        expect(result).toEqual(mockPatient);\n      });\n\n      it('should handle patient creation errors', async () => {\n        const error = new Error('Creation failed');\n        mockMedplumService.createResource.mockRejectedValue(error);\n\n        const patientData: Partial<OmniCarePatient> = {\n          name: [{ family: 'Doe', given: ['John'] }]\n        };\n\n        await expect(fhirService.createPatient(patientData)).rejects.toThrow('Creation failed');\n      });\n\n      it('should include OmniCare-specific extensions', async () => {\n        const mockPatient: Patient = {\n          resourceType: 'Patient',\n          id: 'pat123'\n        };\n\n        mockMedplumService.createResource.mockResolvedValue(mockPatient);\n\n        const patientData: Partial<OmniCarePatient> = {\n          name: [{ family: 'Doe', given: ['John'] }],\n          registrationDate: '2023-01-01T00:00:00Z',\n          preferredLanguage: 'es'\n        };\n\n        await fhirService.createPatient(patientData);\n\n        expect(mockMedplumService.createResource).toHaveBeenCalledWith(\n          expect.objectContaining({\n            extension: expect.arrayContaining([\n              expect.objectContaining({\n                url: 'http://omnicare.com/fhir/StructureDefinition/registration-date',\n                valueDateTime: '2023-01-01T00:00:00Z'\n              }),\n              expect.objectContaining({\n                url: 'http://omnicare.com/fhir/StructureDefinition/preferred-language',\n                valueString: 'es'\n              })\n            ])\n          })\n        );\n      });\n    });\n\n    describe('searchPatients', () => {\n      it('should search for patients with parameters', async () => {\n        const mockBundle: Bundle<Patient> = {\n          resourceType: 'Bundle',\n          type: 'searchset',\n          total: 1,\n          entry: [{\n            resource: {\n              resourceType: 'Patient',\n              id: 'pat123',\n              name: [{ family: 'Doe', given: ['John'] }]\n            }\n          }]\n        };\n\n        mockMedplumService.searchResources.mockResolvedValue(mockBundle);\n\n        const searchParams: FHIRSearchParams = {\n          family: 'Doe',\n          given: 'John',\n          _count: 10\n        };\n\n        const result = await fhirService.searchPatients(searchParams);\n\n        expect(mockMedplumService.searchResources).toHaveBeenCalledWith('Patient', searchParams);\n        expect(result).toEqual(mockBundle);\n      });\n\n      it('should handle empty search results', async () => {\n        const emptyBundle: Bundle<Patient> = {\n          resourceType: 'Bundle',\n          type: 'searchset',\n          total: 0,\n          entry: []\n        };\n\n        mockMedplumService.searchResources.mockResolvedValue(emptyBundle);\n\n        const result = await fhirService.searchPatients({});\n\n        expect(result.total).toBe(0);\n        expect(result.entry).toEqual([]);\n      });\n    });\n\n    describe('getPatient', () => {\n      it('should retrieve a patient by ID', async () => {\n        const mockPatient: Patient = {\n          resourceType: 'Patient',\n          id: 'pat123',\n          name: [{ family: 'Doe', given: ['John'] }]\n        };\n\n        mockMedplumService.readResource.mockResolvedValue(mockPatient);\n\n        const result = await fhirService.getPatient('pat123');\n\n        expect(mockMedplumService.readResource).toHaveBeenCalledWith('Patient', 'pat123');\n        expect(result).toEqual(mockPatient);\n      });\n\n      it('should handle patient not found', async () => {\n        const error = new Error('Patient not found');\n        mockMedplumService.readResource.mockRejectedValue(error);\n\n        await expect(fhirService.getPatient('nonexistent')).rejects.toThrow('Patient not found');\n      });\n    });\n\n    describe('updatePatient', () => {\n      it('should update a patient', async () => {\n        const mockPatient: Patient = {\n          resourceType: 'Patient',\n          id: 'pat123',\n          name: [{ family: 'Smith', given: ['John'] }]\n        };\n\n        mockMedplumService.updateResource.mockResolvedValue(mockPatient);\n\n        const result = await fhirService.updatePatient(mockPatient);\n\n        expect(mockMedplumService.updateResource).toHaveBeenCalledWith(mockPatient);\n        expect(result).toEqual(mockPatient);\n      });\n    });\n  });\n\n  describe('Practitioner Operations', () => {\n    describe('createPractitioner', () => {\n      it('should create a practitioner with identifier', async () => {\n        const mockPractitioner: Practitioner = {\n          resourceType: 'Practitioner',\n          id: 'prac123',\n          active: true,\n          name: [{ family: 'Smith', given: ['Dr. Jane'], prefix: ['Dr.'] }]\n        };\n\n        mockMedplumService.createResource.mockResolvedValue(mockPractitioner);\n\n        const practitionerData = {\n          name: [{ family: 'Smith', given: ['Dr. Jane'], prefix: ['Dr.'] }],\n          qualification: [{\n            code: {\n              coding: [{ system: 'http://terminology.hl7.org/CodeSystem/v2-0360', code: 'MD' }]\n            }\n          }]\n        };\n\n        const result = await fhirService.createPractitioner(practitionerData);\n\n        expect(mockMedplumService.createResource).toHaveBeenCalledWith(\n          expect.objectContaining({\n            resourceType: 'Practitioner',\n            active: true,\n            name: practitionerData.name,\n            qualification: practitionerData.qualification,\n            identifier: expect.arrayContaining([\n              expect.objectContaining({\n                system: 'http://omnicare.com/practitioner-id',\n                value: expect.stringMatching(/^PR\\d+$/)\n              })\n            ])\n          })\n        );\n        expect(result).toEqual(mockPractitioner);\n      });\n    });\n\n    describe('searchPractitioners', () => {\n      it('should search for practitioners', async () => {\n        const mockBundle: Bundle<Practitioner> = {\n          resourceType: 'Bundle',\n          type: 'searchset',\n          total: 1,\n          entry: [{\n            resource: {\n              resourceType: 'Practitioner',\n              id: 'prac123',\n              name: [{ family: 'Smith', given: ['Dr. Jane'] }]\n            }\n          }]\n        };\n\n        mockMedplumService.searchResources.mockResolvedValue(mockBundle);\n\n        const searchParams = { family: 'Smith' };\n        const result = await fhirService.searchPractitioners(searchParams);\n\n        expect(mockMedplumService.searchResources).toHaveBeenCalledWith('Practitioner', searchParams);\n        expect(result).toEqual(mockBundle);\n      });\n    });\n  });\n\n  describe('Encounter Operations', () => {\n    describe('createEncounter', () => {\n      it('should create an encounter with default values', async () => {\n        const mockEncounter: Encounter = {\n          resourceType: 'Encounter',\n          id: 'enc123',\n          status: 'planned',\n          class: {\n            system: 'http://terminology.hl7.org/CodeSystem/v3-ActCode',\n            code: 'AMB',\n            display: 'Ambulatory'\n          },\n          subject: { reference: 'Patient/pat123' }\n        };\n\n        mockMedplumService.createResource.mockResolvedValue(mockEncounter);\n\n        const encounterData: Partial<OmniCareEncounter> = {\n          subject: { reference: 'Patient/pat123' },\n          appointmentType: 'routine',\n          chiefComplaint: 'Annual checkup'\n        };\n\n        const result = await fhirService.createEncounter(encounterData);\n\n        expect(mockMedplumService.createResource).toHaveBeenCalledWith(\n          expect.objectContaining({\n            resourceType: 'Encounter',\n            status: 'planned',\n            class: {\n              system: 'http://terminology.hl7.org/CodeSystem/v3-ActCode',\n              code: 'AMB',\n              display: 'Ambulatory'\n            },\n            subject: { reference: 'Patient/pat123' },\n            identifier: expect.arrayContaining([\n              expect.objectContaining({\n                system: 'http://omnicare.com/encounter-id'\n              })\n            ]),\n            extension: expect.arrayContaining([\n              expect.objectContaining({\n                url: 'http://omnicare.com/fhir/StructureDefinition/appointment-type',\n                valueString: 'routine'\n              }),\n              expect.objectContaining({\n                url: 'http://omnicare.com/fhir/StructureDefinition/chief-complaint',\n                valueString: 'Annual checkup'\n              })\n            ])\n          })\n        );\n        expect(result).toEqual(mockEncounter);\n      });\n    });\n\n    describe('searchEncounters', () => {\n      it('should search for encounters', async () => {\n        const mockBundle: Bundle<Encounter> = {\n          resourceType: 'Bundle',\n          type: 'searchset',\n          total: 1,\n          entry: [{\n            resource: {\n              resourceType: 'Encounter',\n              id: 'enc123',\n              status: 'finished',\n              class: {\n                system: 'http://terminology.hl7.org/CodeSystem/v3-ActCode',\n                code: 'AMB',\n                display: 'Ambulatory'\n              },\n              subject: { reference: 'Patient/pat123' }\n            }\n          }]\n        };\n\n        mockMedplumService.searchResources.mockResolvedValue(mockBundle);\n\n        const searchParams = { patient: 'pat123', status: 'finished' };\n        const result = await fhirService.searchEncounters(searchParams);\n\n        expect(mockMedplumService.searchResources).toHaveBeenCalledWith('Encounter', searchParams);\n        expect(result).toEqual(mockBundle);\n      });\n    });\n  });\n\n  describe('Observation Operations', () => {\n    describe('createObservation', () => {\n      it('should create an observation with required fields', async () => {\n        const mockObservation: Observation = {\n          resourceType: 'Observation',\n          id: 'obs123',\n          status: 'final',\n          category: [{\n            coding: [{\n              system: 'http://terminology.hl7.org/CodeSystem/observation-category',\n              code: 'vital-signs',\n              display: 'Vital Signs'\n            }]\n          }],\n          code: {\n            coding: [{\n              system: 'http://loinc.org',\n              code: '8310-5',\n              display: 'Body temperature'\n            }]\n          },\n          subject: { reference: 'Patient/pat123' }\n        };\n\n        mockMedplumService.createResource.mockResolvedValue(mockObservation);\n\n        const observationData: Partial<OmniCareObservation> = {\n          status: 'final',\n          category: [{\n            coding: [{\n              system: 'http://terminology.hl7.org/CodeSystem/observation-category',\n              code: 'vital-signs',\n              display: 'Vital Signs'\n            }]\n          }],\n          code: {\n            coding: [{\n              system: 'http://loinc.org',\n              code: '8310-5',\n              display: 'Body temperature'\n            }]\n          },\n          subject: { reference: 'Patient/pat123' },\n          valueQuantity: { value: 98.6, unit: '°F' },\n          deviceUsed: 'Digital thermometer'\n        };\n\n        const result = await fhirService.createObservation(observationData);\n\n        expect(mockMedplumService.createResource).toHaveBeenCalledWith(\n          expect.objectContaining({\n            resourceType: 'Observation',\n            status: 'final',\n            subject: { reference: 'Patient/pat123' },\n            valueQuantity: { value: 98.6, unit: '°F' },\n            identifier: expect.arrayContaining([\n              expect.objectContaining({\n                system: 'http://omnicare.com/observation-id'\n              })\n            ]),\n            extension: expect.arrayContaining([\n              expect.objectContaining({\n                url: 'http://omnicare.com/fhir/StructureDefinition/device-used',\n                valueString: 'Digital thermometer'\n              })\n            ])\n          })\n        );\n        expect(result).toEqual(mockObservation);\n      });\n    });\n\n    describe('createVitalSigns', () => {\n      it('should create multiple vital sign observations', async () => {\n        const mockTempObservation: Observation = {\n          resourceType: 'Observation',\n          id: 'obs-temp123',\n          status: 'final',\n          category: [{\n            coding: [{\n              system: 'http://terminology.hl7.org/CodeSystem/observation-category',\n              code: 'vital-signs',\n              display: 'Vital Signs'\n            }]\n          }],\n          code: {\n            coding: [{\n              system: 'http://loinc.org',\n              code: '8310-5',\n              display: 'Body temperature'\n            }]\n          },\n          subject: { reference: 'Patient/pat123' },\n          encounter: { reference: 'Encounter/enc123' },\n          valueQuantity: { value: 98.6, unit: '°F' }\n        };\n\n        const mockBPObservation: Observation = {\n          resourceType: 'Observation',\n          id: 'obs-bp123',\n          status: 'final',\n          category: [{\n            coding: [{\n              system: 'http://terminology.hl7.org/CodeSystem/observation-category',\n              code: 'vital-signs',\n              display: 'Vital Signs'\n            }]\n          }],\n          code: {\n            coding: [{\n              system: 'http://loinc.org',\n              code: '85354-9',\n              display: 'Blood pressure panel with all children optional'\n            }]\n          },\n          subject: { reference: 'Patient/pat123' },\n          encounter: { reference: 'Encounter/enc123' },\n          component: [\n            {\n              code: {\n                coding: [{\n                  system: 'http://loinc.org',\n                  code: '8480-6',\n                  display: 'Systolic blood pressure'\n                }]\n              },\n              valueQuantity: { value: 120, unit: 'mmHg' }\n            },\n            {\n              code: {\n                coding: [{\n                  system: 'http://loinc.org',\n                  code: '8462-4',\n                  display: 'Diastolic blood pressure'\n                }]\n              },\n              valueQuantity: { value: 80, unit: 'mmHg' }\n            }\n          ]\n        };\n\n        mockMedplumService.createResource\n          .mockResolvedValueOnce(mockTempObservation)\n          .mockResolvedValueOnce(mockBPObservation);\n\n        const vitals = {\n          temperature: 98.6,\n          bloodPressureSystolic: 120,\n          bloodPressureDiastolic: 80\n        };\n\n        const result = await fhirService.createVitalSigns('pat123', 'enc123', vitals);\n\n        expect(result).toHaveLength(2);\n        expect(result[0]).toEqual(mockTempObservation);\n        expect(result[1]).toEqual(mockBPObservation);\n        expect(mockMedplumService.createResource).toHaveBeenCalledTimes(2);\n      });\n\n      it('should handle empty vitals', async () => {\n        const result = await fhirService.createVitalSigns('pat123', 'enc123', {});\n\n        expect(result).toEqual([]);\n        expect(mockMedplumService.createResource).not.toHaveBeenCalled();\n      });\n    });\n  });\n\n  describe('Medication Operations', () => {\n    describe('createMedicationRequest', () => {\n      it('should create a medication request', async () => {\n        const mockMedRequest: MedicationRequest = {\n          resourceType: 'MedicationRequest',\n          id: 'med123',\n          status: 'active',\n          intent: 'order',\n          subject: { reference: 'Patient/pat123' },\n          medicationCodeableConcept: {\n            coding: [{\n              system: 'http://www.nlm.nih.gov/research/umls/rxnorm',\n              code: '313782',\n              display: 'Acetaminophen 325 MG Oral Tablet'\n            }]\n          }\n        };\n\n        mockMedplumService.createResource.mockResolvedValue(mockMedRequest);\n\n        const medicationData = {\n          subject: { reference: 'Patient/pat123' },\n          medicationCodeableConcept: {\n            coding: [{\n              system: 'http://www.nlm.nih.gov/research/umls/rxnorm',\n              code: '313782',\n              display: 'Acetaminophen 325 MG Oral Tablet'\n            }]\n          },\n          dosageInstruction: [{\n            text: 'Take 1 tablet by mouth every 4-6 hours as needed for pain'\n          }]\n        };\n\n        const result = await fhirService.createMedicationRequest(medicationData);\n\n        expect(mockMedplumService.createResource).toHaveBeenCalledWith(\n          expect.objectContaining({\n            resourceType: 'MedicationRequest',\n            status: 'active',\n            intent: 'order',\n            subject: { reference: 'Patient/pat123' },\n            medicationCodeableConcept: medicationData.medicationCodeableConcept,\n            dosageInstruction: medicationData.dosageInstruction,\n            identifier: expect.arrayContaining([\n              expect.objectContaining({\n                system: 'http://omnicare.com/medication-request-id'\n              })\n            ])\n          })\n        );\n        expect(result).toEqual(mockMedRequest);\n      });\n    });\n  });\n\n  describe('Service Request Operations', () => {\n    describe('createServiceRequest', () => {\n      it('should create a service request with default code', async () => {\n        const mockServiceRequest: ServiceRequest = {\n          resourceType: 'ServiceRequest',\n          id: 'srv123',\n          status: 'active',\n          intent: 'order',\n          code: {\n            coding: [{\n              system: 'http://snomed.info/sct',\n              code: '15220000',\n              display: 'Laboratory test'\n            }]\n          },\n          subject: { reference: 'Patient/pat123' }\n        };\n\n        mockMedplumService.createResource.mockResolvedValue(mockServiceRequest);\n\n        const serviceRequestData = {\n          subject: { reference: 'Patient/pat123' },\n          reasonCode: [{\n            coding: [{\n              system: 'http://snomed.info/sct',\n              code: '386053000',\n              display: 'Evaluation procedure'\n            }]\n          }]\n        };\n\n        const result = await fhirService.createServiceRequest(serviceRequestData);\n\n        expect(mockMedplumService.createResource).toHaveBeenCalledWith(\n          expect.objectContaining({\n            resourceType: 'ServiceRequest',\n            status: 'active',\n            intent: 'order',\n            subject: { reference: 'Patient/pat123' },\n            code: {\n              coding: [{\n                system: 'http://snomed.info/sct',\n                code: '15220000',\n                display: 'Laboratory test'\n              }]\n            },\n            identifier: expect.arrayContaining([\n              expect.objectContaining({\n                system: 'http://omnicare.com/service-request-id'\n              })\n            ])\n          })\n        );\n        expect(result).toEqual(mockServiceRequest);\n      });\n    });\n  });\n\n  describe('Utility Methods', () => {\n    describe('validateResource', () => {\n      it('should validate a FHIR resource', async () => {\n        const mockValidationResult = {\n          resourceType: 'OperationOutcome',\n          issue: []\n        };\n\n        mockMedplumService.validateResource.mockResolvedValue(mockValidationResult);\n\n        const patient: Patient = {\n          resourceType: 'Patient',\n          id: 'pat123',\n          name: [{ family: 'Doe', given: ['John'] }]\n        };\n\n        const result = await fhirService.validateResource(patient);\n\n        expect(mockMedplumService.validateResource).toHaveBeenCalledWith(patient);\n        expect(result.valid).toBe(true);\n        expect(result.errors).toEqual([]);\n        expect(result.warnings).toEqual([]);\n      });\n\n      it('should handle validation errors', async () => {\n        const mockValidationResult = {\n          resourceType: 'OperationOutcome',\n          issue: [{\n            severity: 'error',\n            code: 'required',\n            diagnostics: 'Missing required field: name',\n            expression: ['Patient.name']\n          }]\n        };\n\n        mockMedplumService.validateResource.mockResolvedValue(mockValidationResult);\n\n        const patient: Patient = {\n          resourceType: 'Patient',\n          id: 'pat123'\n        };\n\n        const result = await fhirService.validateResource(patient);\n\n        expect(result.valid).toBe(false);\n        expect(result.errors).toHaveLength(1);\n        expect(result.errors[0]).toEqual({\n          path: 'Patient.name',\n          message: 'Missing required field: name',\n          code: 'required',\n          severity: 'error'\n        });\n      });\n\n      it('should handle validation warnings', async () => {\n        const mockValidationResult = {\n          resourceType: 'OperationOutcome',\n          issue: [{\n            severity: 'warning',\n            code: 'informational',\n            diagnostics: 'Recommended field missing: birthDate',\n            expression: ['Patient.birthDate']\n          }]\n        };\n\n        mockMedplumService.validateResource.mockResolvedValue(mockValidationResult);\n\n        const patient: Patient = {\n          resourceType: 'Patient',\n          id: 'pat123',\n          name: [{ family: 'Doe', given: ['John'] }]\n        };\n\n        const result = await fhirService.validateResource(patient);\n\n        expect(result.valid).toBe(true);\n        expect(result.warnings).toHaveLength(1);\n        expect(result.warnings[0]).toEqual({\n          path: 'Patient.birthDate',\n          message: 'Recommended field missing: birthDate',\n          code: 'informational',\n          severity: 'warning'\n        });\n      });\n    });\n\n    describe('getPatientEverything', () => {\n      it('should retrieve all patient data', async () => {\n        const mockBundle: Bundle = {\n          resourceType: 'Bundle',\n          type: 'searchset',\n          total: 5,\n          entry: [\n            { resource: { resourceType: 'Patient', id: 'pat123', name: [{ family: 'Doe', given: ['John'] }] } },\n            { resource: { resourceType: 'Encounter', id: 'enc123', status: 'finished', class: { code: 'AMB' }, subject: { reference: 'Patient/pat123' } } },\n            { resource: { resourceType: 'Observation', id: 'obs123', status: 'final', code: { text: 'Test' }, subject: { reference: 'Patient/pat123' } } }\n          ]\n        };\n\n        mockMedplumService.searchResources.mockResolvedValue(mockBundle);\n\n        const result = await fhirService.getPatientEverything('pat123');\n\n        expect(mockMedplumService.searchResources).toHaveBeenCalledWith('Patient', {\n          _id: 'pat123',\n          _include: '*',\n          _revinclude: '*'\n        });\n        expect(result).toEqual(mockBundle);\n        expect(result.entry).toHaveLength(3);\n      });\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle network errors gracefully', async () => {\n      const networkError = new Error('Network timeout');\n      mockMedplumService.createResource.mockRejectedValue(networkError);\n\n      const patientData = { name: [{ family: 'Doe', given: ['John'] }] };\n\n      await expect(fhirService.createPatient(patientData)).rejects.toThrow('Network timeout');\n    });\n\n    it('should handle validation errors during creation', async () => {\n      const validationError = new Error('Invalid resource format');\n      mockMedplumService.createResource.mockRejectedValue(validationError);\n\n      const invalidPatientData = {};\n\n      await expect(fhirService.createPatient(invalidPatientData)).rejects.toThrow('Invalid resource format');\n    });\n\n    it('should handle resource not found errors', async () => {\n      const notFoundError = new Error('Resource not found');\n      mockMedplumService.readResource.mockRejectedValue(notFoundError);\n\n      await expect(fhirService.getPatient('nonexistent')).rejects.toThrow('Resource not found');\n    });\n  });\n\n  describe('Identifier Generation', () => {\n    it('should generate unique identifiers for different resource types', async () => {\n      const mockPatient: Patient = { resourceType: 'Patient', id: 'pat123', name: [{ family: 'Doe' }] };\n      const mockPractitioner: Practitioner = { resourceType: 'Practitioner', id: 'prac123', name: [{ family: 'Smith' }] };\n      \n      mockMedplumService.createResource\n        .mockResolvedValueOnce(mockPatient)\n        .mockResolvedValueOnce(mockPractitioner);\n\n      await fhirService.createPatient({ name: [{ family: 'Doe' }] });\n      await fhirService.createPractitioner({ name: [{ family: 'Smith' }] });\n\n      const patientCall = mockMedplumService.createResource.mock.calls[0]?.[0] as Patient;\n      const practitionerCall = mockMedplumService.createResource.mock.calls[1]?.[0] as Practitioner;\n\n      expect(patientCall?.identifier?.[0]?.value).toMatch(/^P\\d+$/);\n      expect(practitionerCall?.identifier?.[0]?.value).toMatch(/^PR\\d+$/); \n    });\n  });\n\n  describe('Extension Handling', () => {\n    it('should filter out undefined extensions', async () => {\n      const mockPatient: Patient = { resourceType: 'Patient', id: 'pat123', name: [{ family: 'Doe' }] };\n      mockMedplumService.createResource.mockResolvedValue(mockPatient);\n\n      const patientData = {\n        name: [{ family: 'Doe', given: ['John'] }],\n        registrationDate: undefined,\n        preferredLanguage: 'en'\n      };\n\n      await fhirService.createPatient(patientData);\n\n      const createdPatient = mockMedplumService.createResource.mock.calls[0]?.[0] as Patient;\n      \n      // Should only include defined extensions\n      expect(createdPatient?.extension).toHaveLength(2); // registration-date (default) and preferred-language\n      expect(createdPatient?.extension?.find((ext: any) => \n        ext.url === 'http://omnicare.com/fhir/StructureDefinition/preferred-language'\n      )).toBeDefined();\n    });\n  });\n});"],"version":3}