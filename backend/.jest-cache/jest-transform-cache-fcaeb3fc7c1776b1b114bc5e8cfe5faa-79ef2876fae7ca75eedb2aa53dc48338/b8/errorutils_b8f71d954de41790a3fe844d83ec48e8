6401177e470d2484b891d4cf3b17b5f1
"use strict";
/**
 * Error handling utilities for TypeScript
 * Provides type-safe error handling with proper type guards
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppError = void 0;
exports.isError = isError;
exports.hasMessage = hasMessage;
exports.hasCode = hasCode;
exports.getErrorMessage = getErrorMessage;
exports.getErrorCode = getErrorCode;
exports.getErrorStack = getErrorStack;
exports.normalizeError = normalizeError;
exports.isErrorType = isErrorType;
exports.isFHIRError = isFHIRError;
exports.getFHIRErrorMessage = getFHIRErrorMessage;
exports.withErrorHandling = withErrorHandling;
exports.handleError = handleError;
/**
 * Type guard to check if a value is an Error instance
 * @param value - The value to check
 * @returns True if the value is an Error instance
 */
function isError(value) {
    return (value instanceof Error ||
        (typeof value === 'object' &&
            value !== null &&
            'message' in value &&
            'name' in value &&
            typeof value.message === 'string' &&
            typeof value.name === 'string'));
}
/**
 * Type guard to check if a value has a message property
 * @param value - The value to check
 * @returns True if the value has a message property
 */
function hasMessage(value) {
    return (typeof value === 'object' &&
        value !== null &&
        'message' in value &&
        typeof value.message === 'string');
}
/**
 * Type guard to check if a value has a code property
 * @param value - The value to check
 * @returns True if the value has a code property
 */
function hasCode(value) {
    return (typeof value === 'object' &&
        value !== null &&
        'code' in value &&
        typeof value.code === 'string');
}
/**
 * Safely extract error message from unknown error type
 * @param error - The error to extract message from
 * @returns A string error message
 */
function getErrorMessage(error) {
    if (isError(error)) {
        return error.message;
    }
    if (hasMessage(error)) {
        return error.message;
    }
    if (typeof error === 'string') {
        return error;
    }
    return String(error);
}
/**
 * Safely extract error code from unknown error type
 * @param error - The error to extract code from
 * @returns The error code if available, undefined otherwise
 */
function getErrorCode(error) {
    if (hasCode(error)) {
        return error.code;
    }
    if (isError(error) && 'code' in error) {
        return error.code;
    }
    return undefined;
}
/**
 * Safely extract stack trace from unknown error type
 * @param error - The error to extract stack from
 * @returns The stack trace if available, undefined otherwise
 */
function getErrorStack(error) {
    if (isError(error)) {
        return error.stack;
    }
    if (typeof error === 'object' && error !== null && 'stack' in error && typeof error.stack === 'string') {
        return error.stack;
    }
    return undefined;
}
/**
 * Create a normalized error object from unknown error type
 * @param error - The error to normalize
 * @param context - Optional context to add to the error
 * @returns A normalized error object
 */
function normalizeError(error, context) {
    return {
        message: getErrorMessage(error),
        code: getErrorCode(error),
        stack: getErrorStack(error),
        context
    };
}
/**
 * Check if an error is a specific type of error
 * @param error - The error to check
 * @param errorType - The error constructor to check against
 * @returns True if the error is of the specified type
 */
function isErrorType(error, errorType) {
    return error instanceof errorType;
}
/**
 * Check if an error is a FHIR error
 * @param error - The error to check
 * @returns True if the error is a FHIR error
 */
function isFHIRError(error) {
    if (typeof error !== 'object' || error === null) {
        return false;
    }
    const err = error;
    return ((err.outcome && Array.isArray(err.outcome.issue)) ||
        (err.response?.data?.resourceType === 'OperationOutcome'));
}
/**
 * Extract error message from FHIR error
 * @param error - The FHIR error
 * @returns The error message
 */
function getFHIRErrorMessage(error) {
    if (error.outcome?.issue?.[0]) {
        const issue = error.outcome.issue[0];
        return issue.diagnostics || issue.details?.text || 'FHIR operation failed';
    }
    if (error.response?.data?.issue?.[0]) {
        const issue = error.response.data.issue[0];
        return issue.diagnostics || issue.details?.text || 'FHIR operation failed';
    }
    return 'FHIR operation failed';
}
/**
 * Handle errors in async functions with proper typing
 * @param fn - The async function to wrap
 * @returns A wrapped function that handles errors
 */
function withErrorHandling(fn, errorHandler) {
    return (async (...args) => {
        try {
            return await fn(...args);
        }
        catch (error) {
            if (errorHandler) {
                errorHandler(error);
            }
            throw error;
        }
    });
}
/**
 * Custom application error class
 */
class AppError extends Error {
    statusCode;
    isOperational;
    errorCode;
    constructor(message, statusCode = 500, isOperational = true, errorCode) {
        super(message);
        this.statusCode = statusCode;
        this.isOperational = isOperational;
        this.errorCode = errorCode;
        Error.captureStackTrace(this, this.constructor);
    }
}
exports.AppError = AppError;
/**
 * Handle errors for HTTP responses - simplified version
 * @param error - The error to handle
 * @param res - Express response object
 */
function handleError(error, res) {
    if (res) {
        const statusCode = error instanceof AppError ? error.statusCode : 500;
        const message = getErrorMessage(error);
        res.status(statusCode).json({
            success: false,
            error: {
                message,
                statusCode,
                timestamp: new Date().toISOString(),
            }
        });
    }
    else {
        // Log error if no response object
        console.error('Error occurred:', getErrorMessage(error));
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,