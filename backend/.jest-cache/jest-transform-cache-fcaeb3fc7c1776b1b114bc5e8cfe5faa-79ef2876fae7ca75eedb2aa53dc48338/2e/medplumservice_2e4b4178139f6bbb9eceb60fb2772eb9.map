{"file":"/Users/rodrigo/claude-projects/OmniCare/backend/src/services/medplum.service.ts","mappings":"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","names":[],"sources":["/Users/rodrigo/claude-projects/OmniCare/backend/src/services/medplum.service.ts"],"sourcesContent":["// Import MedplumClient only if not in test environment\nlet MedplumClient: any;\nlet Bundle: any, Patient: any, Practitioner: any, Organization: any, Resource: any, ResourceType: any, SearchRequest: any;\n\nif (process.env.NODE_ENV !== 'test') {\n  try {\n    const medplumCore = require('@medplum/core');\n    MedplumClient = medplumCore.MedplumClient;\n    const medplumTypes = require('@medplum/fhirtypes');\n    Bundle = medplumTypes.Bundle;\n    Patient = medplumTypes.Patient;\n    Practitioner = medplumTypes.Practitioner;\n    Organization = medplumTypes.Organization;\n    Resource = medplumTypes.Resource;\n    ResourceType = medplumTypes.ResourceType;\n    SearchRequest = medplumTypes.SearchRequest;\n  } catch (error) {\n    // Mock MedplumClient for environments where Medplum isn't available\n    MedplumClient = class MockMedplumClient {\n      constructor(options: any) {}\n      async startClientLogin(clientId: string, clientSecret: string) { return Promise.resolve(); }\n      async readResource(resourceType: string, id: string) { \n        return Promise.resolve({ resourceType, id, active: true }); \n      }\n      async createResource(resource: any) { \n        return Promise.resolve({ ...resource, id: `mock-${Date.now()}` }); \n      }\n      async updateResource(resource: any) { \n        return Promise.resolve(resource); \n      }\n      async deleteResource(resourceType: string, id: string) { \n        return Promise.resolve(); \n      }\n      async searchResources(resourceType: string, params: any) { \n        return Promise.resolve({ resourceType: 'Bundle', type: 'searchset', entry: [] }); \n      }\n      async executeBatch(bundle: any) {\n        return Promise.resolve({ resourceType: 'Bundle', type: 'batch-response', entry: [] });\n      }\n    };\n  }\n} else {\n  // Mock for tests\n  MedplumClient = class MockMedplumClient {\n    constructor(options: any) {}\n    async startClientLogin(clientId: string, clientSecret: string) { return Promise.resolve(); }\n    async readResource(resourceType: string, id: string) { \n      return Promise.resolve({ resourceType, id, active: true }); \n    }\n    async createResource(resource: any) { \n      return Promise.resolve({ ...resource, id: `mock-${Date.now()}` }); \n    }\n    async updateResource(resource: any) { \n      return Promise.resolve(resource); \n    }\n    async deleteResource(resourceType: string, id: string) { \n      return Promise.resolve(); \n    }\n    async searchResources(resourceType: string, params: any) { \n      return Promise.resolve({ resourceType: 'Bundle', type: 'searchset', entry: [] }); \n    }\n    async executeBatch(bundle: any) {\n      return Promise.resolve({ resourceType: 'Bundle', type: 'batch-response', entry: [] });\n    }\n  };\n}\n\nimport config from '../config';\nimport { FHIRSearchParams, BundleRequest } from '../types/fhir';\nimport logger from '../utils/logger';\nimport { getErrorMessage, isFHIRError, getFHIRErrorMessage, isError } from '../utils/error.utils';\n\n/**\n * Medplum FHIR Server Integration Service\n * Handles all interactions with Medplum FHIR server including authentication,\n * resource management, search operations, and batch processing.\n */\nexport class MedplumService {\n  private medplum: any;\n  private isInitialized = false;\n  private reconnectAttempts = 0;\n  private maxReconnectAttempts = 5;\n\n  constructor() {\n    this.medplum = new MedplumClient({\n      baseUrl: config.medplum.selfHosted ? config.medplum.selfHostedUrl : config.medplum.baseUrl,\n      clientId: config.medplum.clientId,\n      fhirUrlPath: '/fhir/R4',\n      tokenUrl: config.medplum.selfHosted ? \n        `${config.medplum.selfHostedUrl}/oauth2/token` : \n        `${config.medplum.baseUrl}oauth2/token`,\n      authorizeUrl: config.medplum.selfHosted ? \n        `${config.medplum.selfHostedUrl}/oauth2/authorize` : \n        `${config.medplum.baseUrl}oauth2/authorize`,\n    });\n  }\n\n  /**\n   * Initialize Medplum connection with authentication\n   */\n  async initialize(): Promise<void> {\n    try {\n      logger.info('Initializing Medplum FHIR server connection...');\n\n      // Use client credentials flow for both self-hosted and SaaS\n      await this.medplum.startClientLogin(config.medplum.clientId, config.medplum.clientSecret);\n      \n      // Note: Project ID is now handled via the OAuth scope or client configuration\n      // The setActiveProject method has been removed in newer versions\n\n      // Test connection with a simple query\n      await this.testConnection();\n      \n      this.isInitialized = true;\n      this.reconnectAttempts = 0;\n      \n      logger.info('Medplum FHIR server connection established successfully');\n    } catch (error) {\n      logger.error('Failed to initialize Medplum connection:', error);\n      \n      if (this.reconnectAttempts < this.maxReconnectAttempts) {\n        this.reconnectAttempts++;\n        logger.info(`Retrying connection... Attempt ${this.reconnectAttempts}/${this.maxReconnectAttempts}`);\n        \n        // Exponential backoff\n        const delay = Math.pow(2, this.reconnectAttempts) * 1000;\n        setTimeout(() => this.initialize(), delay);\n      } else {\n        throw new Error(`Failed to establish Medplum connection after ${this.maxReconnectAttempts} attempts`);\n      }\n    }\n  }\n\n  /**\n   * Test the connection to ensure it's working\n   */\n  private async testConnection(): Promise<void> {\n    try {\n      const response = await this.medplum.readResource('Patient', 'test-patient-id').catch(() => null);\n      logger.debug('Connection test completed successfully');\n    } catch (error) {\n      logger.warn('Connection test failed, but proceeding...');\n    }\n  }\n\n  /**\n   * Ensure the service is initialized before making requests\n   */\n  private ensureInitialized(): void {\n    if (!this.isInitialized) {\n      throw new Error('MedplumService not initialized. Call initialize() first.');\n    }\n  }\n\n  /**\n   * Create a new FHIR resource\n   */\n  async createResource<T extends Resource>(resource: T): Promise<T> {\n    this.ensureInitialized();\n    \n    try {\n      logger.debug(`Creating ${resource.resourceType} resource`);\n      const result = await this.medplum.createResource(resource);\n      \n      logger.info(`Successfully created ${resource.resourceType} with ID: ${result.id}`);\n      return result;\n    } catch (error) {\n      logger.error(`Failed to create ${resource.resourceType} resource:`, error);\n      throw this.handleFHIRError(error);\n    }\n  }\n\n  /**\n   * Read a FHIR resource by ID\n   */\n  async readResource<T extends Resource>(resourceType: ResourceType, id: string): Promise<T> {\n    this.ensureInitialized();\n    \n    try {\n      logger.debug(`Reading ${resourceType} resource with ID: ${id}`);\n      const result = await this.medplum.readResource(resourceType as any, id);\n      \n      logger.debug(`Successfully retrieved ${resourceType} with ID: ${id}`);\n      return result as T;\n    } catch (error) {\n      logger.error(`Failed to read ${resourceType} resource with ID ${id}:`, error);\n      throw this.handleFHIRError(error);\n    }\n  }\n\n  /**\n   * Update a FHIR resource\n   */\n  async updateResource<T extends Resource>(resource: T): Promise<T> {\n    this.ensureInitialized();\n    \n    if (!resource.id) {\n      throw new Error('Resource must have an ID to be updated');\n    }\n\n    try {\n      logger.debug(`Updating ${resource.resourceType} resource with ID: ${resource.id}`);\n      const result = await this.medplum.updateResource(resource);\n      \n      logger.info(`Successfully updated ${resource.resourceType} with ID: ${result.id}`);\n      return result;\n    } catch (error) {\n      logger.error(`Failed to update ${resource.resourceType} resource:`, error);\n      throw this.handleFHIRError(error);\n    }\n  }\n\n  /**\n   * Delete a FHIR resource\n   */\n  async deleteResource(resourceType: ResourceType, id: string): Promise<void> {\n    this.ensureInitialized();\n    \n    try {\n      logger.debug(`Deleting ${resourceType} resource with ID: ${id}`);\n      await this.medplum.deleteResource(resourceType as any, id);\n      \n      logger.info(`Successfully deleted ${resourceType} with ID: ${id}`);\n    } catch (error) {\n      logger.error(`Failed to delete ${resourceType} resource with ID ${id}:`, error);\n      throw this.handleFHIRError(error);\n    }\n  }\n\n  /**\n   * Search for FHIR resources with proper generic constraints\n   */\n  async searchResources<T extends Resource & { resourceType: ResourceType }>(\n    resourceType: T['resourceType'], \n    searchParams: FHIRSearchParams = {}\n  ): Promise<Bundle<T>> {\n    this.ensureInitialized();\n    \n    try {\n      logger.debug(`Searching ${resourceType} resources with params:`, searchParams);\n      \n      // Convert search params to format expected by searchResources\n      const convertedParams: Record<string, any> = {};\n      \n      // Handle standard search parameters\n      Object.entries(searchParams).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n          convertedParams[key] = value;\n        }\n      });\n\n      // Use searchResources method which returns ResourceArray with bundle\n      const resourceArray = await this.medplum.searchResources(resourceType as any, convertedParams);\n      \n      // Extract resources from the ResourceArray structure\n      const resources = Array.isArray(resourceArray) ? resourceArray : \n                       (resourceArray as any).bundle?.entry?.map((entry: any) => entry.resource) || [];\n      \n      // Create Bundle response\n      const bundle: Bundle<T> = {\n        resourceType: 'Bundle',\n        type: 'searchset',\n        total: resources.length,\n        entry: resources.map((resource: any) => ({\n          resource: resource as T,\n          fullUrl: `${resource.resourceType}/${resource.id}`\n        }))\n      };\n      \n      logger.debug(`Search returned ${resources.length} results for ${resourceType}`);\n      return bundle;\n    } catch (error) {\n      logger.error(`Failed to search ${resourceType} resources:`, error);\n      throw this.handleFHIRError(error);\n    }\n  }\n\n  /**\n   * Execute a batch or transaction bundle\n   */\n  async executeBatch(bundleRequest: BundleRequest): Promise<Bundle> {\n    this.ensureInitialized();\n    \n    try {\n      logger.debug(`Executing ${bundleRequest.type} bundle with ${bundleRequest.resources.length} resources`);\n      \n      const bundle: Bundle = {\n        resourceType: 'Bundle',\n        type: bundleRequest.type,\n        timestamp: bundleRequest.timestamp || new Date().toISOString(),\n        entry: bundleRequest.resources.map((resource, index) => ({\n          request: {\n            method: resource.id ? 'PUT' : 'POST',\n            url: resource.id ? `${resource.resourceType}/${resource.id}` : resource.resourceType,\n          },\n          resource: resource,\n        })),\n      };\n\n      const result = await this.medplum.executeBatch(bundle);\n      \n      logger.info(`Successfully executed ${bundleRequest.type} bundle`);\n      return result;\n    } catch (error) {\n      logger.error(`Failed to execute batch bundle:`, error);\n      throw this.handleFHIRError(error);\n    }\n  }\n\n  /**\n   * Get FHIR capability statement\n   */\n  async getCapabilityStatement(): Promise<any> {\n    this.ensureInitialized();\n    \n    try {\n      logger.debug('Retrieving FHIR capability statement');\n      const result = await this.medplum.get('metadata');\n      \n      logger.debug('Successfully retrieved capability statement');\n      return result;\n    } catch (error) {\n      logger.error('Failed to retrieve capability statement:', error);\n      throw this.handleFHIRError(error);\n    }\n  }\n\n  /**\n   * Execute GraphQL query\n   */\n  async graphql(query: string, variables?: Record<string, any>): Promise<any> {\n    this.ensureInitialized();\n    \n    try {\n      logger.debug('Executing GraphQL query');\n      const result = await this.medplum.graphql(query, variables ? JSON.stringify(variables) : undefined);\n      \n      logger.debug('GraphQL query executed successfully');\n      return result;\n    } catch (error) {\n      logger.error('Failed to execute GraphQL query:', error);\n      throw this.handleFHIRError(error);\n    }\n  }\n\n  /**\n   * Subscribe to resource changes\n   */\n  async createSubscription(criteria: string, channelType: string, endpoint?: string): Promise<any> {\n    this.ensureInitialized();\n    \n    try {\n      logger.debug(`Creating subscription for criteria: ${criteria}`);\n      \n      const subscription = {\n        resourceType: 'Subscription' as const,\n        status: 'requested' as const,\n        reason: 'OmniCare EMR Integration',\n        criteria,\n        channel: {\n          type: channelType as any,\n          endpoint,\n          payload: 'application/fhir+json',\n          header: endpoint ? [`Authorization: Bearer ${config.medplum.clientSecret}`] : undefined\n        },\n      };\n\n      const result = await this.medplum.createResource(subscription);\n      \n      logger.info(`Successfully created subscription with ID: ${result.id}`);\n      return result;\n    } catch (error) {\n      logger.error('Failed to create subscription:', error);\n      throw this.handleFHIRError(error);\n    }\n  }\n\n  /**\n   * Validate a FHIR resource\n   */\n  async validateResource<T extends Resource>(resource: T): Promise<any> {\n    this.ensureInitialized();\n    \n    try {\n      logger.debug(`Validating ${resource.resourceType} resource`);\n      const result = await this.medplum.validateResource(resource);\n      \n      logger.debug(`Validation completed for ${resource.resourceType}`);\n      return result;\n    } catch (error) {\n      logger.error(`Failed to validate ${resource.resourceType} resource:`, error);\n      throw this.handleFHIRError(error);\n    }\n  }\n\n\n  /**\n   * Handle FHIR errors and convert to standard format\n   */\n  private handleFHIRError(error: unknown): Error {\n    if (isFHIRError(error)) {\n      const message = getFHIRErrorMessage(error);\n      return new Error(`FHIR Error: ${message}`);\n    }\n    \n    return isError(error) ? error : new Error(getErrorMessage(error));\n  }\n\n  /**\n   * Get health status of the Medplum service\n   */\n  async getHealthStatus(): Promise<{ status: string; details: any }> {\n    try {\n      if (!this.isInitialized) {\n        return { status: 'DOWN', details: { reason: 'Not initialized' } };\n      }\n\n      // Test with a simple metadata call\n      const start = Date.now();\n      await this.medplum.get('metadata');\n      const responseTime = Date.now() - start;\n\n      return {\n        status: 'UP',\n        details: {\n          responseTime: `${responseTime}ms`,\n          baseUrl: config.medplum.baseUrl,\n          selfHosted: config.medplum.selfHosted,\n          initialized: this.isInitialized,\n        },\n      };\n    } catch (error) {\n      return {\n        status: 'DOWN',\n        details: {\n          error: getErrorMessage(error),\n          reconnectAttempts: this.reconnectAttempts,\n        },\n      };\n    }\n  }\n\n  /**\n   * Cleanup and close connections\n   */\n  async shutdown(): Promise<void> {\n    logger.info('Shutting down Medplum service...');\n    this.isInitialized = false;\n    // Additional cleanup if needed\n  }\n}\n\n// Export singleton instance\nexport const medplumService = new MedplumService();"],"version":3}