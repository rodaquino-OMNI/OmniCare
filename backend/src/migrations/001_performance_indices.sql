-- OmniCare Database Performance Optimization Indices
-- Generated by DATABASE OPTIMIZATION AGENT
-- Optimizes common query patterns for healthcare data access

-- =============================================================================
-- CORE FHIR RESOURCE INDICES
-- =============================================================================

-- High-priority composite index for resource type and last updated filtering
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_fhir_resources_type_updated 
ON fhir_resources(resource_type, last_updated DESC) 
WHERE active = true;

-- Patient ID lookup optimization (most frequent operation)
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_fhir_resources_patient_ref 
ON fhir_resources(patient_reference) 
WHERE resource_type IN ('Observation', 'Encounter', 'MedicationRequest', 'DiagnosticReport');

-- Subject reference for clinical data aggregation
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_fhir_resources_subject_type 
ON fhir_resources(subject_reference, resource_type, last_updated DESC)
WHERE subject_reference IS NOT NULL;

-- =============================================================================
-- PATIENT DATA OPTIMIZATION
-- =============================================================================

-- Patient demographic search optimization
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_patients_name_search 
ON patients(LOWER(family_name), LOWER(given_name)) 
WHERE active = true;

-- Patient date of birth range queries
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_patients_birth_date 
ON patients(birth_date) 
WHERE birth_date IS NOT NULL;

-- Patient identifier lookup (MRN, SSN, etc.)
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_patients_identifier_search 
ON patients(identifier_value, identifier_system) 
WHERE identifier_value IS NOT NULL;

-- Patient address-based search
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_patients_address_search 
ON patients(LOWER(city), LOWER(state), postal_code) 
WHERE city IS NOT NULL;

-- =============================================================================
-- CLINICAL WORKFLOW OPTIMIZATION
-- =============================================================================

-- Encounter status and date filtering
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_encounters_status_date 
ON encounters(status, encounter_date DESC, patient_id) 
WHERE status IN ('in-progress', 'finished', 'planned');

-- Appointment scheduling optimization
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_appointments_datetime_provider 
ON appointments(appointment_datetime, practitioner_id) 
WHERE status IN ('booked', 'arrived', 'in-progress');

-- Laboratory results by patient and date
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_observations_patient_date 
ON observations(patient_id, effective_date DESC, observation_type) 
WHERE observation_type LIKE 'laboratory%';

-- Medication requests by patient and status
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_medications_patient_status 
ON medication_requests(patient_id, status, authored_on DESC) 
WHERE status IN ('active', 'on-hold', 'completed');

-- =============================================================================
-- AUDIT AND SECURITY OPTIMIZATION
-- =============================================================================

-- Audit log temporal queries
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_audit_logs_timestamp_user 
ON audit.audit_logs(timestamp DESC, user_id) 
WHERE timestamp > (NOW() - INTERVAL '90 days');

-- Session management optimization
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_user_sessions_expiry 
ON user_sessions(expires_at) 
WHERE expires_at > NOW();

-- Transaction checkpoint resume optimization
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_transaction_checkpoints_composite 
ON audit.transaction_checkpoints(transaction_id, created_at DESC);

-- =============================================================================
-- PERFORMANCE MONITORING INDICES
-- =============================================================================

-- API metrics temporal queries
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_api_metrics_endpoint_date 
ON api_metrics(endpoint, method, created_at DESC);

-- Error tracking optimization
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_error_logs_timestamp_severity 
ON error_logs(timestamp DESC, severity) 
WHERE severity IN ('ERROR', 'CRITICAL');

-- =============================================================================
-- HIPAA COMPLIANCE OPTIMIZATION
-- =============================================================================

-- Patient access audit tracking
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_patient_access_audit 
ON audit.patient_access_logs(patient_id, accessed_at DESC, user_id);

-- Data encryption key rotation tracking
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_encryption_keys_rotation 
ON security.encryption_keys(key_id, rotation_date DESC) 
WHERE status = 'active';

-- =============================================================================
-- INTEGRATION AND SYNC OPTIMIZATION
-- =============================================================================

-- FHIR sync status tracking
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_sync_status_resource_timestamp 
ON sync_status(resource_type, last_sync_timestamp DESC, sync_status);

-- HL7 message processing queue
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_hl7_queue_priority_timestamp 
ON hl7_message_queue(priority DESC, created_at ASC, processing_status) 
WHERE processing_status IN ('pending', 'processing');

-- External system integration tracking
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_integration_logs_system_timestamp 
ON integration_logs(external_system, timestamp DESC, status);

-- =============================================================================
-- SPECIALIZED HEALTHCARE INDICES
-- =============================================================================

-- Vital signs time-series optimization
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_vitals_patient_timestamp 
ON vital_signs(patient_id, measurement_timestamp DESC, vital_type);

-- Allergy and adverse reaction alerts
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_allergies_patient_severity 
ON allergies(patient_id, severity DESC, status) 
WHERE status = 'active';

-- Insurance verification optimization
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_insurance_patient_priority 
ON patient_insurance(patient_id, priority ASC, effective_date DESC) 
WHERE status = 'active';

-- Care plan tracking
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_care_plans_patient_status 
ON care_plans(patient_id, status, created_date DESC) 
WHERE status IN ('active', 'on-hold');

-- =============================================================================
-- REPORTING AND ANALYTICS OPTIMIZATION
-- =============================================================================

-- Population health queries
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_population_health_metrics 
ON population_health_data(metric_type, calculation_date DESC, population_segment);

-- Quality measure calculations
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_quality_measures_period 
ON quality_measures(measure_id, reporting_period DESC, patient_population);

-- Financial analytics
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_billing_analytics_date 
ON billing_records(service_date DESC, provider_id, billing_status) 
WHERE service_date > (NOW() - INTERVAL '2 years');

-- =============================================================================
-- MOBILE AND OFFLINE OPTIMIZATION
-- =============================================================================

-- Offline sync conflict resolution
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_sync_conflicts_timestamp 
ON sync_conflicts(conflict_timestamp DESC, resource_type, resolution_status);

-- Mobile device session tracking
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_mobile_sessions_device_timestamp 
ON mobile_sessions(device_id, last_activity DESC) 
WHERE session_status = 'active';

-- =============================================================================
-- PARTIAL INDICES FOR ACTIVE RECORDS
-- =============================================================================

-- Only index active patients for most common queries
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_active_patients_lookup 
ON patients(id, last_updated) 
WHERE active = true;

-- Only index non-deleted FHIR resources
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_active_fhir_resources 
ON fhir_resources(id, resource_type, last_updated) 
WHERE deleted_at IS NULL;

-- Only index current appointments (not historical)
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_current_appointments 
ON appointments(appointment_datetime, status, patient_id) 
WHERE appointment_datetime >= CURRENT_DATE - INTERVAL '7 days';

-- =============================================================================
-- EXPRESSION INDICES FOR COMPUTED VALUES
-- =============================================================================

-- Age calculation optimization for patient queries
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_patients_computed_age 
ON patients(DATE_PART('year', AGE(birth_date))) 
WHERE birth_date IS NOT NULL AND active = true;

-- Full-text search on patient names
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_patients_fulltext_name 
ON patients USING gin(to_tsvector('english', COALESCE(given_name, '') || ' ' || COALESCE(family_name, ''))) 
WHERE active = true;

-- JSON field optimization for FHIR resources
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_fhir_resources_json_search 
ON fhir_resources USING gin(resource_data) 
WHERE resource_data IS NOT NULL;

-- =============================================================================
-- MAINTENANCE AND STATISTICS
-- =============================================================================

-- Update table statistics after index creation
ANALYZE patients, fhir_resources, encounters, appointments, observations;
ANALYZE audit.audit_logs, audit.transaction_checkpoints;
ANALYZE medication_requests, vital_signs, allergies, patient_insurance;

-- Create index usage monitoring view
CREATE OR REPLACE VIEW index_usage_stats AS
SELECT 
    schemaname,
    tablename,
    indexname,
    idx_tup_read,
    idx_tup_fetch,
    idx_scan
FROM pg_stat_user_indexes 
WHERE idx_scan > 0
ORDER BY idx_scan DESC;

-- Log completion
INSERT INTO audit.maintenance_log (
    operation_type, 
    operation_details, 
    execution_timestamp, 
    status
) VALUES (
    'INDEX_CREATION',
    'Database performance optimization indices created by DATABASE OPTIMIZATION AGENT',
    NOW(),
    'COMPLETED'
);

-- Performance optimization notes:
-- 1. All indices use CONCURRENTLY to avoid locking during creation
-- 2. Partial indices reduce index size and improve performance for common patterns
-- 3. Composite indices are ordered for optimal query performance
-- 4. JSON indices support complex FHIR resource queries
-- 5. Expression indices enable computed value optimization
-- 6. Regular ANALYZE ensures optimal query plans