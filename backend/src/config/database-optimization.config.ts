/**
 * OmniCare Database Optimization Configuration
 * Comprehensive database performance optimization settings
 * Generated by DATABASE OPTIMIZATION AGENT
 */

import * as os from 'os';

export interface DatabaseOptimizationConfig {
  connectionPool: {
    // Dynamic pool sizing
    production: {
      min: number;
      max: number;
      scaling: 'cpu-based' | 'fixed';
    };
    staging: {
      min: number;
      max: number;
    };
    development: {
      min: number;
      max: number;
    };
  };
  
  queryOptimization: {
    // Query execution timeouts
    timeouts: {
      fast: number;      // Simple queries
      standard: number;  // Regular queries
      complex: number;   // Complex analytical queries
      batch: number;     // Batch operations
    };
    
    // Query batching configuration
    batching: {
      enabled: boolean;
      maxBatchSize: number;
      batchTimeout: number; // milliseconds
      enableForOperations: string[];
    };
    
    // Query retry configuration
    retry: {
      maxRetries: number;
      baseDelay: number;
      maxDelay: number;
      retryableErrors: string[];
    };
  };
  
  caching: {
    // Cache TTL strategies by data type
    ttlStrategies: Record<string, number>;
    
    // Cache warming configuration
    warming: {
      enabled: boolean;
      schedules: {
        critical: string; // cron expression
        reference: string;
        clinical: string;
      };
      batchSize: number;
    };
    
    // Cache invalidation patterns
    invalidation: {
      patterns: Record<string, string[]>;
      cascading: boolean;
    };
  };
  
  indexing: {
    // Index creation strategy
    strategy: 'aggressive' | 'conservative' | 'adaptive';
    
    // Index monitoring
    monitoring: {
      enabled: boolean;
      unusedIndexThreshold: number; // days
      lowUsageThreshold: number;    // scan count
    };
    
    // Automatic index suggestions
    suggestions: {
      enabled: boolean;
      slowQueryThreshold: number; // milliseconds
      frequencyThreshold: number; // times per day
    };
  };
  
  monitoring: {
    // Performance metrics collection
    metrics: {
      enabled: boolean;
      samplingRate: number; // percentage of queries to sample
      retentionDays: number;
    };
    
    // Alert thresholds
    alerts: {
      slowQueryThreshold: number;
      highConnectionUsage: number;
      lowCacheHitRate: number;
      errorRate: number;
    };
  };
}

/**
 * Get environment-specific database optimization configuration
 */
export function getDatabaseOptimizationConfig(env: string = 'production'): DatabaseOptimizationConfig {
  const cpuCores = os.cpus().length;
  
  const baseConfig: DatabaseOptimizationConfig = {
    connectionPool: {
      production: {
        min: Math.max(2, Math.floor(cpuCores / 2)),
        max: Math.min(50, cpuCores * 4),
        scaling: 'cpu-based'
      },
      staging: {
        min: 2,
        max: Math.min(20, cpuCores * 2)
      },
      development: {
        min: 1,
        max: Math.min(10, cpuCores)
      }
    },
    
    queryOptimization: {
      timeouts: {
        fast: 5000,     // 5 seconds
        standard: 15000, // 15 seconds
        complex: 45000,  // 45 seconds
        batch: 120000    // 2 minutes
      },
      
      batching: {
        enabled: true,
        maxBatchSize: 100,
        batchTimeout: 50, // milliseconds
        enableForOperations: ['findById', 'findByIds', 'exists']
      },
      
      retry: {
        maxRetries: 3,
        baseDelay: 1000, // 1 second
        maxDelay: 5000,  // 5 seconds
        retryableErrors: [
          'connection timeout',
          'connection reset',
          'server closed the connection',
          'connection terminated',
          'too many connections'
        ]
      }
    },
    
    caching: {
      ttlStrategies: {
        // Static reference data
        organizations: 86400,     // 24 hours
        practitioners: 3600,     // 1 hour
        locations: 3600,         // 1 hour
        codesystems: 7200,       // 2 hours
        
        // Semi-static patient data
        patients: 1800,          // 30 minutes
        patient_demographics: 3600, // 1 hour
        patient_contacts: 1800,  // 30 minutes
        
        // Dynamic clinical data
        encounters: 600,         // 10 minutes
        observations: 300,       // 5 minutes
        vital_signs: 180,        // 3 minutes
        medication_requests: 600, // 10 minutes
        
        // Real-time data
        alerts: 60,              // 1 minute
        notifications: 30,       // 30 seconds
        session_data: 900,       // 15 minutes
        
        // Search and list results
        search_results: 120,     // 2 minutes
        list_queries: 180,       // 3 minutes
        count_queries: 300       // 5 minutes
      },
      
      warming: {
        enabled: env === 'production',
        schedules: {
          critical: '0 */6 * * *',   // Every 6 hours
          reference: '0 2 * * *',    // Daily at 2 AM
          clinical: '*/30 * * * *'   // Every 30 minutes
        },
        batchSize: 50
      },
      
      invalidation: {
        patterns: {
          'patient:*': ['patient_list:*', 'patient_search:*', 'patient_count:*'],
          'encounter:*': ['encounter_list:*', 'patient_encounters:*'],
          'observation:*': ['observation_list:*', 'patient_observations:*', 'latest_vitals:*'],
          'practitioner:*': ['practitioner_list:*', 'schedule:*'],
          'organization:*': ['organization_list:*', 'provider_directory:*']
        },
        cascading: true
      }
    },
    
    indexing: {
      strategy: env === 'production' ? 'aggressive' : 'conservative',
      
      monitoring: {
        enabled: true,
        unusedIndexThreshold: 30, // days
        lowUsageThreshold: 10     // scans per day
      },
      
      suggestions: {
        enabled: true,
        slowQueryThreshold: 1000, // 1 second
        frequencyThreshold: 100   // times per day
      }
    },
    
    monitoring: {
      metrics: {
        enabled: true,
        samplingRate: env === 'production' ? 10 : 100, // 10% in prod, 100% in dev
        retentionDays: 30
      },
      
      alerts: {
        slowQueryThreshold: env === 'production' ? 2000 : 5000, // 2s prod, 5s dev
        highConnectionUsage: 0.8,   // 80%
        lowCacheHitRate: 0.7,       // 70%
        errorRate: 0.02             // 2%
      }
    }
  };
  
  return baseConfig;
}

/**
 * Healthcare-specific optimization patterns
 */
export const HEALTHCARE_OPTIMIZATION_PATTERNS = {
  // Patient-centric query patterns
  patientDataAccess: {
    // Optimize for patient ID-based queries
    primaryKeys: ['patient_id', 'subject_reference'],
    
    // Common patient data joins
    commonJoins: [
      'patients -> encounters',
      'patients -> observations', 
      'patients -> medication_requests',
      'encounters -> observations'
    ],
    
    // Frequently accessed patient fields
    hotFields: [
      'patients.id',
      'patients.identifier',
      'patients.name',
      'patients.birth_date',
      'patients.gender'
    ]
  },
  
  // Clinical workflow patterns
  clinicalWorkflow: {
    // Appointment scheduling queries
    scheduling: {
      indices: ['practitioner_id', 'appointment_datetime', 'status'],
      cacheKeys: ['practitioner_schedule:*', 'available_slots:*']
    },
    
    // Laboratory results
    laboratory: {
      indices: ['patient_id', 'test_type', 'result_date'],
      cacheKeys: ['lab_results:*', 'pending_results:*']
    },
    
    // Medication management
    medications: {
      indices: ['patient_id', 'medication_code', 'status', 'effective_date'],
      cacheKeys: ['active_medications:*', 'medication_history:*']
    }
  },
  
  // FHIR resource optimization
  fhirOptimization: {
    // Resource type-specific optimizations
    resourceTypes: {
      'Patient': {
        hotPaths: ['identifier', 'name', 'telecom', 'address'],
        cacheTTL: 1800 // 30 minutes
      },
      'Observation': {
        hotPaths: ['subject', 'code', 'valueQuantity', 'effectiveDateTime'],
        cacheTTL: 300 // 5 minutes
      },
      'Encounter': {
        hotPaths: ['subject', 'status', 'class', 'period'],
        cacheTTL: 600 // 10 minutes
      },
      'MedicationRequest': {
        hotPaths: ['subject', 'medicationCodeableConcept', 'status', 'authoredOn'],
        cacheTTL: 600 // 10 minutes
      }
    },
    
    // FHIR search parameter optimization
    searchParameters: {
      Patient: ['identifier', 'name', 'family', 'given', 'birthdate', 'gender'],
      Observation: ['patient', 'code', 'date', 'category'],
      Encounter: ['patient', 'date', 'status', 'class'],
      MedicationRequest: ['patient', 'medication', 'status', 'authoredon']
    }
  },
  
  // Audit and compliance patterns
  auditOptimization: {
    // HIPAA audit log optimization
    auditLogs: {
      indices: ['patient_id', 'user_id', 'action_type', 'timestamp'],
      partitioning: 'monthly', // Partition by month for performance
      retention: '7_years'     // HIPAA retention requirement
    },
    
    // Access tracking
    accessTracking: {
      realTime: ['patient_access', 'phi_access'],
      batch: ['usage_analytics', 'compliance_reports']
    }
  }
};

/**
 * Performance monitoring configuration for healthcare workflows
 */
export const HEALTHCARE_PERFORMANCE_CONFIG = {
  // Critical performance metrics for healthcare
  criticalMetrics: {
    // Patient lookup performance (most critical)
    patientLookup: {
      target: 200,   // milliseconds
      alert: 500,    // milliseconds
      critical: 1000 // milliseconds
    },
    
    // Clinical data retrieval
    clinicalData: {
      target: 500,   // milliseconds
      alert: 1000,   // milliseconds
      critical: 2000 // milliseconds
    },
    
    // Search operations
    search: {
      target: 1000,  // milliseconds
      alert: 2000,   // milliseconds
      critical: 5000 // milliseconds
    },
    
    // Report generation
    reports: {
      target: 5000,   // milliseconds
      alert: 10000,   // milliseconds
      critical: 30000 // milliseconds
    }
  },
  
  // Healthcare-specific alerting
  healthcareAlerts: {
    // Patient safety alerts
    patientSafety: {
      enabled: true,
      thresholds: {
        allergyLookupFailure: 0.001,    // 0.1% failure rate
        medicationCheckFailure: 0.001,   // 0.1% failure rate
        vitalSignsDelay: 5000           // 5 second delay
      }
    },
    
    // Clinical workflow alerts
    clinicalWorkflow: {
      enabled: true,
      thresholds: {
        appointmentSchedulingDelay: 3000, // 3 seconds
        labResultDelay: 10000,            // 10 seconds
        chartLoadTime: 2000               // 2 seconds
      }
    }
  }
};

/**
 * Database maintenance configuration
 */
export const DATABASE_MAINTENANCE_CONFIG = {
  // Automated maintenance tasks
  automation: {
    // Statistics update
    analyzeStats: {
      schedule: '0 2 * * *', // Daily at 2 AM
      tables: 'auto',        // Auto-detect tables needing analysis
      threshold: 0.1         // 10% data change threshold
    },
    
    // Index maintenance
    indexMaintenance: {
      schedule: '0 1 * * 0', // Weekly on Sunday at 1 AM
      operations: ['reindex_unused', 'analyze_usage', 'suggest_new']
    },
    
    // Vacuum operations
    vacuum: {
      schedule: '0 3 * * 0', // Weekly on Sunday at 3 AM
      full: false,           // Use regular vacuum, not FULL
      analyze: true          // Run ANALYZE after vacuum
    },
    
    // Cache cleanup
    cacheCleanup: {
      schedule: '*/15 * * * *', // Every 15 minutes
      operations: ['expired_keys', 'memory_pressure', 'unused_patterns']
    }
  },
  
  // Performance monitoring
  monitoring: {
    // Query performance tracking
    queryTracking: {
      enabled: true,
      slowLogThreshold: 1000, // 1 second
      sampleRate: 0.1,        // 10% sampling
      retention: 30           // days
    },
    
    // Index usage monitoring
    indexMonitoring: {
      enabled: true,
      trackUnused: true,
      reportingInterval: 'weekly'
    }
  }
};

export default getDatabaseOptimizationConfig;